{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Notes","title":"Preface"},{"location":"#notes","text":"","title":"Notes"},{"location":"color/","text":"Primary colors Default: Teal Click on a tile to change the primary color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; }) }) Accent colors Default: Blue Click on a tile to change the accent color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; }) })","title":"Color"},{"location":"color/#primary-colors","text":"Default: Teal Click on a tile to change the primary color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; }) })","title":"Primary colors"},{"location":"color/#accent-colors","text":"Default: Blue Click on a tile to change the accent color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; }) })","title":"Accent colors"},{"location":"1-Fundm/1.1/","text":"1. Python \u652f\u6301\u7684\u6570\u503c\u7c7b\u578b \u2460 int 1 2 3 var = 1 varb = 0b10001000 varx = 0xaf \u2461 long 1 varx = 0xafb2 L \u5728 Python 3.0 \u4ee5\u524d\uff0c\u957f\u6574\u578b\u9700\u8981\u663e\u5f0f\u58f0\u660e\uff1b 3.0 \u4e4b\u540e\uff0c\u5173\u4e8e\u6574\u578b\u548c\u957f\u6574\u578b\u4f1a\u81ea\u52a8\u8bc6\u522b\u3002 \u2462 float 1 2 3 var = 2.0 var_xd = 2. var_s = 3e12 \u2463 complex 1 2 var = 1 + 2j varl = 3e10j 2. \u57fa\u672c\u6570\u503c\u8fd0\u7b97\u7b26 1 2 3 4 5 6 \"\"\" +, -, *, / \"\"\" a = 3 // 2 # quotient a = 3 % 2 # remainder a = a ** a # square 3. \u5f3a\u5236\u8f6c\u6362 int(x, base) \u8f6c\u6362\u4e3a\u6574\u578b long(x, base) \u8f6c\u6362\u4e3a\u957f\u6574\u578b float(x) \u8f6c\u6362\u4e3a\u6d6e\u70b9","title":"1.Number"},{"location":"1-Fundm/1.1/#1-python","text":"","title":"1. Python \u652f\u6301\u7684\u6570\u503c\u7c7b\u578b"},{"location":"1-Fundm/1.1/#1-int","text":"1 2 3 var = 1 varb = 0b10001000 varx = 0xaf","title":"\u2460 int"},{"location":"1-Fundm/1.1/#2-long","text":"1 varx = 0xafb2 L \u5728 Python 3.0 \u4ee5\u524d\uff0c\u957f\u6574\u578b\u9700\u8981\u663e\u5f0f\u58f0\u660e\uff1b 3.0 \u4e4b\u540e\uff0c\u5173\u4e8e\u6574\u578b\u548c\u957f\u6574\u578b\u4f1a\u81ea\u52a8\u8bc6\u522b\u3002","title":"\u2461 long"},{"location":"1-Fundm/1.1/#3-float","text":"1 2 3 var = 2.0 var_xd = 2. var_s = 3e12","title":"\u2462 float"},{"location":"1-Fundm/1.1/#4-complex","text":"1 2 var = 1 + 2j varl = 3e10j","title":"\u2463 complex"},{"location":"1-Fundm/1.1/#2","text":"1 2 3 4 5 6 \"\"\" +, -, *, / \"\"\" a = 3 // 2 # quotient a = 3 % 2 # remainder a = a ** a # square","title":"2. \u57fa\u672c\u6570\u503c\u8fd0\u7b97\u7b26"},{"location":"1-Fundm/1.1/#3","text":"int(x, base) \u8f6c\u6362\u4e3a\u6574\u578b long(x, base) \u8f6c\u6362\u4e3a\u957f\u6574\u578b float(x) \u8f6c\u6362\u4e3a\u6d6e\u70b9","title":"3. \u5f3a\u5236\u8f6c\u6362"},{"location":"1-Fundm/1.2/","text":"1. \u5b57\u7b26\u4e32\u8868\u793a \u5b57\u7b26\u4e32\u53ef\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u521b\u5efa\uff1a 1 2 s1 = 'abc' s2 = \"abc\" \u4e09\u4e2a\u5f15\u53f7\u53ef\u7528\u4e8e\u652f\u6301\u591a\u884c\u5b57\u7b26\u4e32\uff0c\u5b9e\u73b0\u6240\u89c1\u5373\u6240\u5f97 1 2 3 s3 = \"\"\" abc \"\"\" \u5c06\u5bf9\u8c61\u5f3a\u5236\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff1a \u2460 str() : \u9002\u5408\u4eba\u8bfb\u53d6 \u2461 repr() : \u9002\u5408\u89e3\u91ca\u5668\u8bfb\u53d6 2. \u5b57\u7b26\u4e32\u8fd0\u7b97\u7b26 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 a = \"hello\" b = \"world\" # Concatenation print ( a + \" \" + b ) # Concat the same string for times print ( a * 3 ) # Get specified character print ( a [ 1 ]) # Cut a part print ( a [ 1 : 4 ]) print ( a [: 2 ]) # the first two charaters print ( a [ 2 :]) # in addition to first two characters print ( a [: 2 ] + a [ 2 :]) # 'hello' print ( a [ 1 : 1000 ]) # invalid index is changed to the length: 'ello' print ( a [ - 1 ]) # negative: count from right to left # Determine if the character is in the string print ( 'h' in a ) print ( '0' not in a ) # Format print ( 'a has %d charaters' % ( 5 )) 3. \u5b57\u7b26\u7f16\u7801 ASCII : \u65e9\u671f\u8ba1\u7b97\u673a\u88ab\u53d1\u660e\u65f6\u7684\u5b57\u7b26\u7f16\u7801\uff0c\u5305\u542b\u82f1\u6587\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u7b26\u53f7\u7b49 127 \u4e2a\u5b57\u7b26\uff0c\u6bcf\u4e2a\u5360 1 \u5b57\u8282 Unicode : \u7edf\u4e00\u4e86\u5404\u79cd\u8bed\u8a00 ( GBK ...) \u548c\u7b26\u53f7\u7684\u7f16\u7801\uff0c\u89e3\u51b3\u4e86\u4e71\u7801\u95ee\u9898\u3002\u4e00\u822c\u6bcf\u4e2a\u5b57\u7b26\u5360 2 \u4e2a\u5b57\u8282\uff0c\u90e8\u5206\u751f\u50fb\u5b57\u7b26\u5360 4 \u4e2a\u5b57\u8282\u4ee5\u4e0a\u3002 UTF-8 : \u5982\u679c\u6587\u672c\u4e2d\u82f1\u6587\u5b57\u7b26\u5360\u591a\u6570\uff0c Unicode \u6bd4\u8f83\u6d6a\u8d39\u5b58\u50a8\u7a7a\u95f4\uff0c\u56e0\u6b64\u5b9e\u73b0\u4e86\u53ef\u53d8\u957f\u7684 UTF-8 \u7f16\u7801\u3002\u5b83\u6839\u636e Unicode \u7684\u957f\u5ea6\u8fdb\u884c\u7f16\u7801\uff1a\u82f1\u6587\u5b57\u7b26\u88ab\u7f16\u7801\u4e3a 1 \u4e2a\u5b57\u8282\uff0c\u6c49\u5b57\u901a\u5e38\u662f 3 \u4e2a\u5b57\u8282\u3002\u4e00\u4e2a Unicode \u7801\u53ef\u80fd\u88ab\u8f6c\u6362\u6210 1$\\sim$6 \u4e2a Byte \u7684 UTF-8 \u7801\uff0c\u53d6\u51b3\u4e8e Unicode \u7801\u7684\u957f\u5ea6\u3002\u7531\u4e8e UTF-8 \u7684\u7f16\u7801\u89c4\u5219\uff0c\u5b83\u4e5f\u662f ASCII \u7801\u7684\u4e00\u4e2a\u8d85\u96c6\u3002\u901a\u5e38\uff0c\u5b58\u50a8\u6216\u901a\u4fe1\u9009\u62e9\u5bf9\u76f8\u5e94\u5b57\u7b26\u96c6\u8282\u7701\u7a7a\u95f4\u7684\u7f16\u7801\uff1a \u5185\u5b58\u4e2d\u4f7f\u7528 Unicode \u7f16\u7801\uff0c\u78c1\u76d8\u4e2d\u4f7f\u7528 UTF-8 \u7f16\u7801 \u7f51\u7edc\u901a\u4fe1\u4f7f\u7528 UTF-8 \u7f16\u7801 4. Python \u5b57\u7b26\u4e32\u7f16\u7801 Python 3 \u7684\u5b57\u7b26\u4e32\u662f Unicode \u7f16\u7801\u3002 1 2 s1 = \"abc\" s_equiv = u \"abc\" \u53ef\u4ee5\u901a\u8fc7 ord() \u548c chr() \u83b7\u53d6\u5b57\u7b26\u7684 Unicode \u503c\u548c Unicode \u5b57\u7b26 1 2 print ( ord ( \"\u597d\" )) print ( chr ( ord ( \"\u597d\" ))) (1). bytes \u2003 bytes \u662f Python 3 \u65b0\u589e\u7684\u201c\u5b57\u8282\u4e32\u201d\u7c7b\u578b\uff0c\u9002\u7528\u4e8e str \u7684\u64cd\u4f5c\u4e5f\u9002\u7528\u4e8e\u5b83\uff0c\u548c str \u4e0d\u540c\u7684\u662f\uff0c\u4e0d\u7ba1\u5b83\u5b58\u50a8\u7684\u5b57\u7b26\u4e32\u4ee5\u4f55\u79cd\u65b9\u5f0f\u7f16\u7801\uff0c bytes[] \u64cd\u4f5c\u7684\u5355\u4f4d\u90fd\u662f 1 \u4e2a\u5b57\u8282\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 # create by Constructor s1 = bytes () s2 = bytes ( 'hello' , encoding = 'ascii' ) # create by declaration # note: if the character can't be denoted by ASCII, we denote # it by format '/x##' s3 = b 'a' # default chars: ascii s4 = b ' \\xe4 ' s5 = b ' \\u54c8 ' # '\\u##': unicode # create by tranforming directly s6 = 'hello' . encode ( 'utf-8' ) \u2003\u5728\u5199\u5165\u6587\u4ef6\u6216\u8fdb\u884c\u7f51\u7edc\u4f20\u8f93\u65f6\uff0c\u9700\u8981\u628a\u5b57\u7b26\u4e32\u901a\u8fc7 encode() \u5b58\u50a8\u5728 bytes \u4e2d\uff0c\u5f53\u8bfb\u53d6\u7684\u65f6\u5019\u518d\u901a\u8fc7 decode() \u89e3\u7801\u3002 \u2003\u4e3a\u907f\u514d\u4e71\u7801\u95ee\u9898\uff0c encode() \u7684\u53c2\u6570\u5e94\u5c3d\u53ef\u80fd\u4f7f\u7528 \"utf-8\" \u3002 1 2 3 s = b ' \\xe5\\x93\\x88 ' print ( s1 . decode ( 'unicode-escape' )) # s is equivalent to '\\u54c8' (\"\u54c8\"), but the result is gibberish (2). py \u6587\u4ef6\u7684\u7f16\u7801 py \u6587\u4ef6\u7684\u5f00\u5934\u901a\u5e38\u8fd9\u6837\u5f00\u5934\uff1a 1 2 #!/usr/bin/env python3 # -*- coding: utf-8 -*- \u2003\u7b2c\u4e00\u884c\u7684\u76ee\u7684\u662f\u544a\u8bc9 Linux \u7cfb\u7edf\uff0c\u8fd9\u662f\u4e00\u4e2a Python \u53ef\u6267\u884c\u7a0b\u5e8f\uff0c Windows \u4f1a\u9ed8\u8ba4\u5ffd\u7565\u8fd9\u4e00\u6761\u3002 \u2003\u7b2c\u4e8c\u884c\u7684\u76ee\u7684\u662f\u544a\u8bc9 Python \u89e3\u91ca\u5668\uff0c\u6309\u7167 utf-8 \u7f16\u7801\u8bfb\u53d6\u6e90\u4ee3\u7801\u3002\u53ea\u6709\u6587\u672c\u7f16\u8f91\u5668\u8bbe\u4e3a utf-8 \u5e76\u4e14\u52a0\u4e0a\u8fd9\u4e2a\u5f00\u5934\uff0c\u547d\u4ee4\u884c\u6d4b\u8bd5\u7684\u65f6\u5019\u624d\u4e00\u5b9a\u4f1a\u6b63\u5e38\u663e\u793a\u4e2d\u6587\u3002","title":"2.String"},{"location":"1-Fundm/1.2/#1","text":"\u5b57\u7b26\u4e32\u53ef\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u521b\u5efa\uff1a 1 2 s1 = 'abc' s2 = \"abc\" \u4e09\u4e2a\u5f15\u53f7\u53ef\u7528\u4e8e\u652f\u6301\u591a\u884c\u5b57\u7b26\u4e32\uff0c\u5b9e\u73b0\u6240\u89c1\u5373\u6240\u5f97 1 2 3 s3 = \"\"\" abc \"\"\" \u5c06\u5bf9\u8c61\u5f3a\u5236\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff1a \u2460 str() : \u9002\u5408\u4eba\u8bfb\u53d6 \u2461 repr() : \u9002\u5408\u89e3\u91ca\u5668\u8bfb\u53d6","title":"1. \u5b57\u7b26\u4e32\u8868\u793a"},{"location":"1-Fundm/1.2/#2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 a = \"hello\" b = \"world\" # Concatenation print ( a + \" \" + b ) # Concat the same string for times print ( a * 3 ) # Get specified character print ( a [ 1 ]) # Cut a part print ( a [ 1 : 4 ]) print ( a [: 2 ]) # the first two charaters print ( a [ 2 :]) # in addition to first two characters print ( a [: 2 ] + a [ 2 :]) # 'hello' print ( a [ 1 : 1000 ]) # invalid index is changed to the length: 'ello' print ( a [ - 1 ]) # negative: count from right to left # Determine if the character is in the string print ( 'h' in a ) print ( '0' not in a ) # Format print ( 'a has %d charaters' % ( 5 ))","title":"2. \u5b57\u7b26\u4e32\u8fd0\u7b97\u7b26"},{"location":"1-Fundm/1.2/#3","text":"ASCII : \u65e9\u671f\u8ba1\u7b97\u673a\u88ab\u53d1\u660e\u65f6\u7684\u5b57\u7b26\u7f16\u7801\uff0c\u5305\u542b\u82f1\u6587\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u7b26\u53f7\u7b49 127 \u4e2a\u5b57\u7b26\uff0c\u6bcf\u4e2a\u5360 1 \u5b57\u8282 Unicode : \u7edf\u4e00\u4e86\u5404\u79cd\u8bed\u8a00 ( GBK ...) \u548c\u7b26\u53f7\u7684\u7f16\u7801\uff0c\u89e3\u51b3\u4e86\u4e71\u7801\u95ee\u9898\u3002\u4e00\u822c\u6bcf\u4e2a\u5b57\u7b26\u5360 2 \u4e2a\u5b57\u8282\uff0c\u90e8\u5206\u751f\u50fb\u5b57\u7b26\u5360 4 \u4e2a\u5b57\u8282\u4ee5\u4e0a\u3002 UTF-8 : \u5982\u679c\u6587\u672c\u4e2d\u82f1\u6587\u5b57\u7b26\u5360\u591a\u6570\uff0c Unicode \u6bd4\u8f83\u6d6a\u8d39\u5b58\u50a8\u7a7a\u95f4\uff0c\u56e0\u6b64\u5b9e\u73b0\u4e86\u53ef\u53d8\u957f\u7684 UTF-8 \u7f16\u7801\u3002\u5b83\u6839\u636e Unicode \u7684\u957f\u5ea6\u8fdb\u884c\u7f16\u7801\uff1a\u82f1\u6587\u5b57\u7b26\u88ab\u7f16\u7801\u4e3a 1 \u4e2a\u5b57\u8282\uff0c\u6c49\u5b57\u901a\u5e38\u662f 3 \u4e2a\u5b57\u8282\u3002\u4e00\u4e2a Unicode \u7801\u53ef\u80fd\u88ab\u8f6c\u6362\u6210 1$\\sim$6 \u4e2a Byte \u7684 UTF-8 \u7801\uff0c\u53d6\u51b3\u4e8e Unicode \u7801\u7684\u957f\u5ea6\u3002\u7531\u4e8e UTF-8 \u7684\u7f16\u7801\u89c4\u5219\uff0c\u5b83\u4e5f\u662f ASCII \u7801\u7684\u4e00\u4e2a\u8d85\u96c6\u3002\u901a\u5e38\uff0c\u5b58\u50a8\u6216\u901a\u4fe1\u9009\u62e9\u5bf9\u76f8\u5e94\u5b57\u7b26\u96c6\u8282\u7701\u7a7a\u95f4\u7684\u7f16\u7801\uff1a \u5185\u5b58\u4e2d\u4f7f\u7528 Unicode \u7f16\u7801\uff0c\u78c1\u76d8\u4e2d\u4f7f\u7528 UTF-8 \u7f16\u7801 \u7f51\u7edc\u901a\u4fe1\u4f7f\u7528 UTF-8 \u7f16\u7801","title":"3. \u5b57\u7b26\u7f16\u7801"},{"location":"1-Fundm/1.2/#4-python","text":"Python 3 \u7684\u5b57\u7b26\u4e32\u662f Unicode \u7f16\u7801\u3002 1 2 s1 = \"abc\" s_equiv = u \"abc\" \u53ef\u4ee5\u901a\u8fc7 ord() \u548c chr() \u83b7\u53d6\u5b57\u7b26\u7684 Unicode \u503c\u548c Unicode \u5b57\u7b26 1 2 print ( ord ( \"\u597d\" )) print ( chr ( ord ( \"\u597d\" )))","title":"4. Python \u5b57\u7b26\u4e32\u7f16\u7801"},{"location":"1-Fundm/1.2/#1-bytes","text":"bytes \u662f Python 3 \u65b0\u589e\u7684\u201c\u5b57\u8282\u4e32\u201d\u7c7b\u578b\uff0c\u9002\u7528\u4e8e str \u7684\u64cd\u4f5c\u4e5f\u9002\u7528\u4e8e\u5b83\uff0c\u548c str \u4e0d\u540c\u7684\u662f\uff0c\u4e0d\u7ba1\u5b83\u5b58\u50a8\u7684\u5b57\u7b26\u4e32\u4ee5\u4f55\u79cd\u65b9\u5f0f\u7f16\u7801\uff0c bytes[] \u64cd\u4f5c\u7684\u5355\u4f4d\u90fd\u662f 1 \u4e2a\u5b57\u8282\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 # create by Constructor s1 = bytes () s2 = bytes ( 'hello' , encoding = 'ascii' ) # create by declaration # note: if the character can't be denoted by ASCII, we denote # it by format '/x##' s3 = b 'a' # default chars: ascii s4 = b ' \\xe4 ' s5 = b ' \\u54c8 ' # '\\u##': unicode # create by tranforming directly s6 = 'hello' . encode ( 'utf-8' ) \u2003\u5728\u5199\u5165\u6587\u4ef6\u6216\u8fdb\u884c\u7f51\u7edc\u4f20\u8f93\u65f6\uff0c\u9700\u8981\u628a\u5b57\u7b26\u4e32\u901a\u8fc7 encode() \u5b58\u50a8\u5728 bytes \u4e2d\uff0c\u5f53\u8bfb\u53d6\u7684\u65f6\u5019\u518d\u901a\u8fc7 decode() \u89e3\u7801\u3002 \u2003\u4e3a\u907f\u514d\u4e71\u7801\u95ee\u9898\uff0c encode() \u7684\u53c2\u6570\u5e94\u5c3d\u53ef\u80fd\u4f7f\u7528 \"utf-8\" \u3002 1 2 3 s = b ' \\xe5\\x93\\x88 ' print ( s1 . decode ( 'unicode-escape' )) # s is equivalent to '\\u54c8' (\"\u54c8\"), but the result is gibberish","title":"(1). bytes"},{"location":"1-Fundm/1.2/#2-py","text":"py \u6587\u4ef6\u7684\u5f00\u5934\u901a\u5e38\u8fd9\u6837\u5f00\u5934\uff1a 1 2 #!/usr/bin/env python3 # -*- coding: utf-8 -*- \u2003\u7b2c\u4e00\u884c\u7684\u76ee\u7684\u662f\u544a\u8bc9 Linux \u7cfb\u7edf\uff0c\u8fd9\u662f\u4e00\u4e2a Python \u53ef\u6267\u884c\u7a0b\u5e8f\uff0c Windows \u4f1a\u9ed8\u8ba4\u5ffd\u7565\u8fd9\u4e00\u6761\u3002 \u2003\u7b2c\u4e8c\u884c\u7684\u76ee\u7684\u662f\u544a\u8bc9 Python \u89e3\u91ca\u5668\uff0c\u6309\u7167 utf-8 \u7f16\u7801\u8bfb\u53d6\u6e90\u4ee3\u7801\u3002\u53ea\u6709\u6587\u672c\u7f16\u8f91\u5668\u8bbe\u4e3a utf-8 \u5e76\u4e14\u52a0\u4e0a\u8fd9\u4e2a\u5f00\u5934\uff0c\u547d\u4ee4\u884c\u6d4b\u8bd5\u7684\u65f6\u5019\u624d\u4e00\u5b9a\u4f1a\u6b63\u5e38\u663e\u793a\u4e2d\u6587\u3002","title":"(2). py \u6587\u4ef6\u7684\u7f16\u7801"},{"location":"1-Fundm/1.3/","text":"","title":"1.3"}]}