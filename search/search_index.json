{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Notes","title":"Preface"},{"location":"#notes","text":"","title":"Notes"},{"location":"color/","text":"Primary colors Default: Teal Click on a tile to change the primary color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; }) }) Accent colors Default: Blue Click on a tile to change the accent color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; }) })","title":"Color"},{"location":"color/#primary-colors","text":"Default: Teal Click on a tile to change the primary color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; }) })","title":"Primary colors"},{"location":"color/#accent-colors","text":"Default: Blue Click on a tile to change the accent color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; }) })","title":"Accent colors"},{"location":"1-Fundm/1.1/","text":"1. Python \u652f\u6301\u7684\u6570\u503c\u7c7b\u578b \u2460 int 1 2 3 var = 1 varb = 0b10001000 varx = 0xaf \u2461 long 1 varx = 0xafb2 L \u5728 Python 3.0 \u4ee5\u524d\uff0c\u957f\u6574\u578b\u9700\u8981\u663e\u5f0f\u58f0\u660e\uff1b 3.0 \u4e4b\u540e\uff0c\u5173\u4e8e\u6574\u578b\u548c\u957f\u6574\u578b\u4f1a\u81ea\u52a8\u8bc6\u522b\u3002 \u2462 float 1 2 3 var = 2.0 var_xd = 2. var_s = 3e12 \u2463 complex 1 2 var = 1 + 2j varl = 3e10j 2. \u57fa\u672c\u6570\u503c\u8fd0\u7b97\u7b26 1 2 3 4 5 6 \"\"\" +, -, *, / \"\"\" a = 3 // 2 # quotient a = 3 % 2 # remainder a = a ** a # square 3. \u5f3a\u5236\u8f6c\u6362 int(x, base) \u8f6c\u6362\u4e3a\u6574\u578b long(x, base) \u8f6c\u6362\u4e3a\u957f\u6574\u578b float(x) \u8f6c\u6362\u4e3a\u6d6e\u70b9","title":"1.Number"},{"location":"1-Fundm/1.1/#1-python","text":"","title":"1. Python \u652f\u6301\u7684\u6570\u503c\u7c7b\u578b"},{"location":"1-Fundm/1.1/#1-int","text":"1 2 3 var = 1 varb = 0b10001000 varx = 0xaf","title":"\u2460 int"},{"location":"1-Fundm/1.1/#2-long","text":"1 varx = 0xafb2 L \u5728 Python 3.0 \u4ee5\u524d\uff0c\u957f\u6574\u578b\u9700\u8981\u663e\u5f0f\u58f0\u660e\uff1b 3.0 \u4e4b\u540e\uff0c\u5173\u4e8e\u6574\u578b\u548c\u957f\u6574\u578b\u4f1a\u81ea\u52a8\u8bc6\u522b\u3002","title":"\u2461 long"},{"location":"1-Fundm/1.1/#3-float","text":"1 2 3 var = 2.0 var_xd = 2. var_s = 3e12","title":"\u2462 float"},{"location":"1-Fundm/1.1/#4-complex","text":"1 2 var = 1 + 2j varl = 3e10j","title":"\u2463 complex"},{"location":"1-Fundm/1.1/#2","text":"1 2 3 4 5 6 \"\"\" +, -, *, / \"\"\" a = 3 // 2 # quotient a = 3 % 2 # remainder a = a ** a # square","title":"2. \u57fa\u672c\u6570\u503c\u8fd0\u7b97\u7b26"},{"location":"1-Fundm/1.1/#3","text":"int(x, base) \u8f6c\u6362\u4e3a\u6574\u578b long(x, base) \u8f6c\u6362\u4e3a\u957f\u6574\u578b float(x) \u8f6c\u6362\u4e3a\u6d6e\u70b9","title":"3. \u5f3a\u5236\u8f6c\u6362"},{"location":"1-Fundm/1.2/","text":"1. \u5b57\u7b26\u4e32\u8868\u793a \u5b57\u7b26\u4e32\u53ef\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u521b\u5efa\uff1a 1 2 s1 = 'abc' s2 = \"abc\" \u4e09\u4e2a\u5f15\u53f7\u53ef\u7528\u4e8e\u652f\u6301\u591a\u884c\u5b57\u7b26\u4e32\uff0c\u5b9e\u73b0\u6240\u89c1\u5373\u6240\u5f97 1 2 3 s3 = \"\"\" abc \"\"\" \u5c06\u5bf9\u8c61\u5f3a\u5236\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff1a \u2460 str() : \u9002\u5408\u4eba\u8bfb\u53d6 \u2461 repr() : \u9002\u5408\u89e3\u91ca\u5668\u8bfb\u53d6 2. \u5b57\u7b26\u4e32\u8fd0\u7b97\u7b26 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 a = \"hello\" b = \"world\" # Concatenation print ( a + \" \" + b ) # Concat the same string for times print ( a * 3 ) # Get specified character print ( a [ 1 ]) # Cut a part print ( a [ 1 : 4 ]) print ( a [: 2 ]) # the first two charaters print ( a [ 2 :]) # in addition to first two characters print ( a [: 2 ] + a [ 2 :]) # 'hello' print ( a [ 1 : 1000 ]) # invalid index is changed to the length: 'ello' print ( a [ - 1 ]) # negative: count from right to left # Determine if the character is in the string print ( 'h' in a ) print ( '0' not in a ) # Format print ( 'a has %d charaters' % ( 5 )) 3. \u5b57\u7b26\u7f16\u7801 ASCII : \u65e9\u671f\u8ba1\u7b97\u673a\u88ab\u53d1\u660e\u65f6\u7684\u5b57\u7b26\u7f16\u7801\uff0c\u5305\u542b\u82f1\u6587\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u7b26\u53f7\u7b49 127 \u4e2a\u5b57\u7b26\uff0c\u6bcf\u4e2a\u5360 1 \u5b57\u8282 Unicode : \u7edf\u4e00\u4e86\u5404\u79cd\u8bed\u8a00 ( GBK ...) \u548c\u7b26\u53f7\u7684\u7f16\u7801\uff0c\u89e3\u51b3\u4e86\u4e71\u7801\u95ee\u9898\u3002\u4e00\u822c\u6bcf\u4e2a\u5b57\u7b26\u5360 2 \u4e2a\u5b57\u8282\uff0c\u90e8\u5206\u751f\u50fb\u5b57\u7b26\u5360 4 \u4e2a\u5b57\u8282\u4ee5\u4e0a\u3002 UTF-8 : \u5982\u679c\u6587\u672c\u4e2d\u82f1\u6587\u5b57\u7b26\u5360\u591a\u6570\uff0c Unicode \u6bd4\u8f83\u6d6a\u8d39\u5b58\u50a8\u7a7a\u95f4\uff0c\u56e0\u6b64\u5b9e\u73b0\u4e86\u53ef\u53d8\u957f\u7684 UTF-8 \u7f16\u7801\u3002\u5b83\u6839\u636e Unicode \u7684\u957f\u5ea6\u8fdb\u884c\u7f16\u7801\uff1a\u82f1\u6587\u5b57\u7b26\u88ab\u7f16\u7801\u4e3a 1 \u4e2a\u5b57\u8282\uff0c\u6c49\u5b57\u901a\u5e38\u662f 3 \u4e2a\u5b57\u8282\u3002\u4e00\u4e2a Unicode \u7801\u53ef\u80fd\u88ab\u8f6c\u6362\u6210 1$\\sim$6 \u4e2a Byte \u7684 UTF-8 \u7801\uff0c\u53d6\u51b3\u4e8e Unicode \u7801\u7684\u957f\u5ea6\u3002\u7531\u4e8e UTF-8 \u7684\u7f16\u7801\u89c4\u5219\uff0c\u5b83\u4e5f\u662f ASCII \u7801\u7684\u4e00\u4e2a\u8d85\u96c6\u3002\u901a\u5e38\uff0c\u5b58\u50a8\u6216\u901a\u4fe1\u9009\u62e9\u5bf9\u76f8\u5e94\u5b57\u7b26\u96c6\u8282\u7701\u7a7a\u95f4\u7684\u7f16\u7801\uff1a \u5185\u5b58\u4e2d\u4f7f\u7528 Unicode \u7f16\u7801\uff0c\u78c1\u76d8\u4e2d\u4f7f\u7528 UTF-8 \u7f16\u7801 \u7f51\u7edc\u901a\u4fe1\u4f7f\u7528 UTF-8 \u7f16\u7801 4. Python \u5b57\u7b26\u4e32\u7f16\u7801 Python 3 \u7684\u5b57\u7b26\u4e32\u662f Unicode \u7f16\u7801\u3002 1 2 s1 = \"abc\" s_equiv = u \"abc\" \u53ef\u4ee5\u901a\u8fc7 ord() \u548c chr() \u83b7\u53d6\u5b57\u7b26\u7684 Unicode \u503c\u548c Unicode \u5b57\u7b26 1 2 print ( ord ( \"\u597d\" )) print ( chr ( ord ( \"\u597d\" ))) (1). bytes \u2003 bytes \u662f Python 3 \u65b0\u589e\u7684\u201c\u5b57\u8282\u4e32\u201d\u7c7b\u578b\uff0c\u9002\u7528\u4e8e str \u7684\u64cd\u4f5c\u4e5f\u9002\u7528\u4e8e\u5b83\uff0c\u548c str \u4e0d\u540c\u7684\u662f\uff0c\u4e0d\u7ba1\u5b83\u5b58\u50a8\u7684\u5b57\u7b26\u4e32\u4ee5\u4f55\u79cd\u65b9\u5f0f\u7f16\u7801\uff0c bytes[] \u64cd\u4f5c\u7684\u5355\u4f4d\u90fd\u662f 1 \u4e2a\u5b57\u8282\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 # create by Constructor s1 = bytes () s2 = bytes ( 'hello' , encoding = 'ascii' ) # create by declaration # note: if the character can't be denoted by ASCII, we denote # it by format '/x##' s3 = b 'a' # default chars: ascii s4 = b ' \\xe4 ' s5 = b ' \\u54c8 ' # '\\u##': unicode # create by tranforming directly s6 = 'hello' . encode ( 'utf-8' ) \u2003\u5728\u5199\u5165\u6587\u4ef6\u6216\u8fdb\u884c\u7f51\u7edc\u4f20\u8f93\u65f6\uff0c\u9700\u8981\u628a\u5b57\u7b26\u4e32\u901a\u8fc7 encode() \u5b58\u50a8\u5728 bytes \u4e2d\uff0c\u5f53\u8bfb\u53d6\u7684\u65f6\u5019\u518d\u901a\u8fc7 decode() \u89e3\u7801\u3002 \u2003\u4e3a\u907f\u514d\u4e71\u7801\u95ee\u9898\uff0c encode() \u7684\u53c2\u6570\u5e94\u5c3d\u53ef\u80fd\u4f7f\u7528 \"utf-8\" \u3002 1 2 3 s = b ' \\xe5\\x93\\x88 ' print ( s1 . decode ( 'unicode-escape' )) # s is equivalent to '\\u54c8' (\"\u54c8\"), but the result is gibberish (2). py \u6587\u4ef6\u7684\u7f16\u7801 py \u6587\u4ef6\u7684\u5f00\u5934\u901a\u5e38\u8fd9\u6837\u5f00\u5934\uff1a 1 2 #!/usr/bin/env python3 # -*- coding: utf-8 -*- \u2003\u7b2c\u4e00\u884c\u7684\u76ee\u7684\u662f\u544a\u8bc9 Linux \u7cfb\u7edf\uff0c\u8fd9\u662f\u4e00\u4e2a Python \u53ef\u6267\u884c\u7a0b\u5e8f\uff0c Windows \u4f1a\u9ed8\u8ba4\u5ffd\u7565\u8fd9\u4e00\u6761\u3002 \u2003\u7b2c\u4e8c\u884c\u7684\u76ee\u7684\u662f\u544a\u8bc9 Python \u89e3\u91ca\u5668\uff0c\u6309\u7167 utf-8 \u7f16\u7801\u8bfb\u53d6\u6e90\u4ee3\u7801\u3002\u53ea\u6709\u6587\u672c\u7f16\u8f91\u5668\u8bbe\u4e3a utf-8 \u5e76\u4e14\u52a0\u4e0a\u8fd9\u4e2a\u5f00\u5934\uff0c\u547d\u4ee4\u884c\u6d4b\u8bd5\u7684\u65f6\u5019\u624d\u4e00\u5b9a\u4f1a\u6b63\u5e38\u663e\u793a\u4e2d\u6587\u3002","title":"2.String"},{"location":"1-Fundm/1.2/#1","text":"\u5b57\u7b26\u4e32\u53ef\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u521b\u5efa\uff1a 1 2 s1 = 'abc' s2 = \"abc\" \u4e09\u4e2a\u5f15\u53f7\u53ef\u7528\u4e8e\u652f\u6301\u591a\u884c\u5b57\u7b26\u4e32\uff0c\u5b9e\u73b0\u6240\u89c1\u5373\u6240\u5f97 1 2 3 s3 = \"\"\" abc \"\"\" \u5c06\u5bf9\u8c61\u5f3a\u5236\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff1a \u2460 str() : \u9002\u5408\u4eba\u8bfb\u53d6 \u2461 repr() : \u9002\u5408\u89e3\u91ca\u5668\u8bfb\u53d6","title":"1. \u5b57\u7b26\u4e32\u8868\u793a"},{"location":"1-Fundm/1.2/#2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 a = \"hello\" b = \"world\" # Concatenation print ( a + \" \" + b ) # Concat the same string for times print ( a * 3 ) # Get specified character print ( a [ 1 ]) # Cut a part print ( a [ 1 : 4 ]) print ( a [: 2 ]) # the first two charaters print ( a [ 2 :]) # in addition to first two characters print ( a [: 2 ] + a [ 2 :]) # 'hello' print ( a [ 1 : 1000 ]) # invalid index is changed to the length: 'ello' print ( a [ - 1 ]) # negative: count from right to left # Determine if the character is in the string print ( 'h' in a ) print ( '0' not in a ) # Format print ( 'a has %d charaters' % ( 5 ))","title":"2. \u5b57\u7b26\u4e32\u8fd0\u7b97\u7b26"},{"location":"1-Fundm/1.2/#3","text":"ASCII : \u65e9\u671f\u8ba1\u7b97\u673a\u88ab\u53d1\u660e\u65f6\u7684\u5b57\u7b26\u7f16\u7801\uff0c\u5305\u542b\u82f1\u6587\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u7b26\u53f7\u7b49 127 \u4e2a\u5b57\u7b26\uff0c\u6bcf\u4e2a\u5360 1 \u5b57\u8282 Unicode : \u7edf\u4e00\u4e86\u5404\u79cd\u8bed\u8a00 ( GBK ...) \u548c\u7b26\u53f7\u7684\u7f16\u7801\uff0c\u89e3\u51b3\u4e86\u4e71\u7801\u95ee\u9898\u3002\u4e00\u822c\u6bcf\u4e2a\u5b57\u7b26\u5360 2 \u4e2a\u5b57\u8282\uff0c\u90e8\u5206\u751f\u50fb\u5b57\u7b26\u5360 4 \u4e2a\u5b57\u8282\u4ee5\u4e0a\u3002 UTF-8 : \u5982\u679c\u6587\u672c\u4e2d\u82f1\u6587\u5b57\u7b26\u5360\u591a\u6570\uff0c Unicode \u6bd4\u8f83\u6d6a\u8d39\u5b58\u50a8\u7a7a\u95f4\uff0c\u56e0\u6b64\u5b9e\u73b0\u4e86\u53ef\u53d8\u957f\u7684 UTF-8 \u7f16\u7801\u3002\u5b83\u6839\u636e Unicode \u7684\u957f\u5ea6\u8fdb\u884c\u7f16\u7801\uff1a\u82f1\u6587\u5b57\u7b26\u88ab\u7f16\u7801\u4e3a 1 \u4e2a\u5b57\u8282\uff0c\u6c49\u5b57\u901a\u5e38\u662f 3 \u4e2a\u5b57\u8282\u3002\u4e00\u4e2a Unicode \u7801\u53ef\u80fd\u88ab\u8f6c\u6362\u6210 1$\\sim$6 \u4e2a Byte \u7684 UTF-8 \u7801\uff0c\u53d6\u51b3\u4e8e Unicode \u7801\u7684\u957f\u5ea6\u3002\u7531\u4e8e UTF-8 \u7684\u7f16\u7801\u89c4\u5219\uff0c\u5b83\u4e5f\u662f ASCII \u7801\u7684\u4e00\u4e2a\u8d85\u96c6\u3002\u901a\u5e38\uff0c\u5b58\u50a8\u6216\u901a\u4fe1\u9009\u62e9\u5bf9\u76f8\u5e94\u5b57\u7b26\u96c6\u8282\u7701\u7a7a\u95f4\u7684\u7f16\u7801\uff1a \u5185\u5b58\u4e2d\u4f7f\u7528 Unicode \u7f16\u7801\uff0c\u78c1\u76d8\u4e2d\u4f7f\u7528 UTF-8 \u7f16\u7801 \u7f51\u7edc\u901a\u4fe1\u4f7f\u7528 UTF-8 \u7f16\u7801","title":"3. \u5b57\u7b26\u7f16\u7801"},{"location":"1-Fundm/1.2/#4-python","text":"Python 3 \u7684\u5b57\u7b26\u4e32\u662f Unicode \u7f16\u7801\u3002 1 2 s1 = \"abc\" s_equiv = u \"abc\" \u53ef\u4ee5\u901a\u8fc7 ord() \u548c chr() \u83b7\u53d6\u5b57\u7b26\u7684 Unicode \u503c\u548c Unicode \u5b57\u7b26 1 2 print ( ord ( \"\u597d\" )) print ( chr ( ord ( \"\u597d\" )))","title":"4. Python \u5b57\u7b26\u4e32\u7f16\u7801"},{"location":"1-Fundm/1.2/#1-bytes","text":"bytes \u662f Python 3 \u65b0\u589e\u7684\u201c\u5b57\u8282\u4e32\u201d\u7c7b\u578b\uff0c\u9002\u7528\u4e8e str \u7684\u64cd\u4f5c\u4e5f\u9002\u7528\u4e8e\u5b83\uff0c\u548c str \u4e0d\u540c\u7684\u662f\uff0c\u4e0d\u7ba1\u5b83\u5b58\u50a8\u7684\u5b57\u7b26\u4e32\u4ee5\u4f55\u79cd\u65b9\u5f0f\u7f16\u7801\uff0c bytes[] \u64cd\u4f5c\u7684\u5355\u4f4d\u90fd\u662f 1 \u4e2a\u5b57\u8282\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 # create by Constructor s1 = bytes () s2 = bytes ( 'hello' , encoding = 'ascii' ) # create by declaration # note: if the character can't be denoted by ASCII, we denote # it by format '/x##' s3 = b 'a' # default chars: ascii s4 = b ' \\xe4 ' s5 = b ' \\u54c8 ' # '\\u##': unicode # create by tranforming directly s6 = 'hello' . encode ( 'utf-8' ) \u2003\u5728\u5199\u5165\u6587\u4ef6\u6216\u8fdb\u884c\u7f51\u7edc\u4f20\u8f93\u65f6\uff0c\u9700\u8981\u628a\u5b57\u7b26\u4e32\u901a\u8fc7 encode() \u5b58\u50a8\u5728 bytes \u4e2d\uff0c\u5f53\u8bfb\u53d6\u7684\u65f6\u5019\u518d\u901a\u8fc7 decode() \u89e3\u7801\u3002 \u2003\u4e3a\u907f\u514d\u4e71\u7801\u95ee\u9898\uff0c encode() \u7684\u53c2\u6570\u5e94\u5c3d\u53ef\u80fd\u4f7f\u7528 \"utf-8\" \u3002 1 2 3 s = b ' \\xe5\\x93\\x88 ' print ( s1 . decode ( 'unicode-escape' )) # s is equivalent to '\\u54c8' (\"\u54c8\"), but the result is gibberish","title":"(1). bytes"},{"location":"1-Fundm/1.2/#2-py","text":"py \u6587\u4ef6\u7684\u5f00\u5934\u901a\u5e38\u8fd9\u6837\u5f00\u5934\uff1a 1 2 #!/usr/bin/env python3 # -*- coding: utf-8 -*- \u2003\u7b2c\u4e00\u884c\u7684\u76ee\u7684\u662f\u544a\u8bc9 Linux \u7cfb\u7edf\uff0c\u8fd9\u662f\u4e00\u4e2a Python \u53ef\u6267\u884c\u7a0b\u5e8f\uff0c Windows \u4f1a\u9ed8\u8ba4\u5ffd\u7565\u8fd9\u4e00\u6761\u3002 \u2003\u7b2c\u4e8c\u884c\u7684\u76ee\u7684\u662f\u544a\u8bc9 Python \u89e3\u91ca\u5668\uff0c\u6309\u7167 utf-8 \u7f16\u7801\u8bfb\u53d6\u6e90\u4ee3\u7801\u3002\u53ea\u6709\u6587\u672c\u7f16\u8f91\u5668\u8bbe\u4e3a utf-8 \u5e76\u4e14\u52a0\u4e0a\u8fd9\u4e2a\u5f00\u5934\uff0c\u547d\u4ee4\u884c\u6d4b\u8bd5\u7684\u65f6\u5019\u624d\u4e00\u5b9a\u4f1a\u6b63\u5e38\u663e\u793a\u4e2d\u6587\u3002","title":"(2). py \u6587\u4ef6\u7684\u7f16\u7801"},{"location":"1-Fundm/1.3/","text":"1. \u521d\u59cb\u5316\u4e0e\u8bbf\u95ee \u2003 List \u662f Python \u4e2d\u6700\u57fa\u672c\u7684\u5bb9\u5668\u3002\u7c7b\u4f3c\u4e8e\u4e00\u4e9b\u5176\u4ed6\u8bed\u8a00\uff0c\u5b83\u53ef\u4ee5\u52a8\u6001\u8fb9\u957f\uff0c\u5176\u4e2d\u53ef\u4ee5\u5b58\u50a8\u5404\u79cd\u5bf9\u8c61\u3002 1 2 empty_list = [] list1 = [ 1 , 'beginner' ] \u2003\u5176\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0b\u6807\u76f4\u63a5\u8bbf\u95ee\uff0c\u7c7b\u4f3c\u4e8e\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 : \u622a\u53d6\u3001\u901a\u8fc7\u8d1f\u7684\u7d22\u5f15\u4ece\u540e\u5411\u524d\u8bbf\u95ee\u3002 \u2003 Tuple \u662f\u4e0d\u53ef\u53d8\u7684 List \uff1a\u4e00\u65e6\u521b\u5efa\uff0c\u5176\u5b58\u50a8\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e0d\u53ef\u6539\u53d8\u3002 1 2 tuple1 = ( 'dayup' ) tuple2 = ( 2 ,) \u2003\u5f53\u5143\u7ec4\u4e2d\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u7684\u65f6\u5019\uff0c\u4e3a\u907f\u514d\u6b67\u4e49\uff0c\u5e94\u8be5\u5728\u7b2c\u4e00\u4e2a\u5143\u7d20\u540e\u52a0\u9017\u53f7\u3002 2. List/Tuple \u51fd\u6570 \u51fd\u6570\u540d \u4f5c\u7528 len( seq ) \u8fd4\u56de\u5143\u7d20\u4e2a\u6570 max( seq ) \u8fd4\u56de\u5143\u7d20\u6700\u5927\u503c (\u5143\u7d20\u7c7b\u578b\u76f8\u540c) min( seq ) \u8fd4\u56de\u5143\u7d20\u6700\u5c0f\u503c (\u5143\u7d20\u7c7b\u578b\u76f8\u540c) list( seq ) \u8f6c\u6362\u4e3a list tuple( seq ) \u8f6c\u6362\u4e3a tuple type( var ) \u8fd4\u56de\u8f93\u5165\u7684\u53d8\u91cf\u6240\u5c5e\u7684\u7c7b\u578b sorted( iter_obj , cmp =None, key =None, reverse =false) \u8fd4\u56de\u4e00\u4e2a\u6392\u5e8f\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61 3. List \u65b9\u6cd5 \u65b9\u6cd5\u540d \u4f5c\u7528 append( obj ) \u5728\u5217\u8868\u672b\u5c3e\u6dfb\u52a0\u5bf9\u8c61 insert( index , obj ) \u5c06\u5bf9\u8c61\u63d2\u5165\u5230\u6307\u5b9a\u4f4d\u7f6e\uff0c\u5982\u679cindex\u6307\u5b9a\u7684\u4f4d\u7f6e\u672a\u5f00\u8f9f\u5219\u65e0\u6548 pop([ index = -1]) \u5220\u9664\u5217\u8868\u4e2d\u5143\u7d20\u3002\u5f53\u4e0d\u6307\u660e\u7d22\u5f15\u65f6\u9ed8\u8ba4\u4e3a-1 remove( obj ) \u79fb\u9664\u7b2c\u4e00\u4e2a obj \u7684\u5339\u914d\u9879 index( obj , [ start , [ end ]]) \u8fd4\u56de\u67d0\u4e2a\u5143\u7d20\u5728\u5217\u8868\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u7d22\u5f15\uff0c\u4e5f\u53ef\u4ee5\u6307\u660e\u67e5\u627e\u7684\u8303\u56f4 count( obj ) \u8fd4\u56de\u67d0\u4e2a\u5143\u7d20\u5728\u5217\u8868\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 reverse() \u53cd\u8f6c\u5217\u8868 extend( seq ) \u5728\u5217\u8868\u672b\u5c3e\u8ffd\u52a0\u53e6\u4e00\u4e2a\u5e8f\u5217 sort( cmp =None, key =None, reverse =false) \u628a\u5217\u8868\u6392\u5e8f Tuple \u5219\u53ea\u652f\u6301\u5176\u4e2d\u7684\u4e24\u4e2a Observer : index() \u3001 count() \u3002 4. List \u64cd\u4f5c\u7b26 \u64cd\u4f5c\u7b26 \u4f5c\u7528 [1, 2] + [3, 4] \u62fc\u63a5 ['hello'] * 6 \u91cd\u590d\u62fc\u63a5 1 in [1, 2, 3] \u5b58\u5728\u4e8e for x in [1, 2] \u8fed\u4ee3 \u4ee5\u4e0a\u6240\u6709\u8fd0\u7b97\u7b26\u4e5f\u9002\u7528\u4e8e Tuple \u3002","title":"3.List and Tuple"},{"location":"1-Fundm/1.3/#1","text":"List \u662f Python \u4e2d\u6700\u57fa\u672c\u7684\u5bb9\u5668\u3002\u7c7b\u4f3c\u4e8e\u4e00\u4e9b\u5176\u4ed6\u8bed\u8a00\uff0c\u5b83\u53ef\u4ee5\u52a8\u6001\u8fb9\u957f\uff0c\u5176\u4e2d\u53ef\u4ee5\u5b58\u50a8\u5404\u79cd\u5bf9\u8c61\u3002 1 2 empty_list = [] list1 = [ 1 , 'beginner' ] \u2003\u5176\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0b\u6807\u76f4\u63a5\u8bbf\u95ee\uff0c\u7c7b\u4f3c\u4e8e\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 : \u622a\u53d6\u3001\u901a\u8fc7\u8d1f\u7684\u7d22\u5f15\u4ece\u540e\u5411\u524d\u8bbf\u95ee\u3002 \u2003 Tuple \u662f\u4e0d\u53ef\u53d8\u7684 List \uff1a\u4e00\u65e6\u521b\u5efa\uff0c\u5176\u5b58\u50a8\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e0d\u53ef\u6539\u53d8\u3002 1 2 tuple1 = ( 'dayup' ) tuple2 = ( 2 ,) \u2003\u5f53\u5143\u7ec4\u4e2d\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u7684\u65f6\u5019\uff0c\u4e3a\u907f\u514d\u6b67\u4e49\uff0c\u5e94\u8be5\u5728\u7b2c\u4e00\u4e2a\u5143\u7d20\u540e\u52a0\u9017\u53f7\u3002","title":"1. \u521d\u59cb\u5316\u4e0e\u8bbf\u95ee"},{"location":"1-Fundm/1.3/#2-listtuple","text":"\u51fd\u6570\u540d \u4f5c\u7528 len( seq ) \u8fd4\u56de\u5143\u7d20\u4e2a\u6570 max( seq ) \u8fd4\u56de\u5143\u7d20\u6700\u5927\u503c (\u5143\u7d20\u7c7b\u578b\u76f8\u540c) min( seq ) \u8fd4\u56de\u5143\u7d20\u6700\u5c0f\u503c (\u5143\u7d20\u7c7b\u578b\u76f8\u540c) list( seq ) \u8f6c\u6362\u4e3a list tuple( seq ) \u8f6c\u6362\u4e3a tuple type( var ) \u8fd4\u56de\u8f93\u5165\u7684\u53d8\u91cf\u6240\u5c5e\u7684\u7c7b\u578b sorted( iter_obj , cmp =None, key =None, reverse =false) \u8fd4\u56de\u4e00\u4e2a\u6392\u5e8f\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61","title":"2. List/Tuple \u51fd\u6570"},{"location":"1-Fundm/1.3/#3-list","text":"\u65b9\u6cd5\u540d \u4f5c\u7528 append( obj ) \u5728\u5217\u8868\u672b\u5c3e\u6dfb\u52a0\u5bf9\u8c61 insert( index , obj ) \u5c06\u5bf9\u8c61\u63d2\u5165\u5230\u6307\u5b9a\u4f4d\u7f6e\uff0c\u5982\u679cindex\u6307\u5b9a\u7684\u4f4d\u7f6e\u672a\u5f00\u8f9f\u5219\u65e0\u6548 pop([ index = -1]) \u5220\u9664\u5217\u8868\u4e2d\u5143\u7d20\u3002\u5f53\u4e0d\u6307\u660e\u7d22\u5f15\u65f6\u9ed8\u8ba4\u4e3a-1 remove( obj ) \u79fb\u9664\u7b2c\u4e00\u4e2a obj \u7684\u5339\u914d\u9879 index( obj , [ start , [ end ]]) \u8fd4\u56de\u67d0\u4e2a\u5143\u7d20\u5728\u5217\u8868\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u7d22\u5f15\uff0c\u4e5f\u53ef\u4ee5\u6307\u660e\u67e5\u627e\u7684\u8303\u56f4 count( obj ) \u8fd4\u56de\u67d0\u4e2a\u5143\u7d20\u5728\u5217\u8868\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 reverse() \u53cd\u8f6c\u5217\u8868 extend( seq ) \u5728\u5217\u8868\u672b\u5c3e\u8ffd\u52a0\u53e6\u4e00\u4e2a\u5e8f\u5217 sort( cmp =None, key =None, reverse =false) \u628a\u5217\u8868\u6392\u5e8f Tuple \u5219\u53ea\u652f\u6301\u5176\u4e2d\u7684\u4e24\u4e2a Observer : index() \u3001 count() \u3002","title":"3. List \u65b9\u6cd5"},{"location":"1-Fundm/1.3/#4-list","text":"\u64cd\u4f5c\u7b26 \u4f5c\u7528 [1, 2] + [3, 4] \u62fc\u63a5 ['hello'] * 6 \u91cd\u590d\u62fc\u63a5 1 in [1, 2, 3] \u5b58\u5728\u4e8e for x in [1, 2] \u8fed\u4ee3 \u4ee5\u4e0a\u6240\u6709\u8fd0\u7b97\u7b26\u4e5f\u9002\u7528\u4e8e Tuple \u3002","title":"4. List \u64cd\u4f5c\u7b26"},{"location":"1-Fundm/1.4/","text":"1. \u521d\u59cb\u5316\u4e0e\u8bbf\u95ee \u2003\u5b57\u5178\u4e5f\u662f\u4e00\u79cd\u53ef\u53d8\u5bb9\u5668\uff0c\u7b49\u540c\u4e8e\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684 map \u3002 key \u4e0e key \u4ee5\u53ca value \u4e0e value \u4e4b\u95f4\u7684\u7c7b\u578b\u53ef\u4ee5\u4e0d\u540c\u3002 1 2 3 dict1 = { 'a' : 1 , 2 : 'b' } print ( dict1 [ 'a' ]) print ( dict1 [ 2 ]) \u2003\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee\u76f4\u63a5\u4fee\u6539 value \u6216\u6dfb\u52a0 key-value \u3002 1 2 dict1 [ 2 ] = 3 dict1 [ 'ff' ] = 'surr' \u2003\u5982\u679c\u8bbf\u95ee\u7684 key \u4e0d\u5b58\u5728\uff0c\u4f1a\u629b\u51fa\u4e00\u4e2a KeyError \u3002\u56e0\u6b64\u8bbf\u95ee\u524d\uff0c\u53ef\u4ee5\u901a\u8fc7\u64cd\u4f5c\u7b26 in \u6216 get() \u65b9\u6cd5\u4e8b\u5148\u5224\u65ad\u3002 \u2003\u5728 Python \u4e2d\uff0c dict \u7684 key \u5fc5\u987b\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff0c\u56e0\u6b64\u53ef\u4ee5\u662f\u6570\u3001\u5b57\u7b26\u4e32\u3001\u5143\u7ec4\uff0c\u800c\u4e0d\u80fd\u662f\u5217\u8868\u3002 dict \u7684\u6784\u9020\u51fd\u6570\uff1a dict() dict(** kwargs ) dict( mapping ) dict( iterable ) 1 2 3 4 5 6 7 8 9 10 11 # empty dict dict1 = dict () # init by assignment expression dict2 = dict ( a = 'a' , b = '1' ) # eq: {'a': 'a', 'b': 1} # init by mapping dict3 = dict ( zip ([ 1 , 2 , 3 ], [ 'a' , 'b' , 'c' ])) # init by iterable object dict4 = dict ([( 1 , 'a' ), [ 2 , 'b' ]]) 2. Dict \u51fd\u6570 \u51fd\u6570\u540d \u4f5c\u7528 len( seq ) \u8fd4\u56de\u952e\u503c\u4e2a\u6570 list( seq )\u3001tuple( seq ) \u628a\u952e\u7684\u5e8f\u5217\u8f6c\u6362\u4e3a\u5217\u8868\u6216\u5143\u7ec4 type( var ) \u8fd4\u56de\u8f93\u5165\u7684\u53d8\u91cf\u6240\u5c5e\u7684\u7c7b\u578b 3. Dict \u65b9\u6cd5 \u65b9\u6cd5\u540d \u4f5c\u7528 get( key , default =None) \u8fd4\u56de\u5bf9\u5e94 key \u5bf9\u5e94\u7684 value\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd4\u56de default has_key( key ) \u5224\u65ad\u662f\u5426\u6709 key setdefault( key , default =None) \u7c7b\u4f3c\u4e8e get()\uff0c\u989d\u5916\u5730\uff0c\u5982\u679c key \u4e0d\u5b58\u5728\u4e8e\u5b57\u5178\u4e2d\uff0c\u5411\u5b57\u5178\u4e2d\u6dfb\u52a0 (key->default) pop( key [, default ]) \u5220\u9664\u5b57\u5178\u4e2d key \u5bf9\u5e94\u7684 value \u5e76\u8fd4\u56de\u88ab\u5220\u6389\u7684\u503c\u3002\u5982\u679c key \u4e0d\u5b58\u5728\u4e14\u8bbe\u7f6e\u4e86 default \uff0c\u8fd4\u56de default \uff1b\u5426\u5219\u629b\u51fa KeyError keys(),values(),items() \u8fd4\u56de\u53ef\u904d\u5386\u7684\u952e\u3001\u503c\u3001\u952e\u503c\u7684\u5217\u8868 fromkeys( seq [, val ]) \u521b\u5efa\u4e00\u4e2a\u65b0\u5b57\u5178\uff0c\u4ee5 seq \u4e3a\u952e\u503c\u5e8f\u5217\uff0c val \u4e3a\u8be5\u5b57\u5178\u6240\u6709\u503c\u7684\u521d\u59cb\u503c update( dict ) \u628a dict \u4e2d\u7684\u952e\u503c\u5bf9\u90fd\u66f4\u65b0\u5230\u5b57\u5178\u91cc clear() \u6e05\u7a7a\u6240\u6709\u5143\u7d20 copy() Shallow Copy","title":"4.Dict"},{"location":"1-Fundm/1.4/#1","text":"\u5b57\u5178\u4e5f\u662f\u4e00\u79cd\u53ef\u53d8\u5bb9\u5668\uff0c\u7b49\u540c\u4e8e\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684 map \u3002 key \u4e0e key \u4ee5\u53ca value \u4e0e value \u4e4b\u95f4\u7684\u7c7b\u578b\u53ef\u4ee5\u4e0d\u540c\u3002 1 2 3 dict1 = { 'a' : 1 , 2 : 'b' } print ( dict1 [ 'a' ]) print ( dict1 [ 2 ]) \u2003\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee\u76f4\u63a5\u4fee\u6539 value \u6216\u6dfb\u52a0 key-value \u3002 1 2 dict1 [ 2 ] = 3 dict1 [ 'ff' ] = 'surr' \u2003\u5982\u679c\u8bbf\u95ee\u7684 key \u4e0d\u5b58\u5728\uff0c\u4f1a\u629b\u51fa\u4e00\u4e2a KeyError \u3002\u56e0\u6b64\u8bbf\u95ee\u524d\uff0c\u53ef\u4ee5\u901a\u8fc7\u64cd\u4f5c\u7b26 in \u6216 get() \u65b9\u6cd5\u4e8b\u5148\u5224\u65ad\u3002 \u2003\u5728 Python \u4e2d\uff0c dict \u7684 key \u5fc5\u987b\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff0c\u56e0\u6b64\u53ef\u4ee5\u662f\u6570\u3001\u5b57\u7b26\u4e32\u3001\u5143\u7ec4\uff0c\u800c\u4e0d\u80fd\u662f\u5217\u8868\u3002 dict \u7684\u6784\u9020\u51fd\u6570\uff1a dict() dict(** kwargs ) dict( mapping ) dict( iterable ) 1 2 3 4 5 6 7 8 9 10 11 # empty dict dict1 = dict () # init by assignment expression dict2 = dict ( a = 'a' , b = '1' ) # eq: {'a': 'a', 'b': 1} # init by mapping dict3 = dict ( zip ([ 1 , 2 , 3 ], [ 'a' , 'b' , 'c' ])) # init by iterable object dict4 = dict ([( 1 , 'a' ), [ 2 , 'b' ]])","title":"1. \u521d\u59cb\u5316\u4e0e\u8bbf\u95ee"},{"location":"1-Fundm/1.4/#2-dict","text":"\u51fd\u6570\u540d \u4f5c\u7528 len( seq ) \u8fd4\u56de\u952e\u503c\u4e2a\u6570 list( seq )\u3001tuple( seq ) \u628a\u952e\u7684\u5e8f\u5217\u8f6c\u6362\u4e3a\u5217\u8868\u6216\u5143\u7ec4 type( var ) \u8fd4\u56de\u8f93\u5165\u7684\u53d8\u91cf\u6240\u5c5e\u7684\u7c7b\u578b","title":"2. Dict \u51fd\u6570"},{"location":"1-Fundm/1.4/#3-dict","text":"\u65b9\u6cd5\u540d \u4f5c\u7528 get( key , default =None) \u8fd4\u56de\u5bf9\u5e94 key \u5bf9\u5e94\u7684 value\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd4\u56de default has_key( key ) \u5224\u65ad\u662f\u5426\u6709 key setdefault( key , default =None) \u7c7b\u4f3c\u4e8e get()\uff0c\u989d\u5916\u5730\uff0c\u5982\u679c key \u4e0d\u5b58\u5728\u4e8e\u5b57\u5178\u4e2d\uff0c\u5411\u5b57\u5178\u4e2d\u6dfb\u52a0 (key->default) pop( key [, default ]) \u5220\u9664\u5b57\u5178\u4e2d key \u5bf9\u5e94\u7684 value \u5e76\u8fd4\u56de\u88ab\u5220\u6389\u7684\u503c\u3002\u5982\u679c key \u4e0d\u5b58\u5728\u4e14\u8bbe\u7f6e\u4e86 default \uff0c\u8fd4\u56de default \uff1b\u5426\u5219\u629b\u51fa KeyError keys(),values(),items() \u8fd4\u56de\u53ef\u904d\u5386\u7684\u952e\u3001\u503c\u3001\u952e\u503c\u7684\u5217\u8868 fromkeys( seq [, val ]) \u521b\u5efa\u4e00\u4e2a\u65b0\u5b57\u5178\uff0c\u4ee5 seq \u4e3a\u952e\u503c\u5e8f\u5217\uff0c val \u4e3a\u8be5\u5b57\u5178\u6240\u6709\u503c\u7684\u521d\u59cb\u503c update( dict ) \u628a dict \u4e2d\u7684\u952e\u503c\u5bf9\u90fd\u66f4\u65b0\u5230\u5b57\u5178\u91cc clear() \u6e05\u7a7a\u6240\u6709\u5143\u7d20 copy() Shallow Copy","title":"3. Dict \u65b9\u6cd5"},{"location":"1-Fundm/1.5/","text":"1. \u521d\u59cb\u5316 \u2003\u53ef\u4ee5\u901a\u8fc7 {<elements>} \u6216 set() \u521b\u5efa\u4e00\u4e2a\u96c6\u5408\u3002\u5982\u679c\u8981\u521b\u5efa\u4e00\u4e2a\u7a7a\u96c6\uff0c\u5219\u5fc5\u987b\u7528 set() \uff0c {} \u4ee3\u8868\u521b\u5efa\u4e00\u4e2a\u7a7a\u5b57\u5178\u3002 1 2 3 4 set1 = { 'ab' , 'cd' } set2 = set ( 'abcde' ) set3 = set ([ 1 , 2 , 3 ]) print ( 'a' in set2 ) set \u7684\u6784\u9020\u51fd\u6570\uff1a set() set( iterable ) 2. Set \u8fd0\u7b97\u7b26 \u8fd0\u7b97 \u4f5c\u7528 a | b $A\\cup B$ a & b $A\\cap B$ a - b $A\\setminus B$ a ^ b $A\\bigtriangleup B$ \u4ee5\u4e0a\u8fd0\u7b97\u4ea7\u751f\u4e00\u4e2a\u65b0\u96c6\u5408\u3002 3. Set \u65b9\u6cd5 \u65b9\u6cd5\u540d \u4f5c\u7528 add( e ) \u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 update( S ) \u6dfb\u52a0\u65b0\u7684\u5143\u7d20\u6216\u96c6\u5408\u5230\u6b64\u96c6\u5408\u4e2d discard( e ) \u5220\u9664\u4e00\u4e2a\u5143\u7d20 remove( e ) \u5220\u9664\u4e00\u4e2a\u5143\u7d20\u3002\u82e5 e \u4e0d\u5b58\u5728\u4f1a\u62a5\u9519\u3002 pop() \u968f\u673a\u79fb\u9664\u4e00\u4e2a\u5143\u7d20 issubset( S ),issuperset( S ) \u662f\u5426\u4e3a\u6307\u5b9a\u96c6\u5408\u7684\u5b50/\u8d85\u96c6 isdisjoint( S ) \u5224\u65ad\u4e24\u4e2a\u96c6\u5408\u662f\u5426\u4e0d\u76f8\u4ea4 union( set1 , ...) \u5408\u5e76\u4e24\u4e2a\u6216\u591a\u4e2a\u96c6\u5408 intersection( set1 , ...) \u8fd4\u56de\u4e24\u4e2a\u6216\u591a\u4e2a\u96c6\u5408\u7684\u4ea4(\u65b0\u96c6\u5408) intersection_update( set1 , ...) \u8fd4\u56de\u4e24\u4e2a\u6216\u591a\u4e2a\u96c6\u5408\u7684\u4ea4(\u5728\u539f\u96c6\u5408\u4e0a\u5220\u9664\u975e\u516c\u5171\u5143\u7d20) difference( S ) \u8fd4\u56de\u96c6\u5408\u4e0e S \u7684\u5dee\u96c6 difference_update( S ) \u5728\u539f\u96c6\u5408\u4e0a\u79fb\u9664 symmetric_difference( S ) \u8fd4\u56de\u96c6\u5408\u4e0e S \u7684\u5bf9\u79f0\u5dee\u96c6 symmetric_difference_update( S ) \u8fd4\u56de\u96c6\u5408\u4e0e S \u7684\u5bf9\u79f0\u5dee\u96c6\uff0c\u5728\u539f\u96c6\u5408\u4e0a\u64cd\u4f5c","title":"5.Set"},{"location":"1-Fundm/1.5/#1","text":"\u53ef\u4ee5\u901a\u8fc7 {<elements>} \u6216 set() \u521b\u5efa\u4e00\u4e2a\u96c6\u5408\u3002\u5982\u679c\u8981\u521b\u5efa\u4e00\u4e2a\u7a7a\u96c6\uff0c\u5219\u5fc5\u987b\u7528 set() \uff0c {} \u4ee3\u8868\u521b\u5efa\u4e00\u4e2a\u7a7a\u5b57\u5178\u3002 1 2 3 4 set1 = { 'ab' , 'cd' } set2 = set ( 'abcde' ) set3 = set ([ 1 , 2 , 3 ]) print ( 'a' in set2 ) set \u7684\u6784\u9020\u51fd\u6570\uff1a set() set( iterable )","title":"1. \u521d\u59cb\u5316"},{"location":"1-Fundm/1.5/#2-set","text":"\u8fd0\u7b97 \u4f5c\u7528 a | b $A\\cup B$ a & b $A\\cap B$ a - b $A\\setminus B$ a ^ b $A\\bigtriangleup B$ \u4ee5\u4e0a\u8fd0\u7b97\u4ea7\u751f\u4e00\u4e2a\u65b0\u96c6\u5408\u3002","title":"2. Set \u8fd0\u7b97\u7b26"},{"location":"1-Fundm/1.5/#3-set","text":"\u65b9\u6cd5\u540d \u4f5c\u7528 add( e ) \u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 update( S ) \u6dfb\u52a0\u65b0\u7684\u5143\u7d20\u6216\u96c6\u5408\u5230\u6b64\u96c6\u5408\u4e2d discard( e ) \u5220\u9664\u4e00\u4e2a\u5143\u7d20 remove( e ) \u5220\u9664\u4e00\u4e2a\u5143\u7d20\u3002\u82e5 e \u4e0d\u5b58\u5728\u4f1a\u62a5\u9519\u3002 pop() \u968f\u673a\u79fb\u9664\u4e00\u4e2a\u5143\u7d20 issubset( S ),issuperset( S ) \u662f\u5426\u4e3a\u6307\u5b9a\u96c6\u5408\u7684\u5b50/\u8d85\u96c6 isdisjoint( S ) \u5224\u65ad\u4e24\u4e2a\u96c6\u5408\u662f\u5426\u4e0d\u76f8\u4ea4 union( set1 , ...) \u5408\u5e76\u4e24\u4e2a\u6216\u591a\u4e2a\u96c6\u5408 intersection( set1 , ...) \u8fd4\u56de\u4e24\u4e2a\u6216\u591a\u4e2a\u96c6\u5408\u7684\u4ea4(\u65b0\u96c6\u5408) intersection_update( set1 , ...) \u8fd4\u56de\u4e24\u4e2a\u6216\u591a\u4e2a\u96c6\u5408\u7684\u4ea4(\u5728\u539f\u96c6\u5408\u4e0a\u5220\u9664\u975e\u516c\u5171\u5143\u7d20) difference( S ) \u8fd4\u56de\u96c6\u5408\u4e0e S \u7684\u5dee\u96c6 difference_update( S ) \u5728\u539f\u96c6\u5408\u4e0a\u79fb\u9664 symmetric_difference( S ) \u8fd4\u56de\u96c6\u5408\u4e0e S \u7684\u5bf9\u79f0\u5dee\u96c6 symmetric_difference_update( S ) \u8fd4\u56de\u96c6\u5408\u4e0e S \u7684\u5bf9\u79f0\u5dee\u96c6\uff0c\u5728\u539f\u96c6\u5408\u4e0a\u64cd\u4f5c","title":"3. Set \u65b9\u6cd5"},{"location":"1-Fundm/1.6/","text":"1. \u6761\u4ef6\u7ed3\u6784 Python \u7684\u6761\u4ef6\u8fd0\u7b97\u7b26\uff1a and, or, not \u3002\u57fa\u672c\u7684\u6761\u4ef6\u7ed3\u6784\u4e3a\uff1a 1 2 3 4 5 6 if ( < cond1 > ): < statement1 > elif ( < cond2 > ): < statement2 > else : < statement3 > 2. \u5faa\u73af\u7ed3\u6784 (1). \u57fa\u672c\u5faa\u73af\u7ed3\u6784 Python \u4e2d\u6709 while \u548c for-in \u4e24\u79cd\u5faa\u73af\u7ed3\u6784\u3002 for \u5faa\u73af\u7684\u7ed3\u6784\u4e3a: 1 2 for < var > in < iterable > : < statement > \u5982\u679c\u9700\u8981\u6309\u7167\u7d22\u5f15\u904d\u5386\uff0c\u53ef\u4ee5\u4f7f\u7528 range() \u51fd\u6570\uff1a range( start =0, stop , step =1) \u521b\u5efa\u4e00\u4e2a\u6574\u6570 List\uff0c\u6b65\u957f\u4e3a step \uff0c\u8303\u56f4\u4e3a [ start , stop ) (2). else \u8bed\u53e5 Python3 \u652f\u6301 while-else \u548c for-else \uff1a while-else: \u5f53\u4e14\u4ec5\u5f53\u5faa\u73af\u56e0\u4e3a\u6761\u4ef6\u9000\u51fa\uff0c\u800c\u6ca1\u6709\u88ab break \uff0c\u9000\u51fa\u65f6\u6267\u884c\u4e00\u6b21 else \u5757 for-else: \u5f53\u4e14\u4ec5\u5f53\u5faa\u73af\u56e0\u4e3a\u904d\u5386\u7ed3\u675f\u9000\u51fa\uff0c\u800c\u6ca1\u6709\u88ab break \uff0c\u9000\u51fa\u65f6\u6267\u884c\u4e00\u6b21 else \u5757 3. \u7f29\u8fdb\u89c4\u5219 \u2003 Python \u901a\u8fc7\u7f29\u8fdb\u5212\u5206\u4f5c\u7528\u57df\u3002\u6bcf\u884c\u4ee3\u7801\u90fd\u4f9d\u5b83\u7684\u7f29\u8fdb\u683c\u6570\u6709\u4e00\u4e2a\u7f29\u8fdb\u7ea7\u522b\uff0c Python \u89e3\u91ca\u5668\u7ef4\u62a4\u4e00\u4e2a\u7f29\u8fdb\u6808\uff0c\u5728\u8bfb\u53d6 py \u6587\u4ef6\u524d\uff0c\u9996\u5148\u628a\u7f29\u8fdb\u7ea7\u522b 0 \u538b\u5165\u6808\u4e2d\u3002\u7136\u540e\u4ece\u5934\u5230\u5c3e\uff0c\u8bfb\u53d6\u6bcf\u884c\u4ee3\u7801\uff0c\u5f53\u8bfb\u53d6\u5230\u4e00\u884c\u6709\u6548\u4ee3\u7801\u7684\u7f29\u8fdb\u7ea7\u522b\u65f6\uff0c\u4e0e\u6808\u9876\u503c\u6bd4\u8f83\uff1a \u5982\u679c\u76f8\u7b49\uff0c\u4ec0\u4e48\u4e5f\u4e0d\u4f1a\u53d1\u751f\uff1b \u5982\u679c\u5927\u4e8e\u6808\u9876\u503c\uff0c\u8be5\u884c\u4ee3\u7801\u7684\u7f29\u8fdb\u7ea7\u522b\u5165\u6808\uff0c\u540c\u65f6\u751f\u6210\u4e00\u4e2a\u7f29\u8fdb\u6807\u8bb0\uff1b \u5982\u679c\u5c0f\u4e8e\u6808\u9876\u503c\uff0c\u90a3\u4e48\u6808\u4e2d\u6240\u6709\u6bd4\u8be5\u884c\u4ee3\u7801\u7684\u7f29\u8fdb\u7ea7\u522b\u5927\u7684\u503c\u90fd\u4f1a\u88ab\u79fb\u9664\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u4e0e\u81ea\u5df1\u7684\u7ea7\u522b\u76f8\u7b49\u7684\u503c\uff0c\u540c\u65f6\u751f\u6210\u4e00\u4e2a\u6269\u5c55\u6807\u8bb0\u3002","title":"6.Basic Structure"},{"location":"1-Fundm/1.6/#1","text":"Python \u7684\u6761\u4ef6\u8fd0\u7b97\u7b26\uff1a and, or, not \u3002\u57fa\u672c\u7684\u6761\u4ef6\u7ed3\u6784\u4e3a\uff1a 1 2 3 4 5 6 if ( < cond1 > ): < statement1 > elif ( < cond2 > ): < statement2 > else : < statement3 >","title":"1. \u6761\u4ef6\u7ed3\u6784"},{"location":"1-Fundm/1.6/#2","text":"","title":"2. \u5faa\u73af\u7ed3\u6784"},{"location":"1-Fundm/1.6/#1_1","text":"Python \u4e2d\u6709 while \u548c for-in \u4e24\u79cd\u5faa\u73af\u7ed3\u6784\u3002 for \u5faa\u73af\u7684\u7ed3\u6784\u4e3a: 1 2 for < var > in < iterable > : < statement > \u5982\u679c\u9700\u8981\u6309\u7167\u7d22\u5f15\u904d\u5386\uff0c\u53ef\u4ee5\u4f7f\u7528 range() \u51fd\u6570\uff1a range( start =0, stop , step =1) \u521b\u5efa\u4e00\u4e2a\u6574\u6570 List\uff0c\u6b65\u957f\u4e3a step \uff0c\u8303\u56f4\u4e3a [ start , stop )","title":"(1). \u57fa\u672c\u5faa\u73af\u7ed3\u6784"},{"location":"1-Fundm/1.6/#2-else","text":"Python3 \u652f\u6301 while-else \u548c for-else \uff1a while-else: \u5f53\u4e14\u4ec5\u5f53\u5faa\u73af\u56e0\u4e3a\u6761\u4ef6\u9000\u51fa\uff0c\u800c\u6ca1\u6709\u88ab break \uff0c\u9000\u51fa\u65f6\u6267\u884c\u4e00\u6b21 else \u5757 for-else: \u5f53\u4e14\u4ec5\u5f53\u5faa\u73af\u56e0\u4e3a\u904d\u5386\u7ed3\u675f\u9000\u51fa\uff0c\u800c\u6ca1\u6709\u88ab break \uff0c\u9000\u51fa\u65f6\u6267\u884c\u4e00\u6b21 else \u5757","title":"(2). else \u8bed\u53e5"},{"location":"1-Fundm/1.6/#3","text":"Python \u901a\u8fc7\u7f29\u8fdb\u5212\u5206\u4f5c\u7528\u57df\u3002\u6bcf\u884c\u4ee3\u7801\u90fd\u4f9d\u5b83\u7684\u7f29\u8fdb\u683c\u6570\u6709\u4e00\u4e2a\u7f29\u8fdb\u7ea7\u522b\uff0c Python \u89e3\u91ca\u5668\u7ef4\u62a4\u4e00\u4e2a\u7f29\u8fdb\u6808\uff0c\u5728\u8bfb\u53d6 py \u6587\u4ef6\u524d\uff0c\u9996\u5148\u628a\u7f29\u8fdb\u7ea7\u522b 0 \u538b\u5165\u6808\u4e2d\u3002\u7136\u540e\u4ece\u5934\u5230\u5c3e\uff0c\u8bfb\u53d6\u6bcf\u884c\u4ee3\u7801\uff0c\u5f53\u8bfb\u53d6\u5230\u4e00\u884c\u6709\u6548\u4ee3\u7801\u7684\u7f29\u8fdb\u7ea7\u522b\u65f6\uff0c\u4e0e\u6808\u9876\u503c\u6bd4\u8f83\uff1a \u5982\u679c\u76f8\u7b49\uff0c\u4ec0\u4e48\u4e5f\u4e0d\u4f1a\u53d1\u751f\uff1b \u5982\u679c\u5927\u4e8e\u6808\u9876\u503c\uff0c\u8be5\u884c\u4ee3\u7801\u7684\u7f29\u8fdb\u7ea7\u522b\u5165\u6808\uff0c\u540c\u65f6\u751f\u6210\u4e00\u4e2a\u7f29\u8fdb\u6807\u8bb0\uff1b \u5982\u679c\u5c0f\u4e8e\u6808\u9876\u503c\uff0c\u90a3\u4e48\u6808\u4e2d\u6240\u6709\u6bd4\u8be5\u884c\u4ee3\u7801\u7684\u7f29\u8fdb\u7ea7\u522b\u5927\u7684\u503c\u90fd\u4f1a\u88ab\u79fb\u9664\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u4e0e\u81ea\u5df1\u7684\u7ea7\u522b\u76f8\u7b49\u7684\u503c\uff0c\u540c\u65f6\u751f\u6210\u4e00\u4e2a\u6269\u5c55\u6807\u8bb0\u3002","title":"3. \u7f29\u8fdb\u89c4\u5219"},{"location":"2-F/2.1/","text":"1. \u5207\u7247\u683c\u5f0f \u5728 Python \u4e2d\uff0c list\u3001tuple \u548c str \u90fd\u652f\u6301\u5207\u7247\u64cd\u4f5c\u3002\u5176\u57fa\u672c\u683c\u5f0f\u4e3a\uff1a 1 my_list [ < start > : < end > ] \u8868\u793a\u622a\u53d6\u533a\u95f4 [start, end) \u5185\u7684\u5143\u7d20\u3002\u5e76\u4e14\uff1a \u5982\u679c start = 0 \uff0c\u5219\u53ef\u4ee5\u7701\u7565\uff1b \u5982\u679c end = len(obj) \uff0c\u5219\u53ef\u4ee5\u7701\u7565\uff1b start/end \u53ef\u4ee5\u901a\u8fc7\u5012\u6570\u7684\u65b9\u5f0f\u6307\u660e\u3002 \u5728\u5207\u7247\u548c\u533a\u95f4\u64cd\u4f5c\u91cc\u4e0d\u5305\u542b\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7b26\u5408 Python\u3001C \u548c\u90e8\u5206\u5176\u4ed6\u8bed\u8a00\u91cc\u4ee5 0 \u4e3a\u8d77\u59cb\u4e0b\u6807\u7684\u4f20\u7edf\u3002\u8fd9\u6837\u505a\u6709\u4ee5\u4e0b\u597d\u5904\uff1a \u5f53\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\u4fe1\u606f\uff0c\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230\u533a\u95f4\u5185\u5143\u7d20\u6570\u91cf\uff0c\u5982 range(3) \u548c my_list[:3] \uff1b \u5f53\u8d77\u6b62\u4fe1\u606f\u90fd\u53ef\u89c1\u65f6\uff0c\u53ef\u901a\u8fc7 (stop - start) \u5f97\u5230\u5143\u7d20\u6570\u91cf\uff1b \u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u4efb\u610f\u4e0b\u6807 x \u628a\u533a\u95f4\u5206\u6210\u4e0d\u76f8\u4ea4\u7684\u4e24\u90e8\u5206\uff0c\u5982 my_list[:x] \u548c my_list[x:] \u3002 2. \u95f4\u9694\u503c\u5207\u7247 \u57fa\u672c\u683c\u5f0f\u4e3a\uff1a 1 my_list [ a : b : c ] \u8868\u793a\u5728 [a, b) \u4e4b\u95f4\u4ee5 c \u4e3a\u95f4\u9694 (\u4e0b\u6807\u7684\u503c) \u53d6\u503c\u3002 c \u7684\u503c\u5c0f\u4e8e 0 \u4ee3\u8868\u4ece\u53cd\u65b9\u5411\u622a\u53d6\u3002 1 2 3 4 s = 'bicycle' print ( s [:: 3 ]) # 'bye' print ( s [:: - 1 ]) # 'elcycib' print ( s [:: - 2 ]) # 'eccb' 3. \u5207\u7247\u8d4b\u503c \u628a\u5207\u7247\u6307\u5b9a\u7684\u8303\u56f4\u7528\u4e00\u4e2a\u65b0\u5bf9\u8c61\u8d4b\u503c\u3002 1 2 3 4 5 6 7 my_list = [ 0 , 1 , 2 , 3 , 4 , 4 , 4 , 5 , 6 , 7 ] my_list [ 4 : 7 ] = [ 4 ] print ( my_list ) # [0, 1, 2, 3, 4, 5, 6, 7] my_list = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] my_list [ 1 :: 2 ] = [ 10 , 30 , 50 , 70 , 90 ] print ( my_list ) # [0, 10, 2, 30, 4, 50, 6, 70, 8, 90, 10]","title":"1.Slice"},{"location":"2-F/2.1/#1","text":"\u5728 Python \u4e2d\uff0c list\u3001tuple \u548c str \u90fd\u652f\u6301\u5207\u7247\u64cd\u4f5c\u3002\u5176\u57fa\u672c\u683c\u5f0f\u4e3a\uff1a 1 my_list [ < start > : < end > ] \u8868\u793a\u622a\u53d6\u533a\u95f4 [start, end) \u5185\u7684\u5143\u7d20\u3002\u5e76\u4e14\uff1a \u5982\u679c start = 0 \uff0c\u5219\u53ef\u4ee5\u7701\u7565\uff1b \u5982\u679c end = len(obj) \uff0c\u5219\u53ef\u4ee5\u7701\u7565\uff1b start/end \u53ef\u4ee5\u901a\u8fc7\u5012\u6570\u7684\u65b9\u5f0f\u6307\u660e\u3002 \u5728\u5207\u7247\u548c\u533a\u95f4\u64cd\u4f5c\u91cc\u4e0d\u5305\u542b\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7b26\u5408 Python\u3001C \u548c\u90e8\u5206\u5176\u4ed6\u8bed\u8a00\u91cc\u4ee5 0 \u4e3a\u8d77\u59cb\u4e0b\u6807\u7684\u4f20\u7edf\u3002\u8fd9\u6837\u505a\u6709\u4ee5\u4e0b\u597d\u5904\uff1a \u5f53\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\u4fe1\u606f\uff0c\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230\u533a\u95f4\u5185\u5143\u7d20\u6570\u91cf\uff0c\u5982 range(3) \u548c my_list[:3] \uff1b \u5f53\u8d77\u6b62\u4fe1\u606f\u90fd\u53ef\u89c1\u65f6\uff0c\u53ef\u901a\u8fc7 (stop - start) \u5f97\u5230\u5143\u7d20\u6570\u91cf\uff1b \u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u4efb\u610f\u4e0b\u6807 x \u628a\u533a\u95f4\u5206\u6210\u4e0d\u76f8\u4ea4\u7684\u4e24\u90e8\u5206\uff0c\u5982 my_list[:x] \u548c my_list[x:] \u3002","title":"1. \u5207\u7247\u683c\u5f0f"},{"location":"2-F/2.1/#2","text":"\u57fa\u672c\u683c\u5f0f\u4e3a\uff1a 1 my_list [ a : b : c ] \u8868\u793a\u5728 [a, b) \u4e4b\u95f4\u4ee5 c \u4e3a\u95f4\u9694 (\u4e0b\u6807\u7684\u503c) \u53d6\u503c\u3002 c \u7684\u503c\u5c0f\u4e8e 0 \u4ee3\u8868\u4ece\u53cd\u65b9\u5411\u622a\u53d6\u3002 1 2 3 4 s = 'bicycle' print ( s [:: 3 ]) # 'bye' print ( s [:: - 1 ]) # 'elcycib' print ( s [:: - 2 ]) # 'eccb'","title":"2. \u95f4\u9694\u503c\u5207\u7247"},{"location":"2-F/2.1/#3","text":"\u628a\u5207\u7247\u6307\u5b9a\u7684\u8303\u56f4\u7528\u4e00\u4e2a\u65b0\u5bf9\u8c61\u8d4b\u503c\u3002 1 2 3 4 5 6 7 my_list = [ 0 , 1 , 2 , 3 , 4 , 4 , 4 , 5 , 6 , 7 ] my_list [ 4 : 7 ] = [ 4 ] print ( my_list ) # [0, 1, 2, 3, 4, 5, 6, 7] my_list = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] my_list [ 1 :: 2 ] = [ 10 , 30 , 50 , 70 , 90 ] print ( my_list ) # [0, 10, 2, 30, 4, 50, 6, 70, 8, 90, 10]","title":"3. \u5207\u7247\u8d4b\u503c"},{"location":"2-F/2.2/","text":"1. \u5217\u8868\u751f\u6210\u5f0f \u2003\u5217\u8868\u751f\u6210\u5f0f ( list comprehension, listcomps ) \u662f\u6784\u5efa\u5217\u8868\u7684\u4e00\u79cd\u5feb\u6377\u65b9\u5f0f\uff0c\u5e76\u4e14\u5b83\u66f4\u52a0\u6613\u8bfb\u3001\u76f8\u6bd4\u4e8e\u4f20\u7edf\u5faa\u73af\u6548\u7387\u66f4\u9ad8\u3002 1 2 3 4 print ([ dir for dir in os . listdir ( 'C:/' )]) words = [ 'HELLO' , 'WORLD' , '.' ] print ([ w . lower () for w in words ]) \u6309\u7167\u6761\u4ef6\u4fdd\u7559\u5217\u8868\u4e2d\u7684\u5143\u7d20\uff1a 1 2 vals = [ 1 , 2 , 3 , 4 , 5 , 6 ] print ([ v ** 2 for v in vals if v >= 2 ]) \u901a\u8fc7\u751f\u6210\u5f0f\u751f\u6210\u96c6\u5408\u548c\u5b57\u5178\uff1a 1 2 3 4 5 vals = [ 1 , 2 , 3 , 4 , 5 , 6 ] my_set = { x ** 2 for x in vals if x <= 10 } print ( my_set ) my_dict = { x : x ** 2 for x in vals if x <= 10 } print ( my_dict ) \u2003\u5728 Python 2. x \u4e2d\uff0c\u7531\u4e8e\u4f5c\u7528\u57df\u7684\u95ee\u9898\u4f7f\u7528\u5217\u8868\u751f\u6210\u5f0f\u53ef\u80fd\u4f1a\u5bfc\u81f4\u53d8\u91cf\u6cc4\u6f0f\u95ee\u9898\u3002\u5728 Python 3 \u4e4b\u540e\u5df2\u4e0d\u4f1a\u51fa\u73b0\u3002 2. \u751f\u6210\u5668\u8868\u8fbe\u5f0f\u3001\u751f\u6210\u5668\u51fd\u6570 \u2003\u5217\u8868\u751f\u6210\u5f0f\u662f\u4e00\u6b21\u6027\u751f\u6210\u6574\u4e2a\u5217\u8868\uff0c\u5f53\u6570\u636e\u91cf\u8f83\u5927\u4e14 \u4e0d\u9700\u8981 \"\u521b\u5efa\u6574\u4e2a\u5217\u8868\" \uff0c\u8fd9\u6837\u505a\u5c31\u4f1a\u6bd4\u8f83\u4f4e\u6548\u3002 \u2003\u751f\u6210\u5668\u8868\u8fbe\u5f0f ( generator expression, genexps ) \u6839\u636e\u5143\u7d20\u9012\u63a8\u7684\u7b97\u6cd5\u8fd4\u56de\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61\uff0c\u5b83\u901a\u8fc7 \"\u60f0\u6027\u8ba1\u7b97\" \u4e00\u6b21\u53ea\u4ea7\u751f\u4e00\u4e2a\u503c\uff0c\u66f4\u52a0\u8282\u7701\u5185\u5b58\uff0c\u5728\u65f6\u95f4\u4e0a\u4e5f\u4e0d\u4f1a\u6162\u592a\u591a\u751a\u81f3\u66f4\u5feb\u3002 \u5728\u8bed\u6cd5\u4e0a\u53ea\u9700\u8981\u628a\u5217\u8868\u751f\u6210\u5f0f\u7684 \" [] \" \u6362\u6210 \" () \"\u3002 1 2 3 4 5 6 vals = range ( 1000000 ) total = sum ([ i ** 2 for i in vals ]) # more efficient: total = sum ( i ** 2 for i in vals ) \u53ef\u4ee5\u901a\u8fc7 next() \u5f97\u5230 generator \u7684\u4e0b\u4e00\u4e2a\u8fd4\u56de\u503c\uff1a 1 2 3 vals = range ( 100 ) my_list = ( i ** 2 for i in vals ) print ( next ( my_list )) \u751f\u6210\u5668\u4e5f\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u4f46\u4e00\u4e2a\u751f\u6210\u5668\u53ea\u80fd\u88ab\u8fed\u4ee3\u4e00\u6b21\uff1a 1 2 for n in my_list : print ( n ) \u7531\u4e8e\u751f\u6210\u5668\u4fdd\u5b58\u7684\u662f\u5143\u7d20\u9012\u63a8\u7684\u7b97\u6cd5\uff0c\u56e0\u6b64\u5b83\u8fd8\u53ef\u4ee5\u652f\u6301\u5217\u8868\u751f\u6210\u5f0f\u65e0\u6cd5\u5b9e\u73b0\u7684\u66f4\u590d\u6742\u7684\u8ba1\u7b97\u3002 \u4f8b\u5982\uff0c\u901a\u8fc7\u751f\u6210\u5668\u4ea7\u751f\u4e00\u4e2a\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff1a 1 2 3 4 5 6 7 8 9 def fibonacci ( num ): cnt = 0 n0 , n1 = 1 , 0 while cnt < num : n = n0 + n1 yield n n0 , n1 = n1 , n cnt += 1 return 'OK' \u2003\u8fd9\u6837\u5c31\u901a\u8fc7\u51fd\u6570\u7684\u5f62\u5f0f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002\u5176\u6267\u884c\u903b\u8f91\u662f\u6bcf\u6b21\u5728 yield \u5904\u9012\u63a8\u51fa\u4e00\u4e2a\u5143\u7d20\u5c31\u963b\u585e\u5728\u76f8\u5e94\u4f4d\u7f6e\uff0c\u6bcf\u6b21\u9012\u63a8\u90fd\u4ece\u4e0a\u4e00\u6b21\u963b\u585e\u7684\u4f4d\u7f6e\u5f00\u59cb\u6267\u884c\uff0c\u76f4\u5230\u51fd\u6570\u9000\u51fa\u3002 \u2003\u5982\u679c\u8981\u60f3\u53d6\u5f97 generator \u7684\u8fd4\u56de\u503c\uff0c\u9700\u8981\u6355\u83b7 StopIteration \u9519\u8bef\uff1a 1 2 3 4 5 6 7 8 gen = fibonacci ( 10 ) while True : try : print ( next ( gen )) except StopIteration as e : print ( e . value ) break","title":"2.Listcomps and Genexps"},{"location":"2-F/2.2/#1","text":"\u5217\u8868\u751f\u6210\u5f0f ( list comprehension, listcomps ) \u662f\u6784\u5efa\u5217\u8868\u7684\u4e00\u79cd\u5feb\u6377\u65b9\u5f0f\uff0c\u5e76\u4e14\u5b83\u66f4\u52a0\u6613\u8bfb\u3001\u76f8\u6bd4\u4e8e\u4f20\u7edf\u5faa\u73af\u6548\u7387\u66f4\u9ad8\u3002 1 2 3 4 print ([ dir for dir in os . listdir ( 'C:/' )]) words = [ 'HELLO' , 'WORLD' , '.' ] print ([ w . lower () for w in words ]) \u6309\u7167\u6761\u4ef6\u4fdd\u7559\u5217\u8868\u4e2d\u7684\u5143\u7d20\uff1a 1 2 vals = [ 1 , 2 , 3 , 4 , 5 , 6 ] print ([ v ** 2 for v in vals if v >= 2 ]) \u901a\u8fc7\u751f\u6210\u5f0f\u751f\u6210\u96c6\u5408\u548c\u5b57\u5178\uff1a 1 2 3 4 5 vals = [ 1 , 2 , 3 , 4 , 5 , 6 ] my_set = { x ** 2 for x in vals if x <= 10 } print ( my_set ) my_dict = { x : x ** 2 for x in vals if x <= 10 } print ( my_dict ) \u2003\u5728 Python 2. x \u4e2d\uff0c\u7531\u4e8e\u4f5c\u7528\u57df\u7684\u95ee\u9898\u4f7f\u7528\u5217\u8868\u751f\u6210\u5f0f\u53ef\u80fd\u4f1a\u5bfc\u81f4\u53d8\u91cf\u6cc4\u6f0f\u95ee\u9898\u3002\u5728 Python 3 \u4e4b\u540e\u5df2\u4e0d\u4f1a\u51fa\u73b0\u3002","title":"1. \u5217\u8868\u751f\u6210\u5f0f"},{"location":"2-F/2.2/#2","text":"\u5217\u8868\u751f\u6210\u5f0f\u662f\u4e00\u6b21\u6027\u751f\u6210\u6574\u4e2a\u5217\u8868\uff0c\u5f53\u6570\u636e\u91cf\u8f83\u5927\u4e14 \u4e0d\u9700\u8981 \"\u521b\u5efa\u6574\u4e2a\u5217\u8868\" \uff0c\u8fd9\u6837\u505a\u5c31\u4f1a\u6bd4\u8f83\u4f4e\u6548\u3002 \u2003\u751f\u6210\u5668\u8868\u8fbe\u5f0f ( generator expression, genexps ) \u6839\u636e\u5143\u7d20\u9012\u63a8\u7684\u7b97\u6cd5\u8fd4\u56de\u4e00\u4e2a\u751f\u6210\u5668\u5bf9\u8c61\uff0c\u5b83\u901a\u8fc7 \"\u60f0\u6027\u8ba1\u7b97\" \u4e00\u6b21\u53ea\u4ea7\u751f\u4e00\u4e2a\u503c\uff0c\u66f4\u52a0\u8282\u7701\u5185\u5b58\uff0c\u5728\u65f6\u95f4\u4e0a\u4e5f\u4e0d\u4f1a\u6162\u592a\u591a\u751a\u81f3\u66f4\u5feb\u3002 \u5728\u8bed\u6cd5\u4e0a\u53ea\u9700\u8981\u628a\u5217\u8868\u751f\u6210\u5f0f\u7684 \" [] \" \u6362\u6210 \" () \"\u3002 1 2 3 4 5 6 vals = range ( 1000000 ) total = sum ([ i ** 2 for i in vals ]) # more efficient: total = sum ( i ** 2 for i in vals ) \u53ef\u4ee5\u901a\u8fc7 next() \u5f97\u5230 generator \u7684\u4e0b\u4e00\u4e2a\u8fd4\u56de\u503c\uff1a 1 2 3 vals = range ( 100 ) my_list = ( i ** 2 for i in vals ) print ( next ( my_list )) \u751f\u6210\u5668\u4e5f\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff0c\u4f46\u4e00\u4e2a\u751f\u6210\u5668\u53ea\u80fd\u88ab\u8fed\u4ee3\u4e00\u6b21\uff1a 1 2 for n in my_list : print ( n ) \u7531\u4e8e\u751f\u6210\u5668\u4fdd\u5b58\u7684\u662f\u5143\u7d20\u9012\u63a8\u7684\u7b97\u6cd5\uff0c\u56e0\u6b64\u5b83\u8fd8\u53ef\u4ee5\u652f\u6301\u5217\u8868\u751f\u6210\u5f0f\u65e0\u6cd5\u5b9e\u73b0\u7684\u66f4\u590d\u6742\u7684\u8ba1\u7b97\u3002 \u4f8b\u5982\uff0c\u901a\u8fc7\u751f\u6210\u5668\u4ea7\u751f\u4e00\u4e2a\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff1a 1 2 3 4 5 6 7 8 9 def fibonacci ( num ): cnt = 0 n0 , n1 = 1 , 0 while cnt < num : n = n0 + n1 yield n n0 , n1 = n1 , n cnt += 1 return 'OK' \u2003\u8fd9\u6837\u5c31\u901a\u8fc7\u51fd\u6570\u7684\u5f62\u5f0f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002\u5176\u6267\u884c\u903b\u8f91\u662f\u6bcf\u6b21\u5728 yield \u5904\u9012\u63a8\u51fa\u4e00\u4e2a\u5143\u7d20\u5c31\u963b\u585e\u5728\u76f8\u5e94\u4f4d\u7f6e\uff0c\u6bcf\u6b21\u9012\u63a8\u90fd\u4ece\u4e0a\u4e00\u6b21\u963b\u585e\u7684\u4f4d\u7f6e\u5f00\u59cb\u6267\u884c\uff0c\u76f4\u5230\u51fd\u6570\u9000\u51fa\u3002 \u2003\u5982\u679c\u8981\u60f3\u53d6\u5f97 generator \u7684\u8fd4\u56de\u503c\uff0c\u9700\u8981\u6355\u83b7 StopIteration \u9519\u8bef\uff1a 1 2 3 4 5 6 7 8 gen = fibonacci ( 10 ) while True : try : print ( next ( gen )) except StopIteration as e : print ( e . value ) break","title":"2. \u751f\u6210\u5668\u8868\u8fbe\u5f0f\u3001\u751f\u6210\u5668\u51fd\u6570"},{"location":"2-F/2.3/","text":"1. \u547d\u540d\u7a7a\u95f4 a namespace is mapping from names to objects. Most namespaces are currently implemented as Python dictionaries. \u547d\u540d\u7a7a\u95f4\u5c31\u662f\u5185\u5b58\u4e2d\u5b58\u653e\u540d\u5b57\u4e0e\u503c\u7684\u6620\u5c04\u5173\u7cfb\u7684\u5730\u65b9\uff0c\u901a\u5e38\u901a\u8fc7\u5b57\u5178\u5b9e\u73b0\uff0c\u5176\u8bbe\u8ba1\u7684\u539f\u56e0\u662f\u907f\u514d\u53d8\u91cf\u7684\u91cd\u547d\u540d\u3002 \u4e00\u822c\u6709\u4e09\u79cd\u547d\u540d\u7a7a\u95f4\uff1a \u5185\u7f6e\u540d\u79f0 ( built-in names )\uff1a python \u5185\u7f6e\u7684\u540d\u79f0\uff0c\u4f8b\u5982 abs \u3001 int \u3001 BaseException \uff1b Python \u89e3\u91ca\u5668\u542f\u52a8\u65f6\u751f\u6548\uff0c\u89e3\u91ca\u5668\u5173\u95ed\u65f6\u5931\u6548\u3002 \u5168\u5c40\u540d\u79f0 ( global names )\uff1a\u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u5982\u51fd\u6570\u540d\u3001\u7c7b\u540d\u3001\u6a21\u5757\u7ea7\u7684\u53d8\u91cf\u548c\u5e38\u91cf\u540d\uff1b Python \u6587\u4ef6\u6267\u884c\u65f6\u751f\u6548\uff0c\u6267\u884c\u5b8c\u6bd5\u65f6\u5931\u6548\u3002 \u5c40\u90e8\u540d\u79f0 ( local names )\uff1a\u51fd\u6570\u6216\u8005\u7c7b\u4e2d\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u5305\u62ec\u53c2\u6570\u540d\u3001\u53d8\u91cf\u540d\u548c\u4e00\u90e8\u5206\u51fd\u6570\u540d\u3002 \u51fd\u6570\u8c03\u7528\u65f6\u751f\u6548\uff0c\u8c03\u7528\u5b8c\u6210\u65f6\u5931\u6548\u3002 \u4e09\u4e2a\u547d\u540d\u7a7a\u95f4\u6210\u5d4c\u5957\u5173\u7cfb\u3002\u5f53\u8981\u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf\u65f6\uff0c Python \u89e3\u91ca\u5668\u7684\u67e5\u627e\u987a\u5e8f\u4e3a\u4ece\u5185\u5411\u5916\uff0c\u5373 local -> global -> built-in \u3002\u5982\u679c\u627e\u4e0d\u5230\u53d8\u91cf\uff0c\u5b83\u4f1a\u653e\u5f03\u67e5\u627e\u5e76\u629b\u51fa\u4e00\u4e2a NameError \u3002 \u4e0d\u540c\u547d\u540d\u7a7a\u95f4\u4e2d\u53ef\u4ee5\u6709\u76f8\u540c\u7684\u53d8\u91cf\u540d\u3002 2. \u4f5c\u7528\u57df a scope is a textual region of a Python program where a namespace is directly accessible. \"Directly accessible\" here means that an unqualified reference to a name attempts to find the name in the namespace. \u4f5c\u7528\u57df\u662f\u4f34\u968f\u7740\u547d\u540d\u7a7a\u95f4\u4ea7\u751f\u7684\u6982\u5ff5\uff0c\u5728\u4e00\u4e2a Python \u7a0b\u5e8f\u7684\u4e0d\u540c\u4f4d\u7f6e\u5b9a\u4e49\u7684\u53d8\u91cf\u4f1a\u88ab\u6620\u5c04\u5230\u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\uff0c\u56e0\u6b64\u4e0d\u540c\u4f5c\u7528\u57df\u5bf9\u547d\u540d\u7a7a\u95f4\u7684\u8bbf\u95ee\u6743\u9650\u4e5f\u4e0d\u540c\uff0c\u8bbf\u95ee\u987a\u5e8f\u4e3a\u4ece\u5f53\u524d\u4f4d\u7f6e\u5411\u5916\u8bbf\u95ee\u3002\u6839\u636e\u547d\u540d\u7a7a\u95f4\u7684\u5206\u7c7b\uff0c\u4f5c\u7528\u57df\u53ef\u5206\u4e3a\u4ee5\u4e0b\u56db\u79cd (\u6210\u5d4c\u5957\u5173\u7cfb)\uff1a local \uff1a\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff1b enclosing \uff1a\u5916\u90e8\u51fd\u6570\u5d4c\u5957\u7684\u547d\u540d\u7a7a\u95f4\u3002\u89c1\u95ed\u5305\u3002 global \uff1a\u67d0\u4e2a\u6a21\u5757\u7684\u547d\u540d\u7a7a\u95f4\uff1b built-in \uff1a\u5185\u7f6e\u547d\u540d\u7a7a\u95f4\u3002 \u67e5\u627e\u67d0\u4e2a\u53d8\u91cf\u540d\u7684\u987a\u5e8f\u4e3a L -> E -> G -> B \u3002 \u2460. \u67e5\u770b\u9884\u5b9a\u4e49\u540d\u79f0 \u5185\u7f6e\u4f5c\u7528\u57df\u901a\u8fc7\u540d\u4e3a builtin \u7684\u6807\u51c6\u6a21\u5757\u5b9e\u73b0\u7684\uff0c\u4f46\u8fd9\u4e2a\u53d8\u91cf\u672c\u8eab\u6ca1\u6709\u88ab\u6dfb\u52a0\u8fdb\u5185\u7f6e\u4f5c\u7528\u57df\u5185\u3002\u53ef\u901a\u8fc7\u4ee5\u4e0b\u4ee3\u7801\u67e5\u770b\u9884\u5b9a\u4e49\u4e86\u54ea\u4e9b\u53d8\u91cf\uff1a 1 2 3 import builtin print ( dir ( builtin )) \u2461. \u4f5c\u7528\u57df\u7684\u5f15\u5165 \u5728 Python \u4e2d\uff0c\u53ea\u6709\u6a21\u5757\u3001\u7c7b\u4ee5\u53ca\u51fd\u6570 ( def \u3001 lambda ) \u624d\u4f1a\u5f15\u5165\u65b0\u7684\u4f5c\u7528\u57df\uff0c\u800c\u4ee3\u7801\u5757\u4f8b\u5982 if/else \u3001 try/except \u3001 for/while \u7b49\u4e0d\u4f1a\u5f15\u5165\u65b0\u7684\u4f5c\u7528\u57df\u3002\u4f8b\u5982\uff1a 1 2 3 if True : new_arg = 100 print ( new_arg ) # 100 3. global \u5173\u952e\u5b57 1 2 3 4 g_a = 1 def func (): g_a = 2 \u524d\u9762\u63d0\u5230\u8fc7\uff0c\u4e0d\u540c\u547d\u540d\u7a7a\u95f4\u7684\u53d8\u91cf\u53ef\u4ee5\u91cd\u540d\u3002\u56e0\u6b64\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u51fd\u6570\u5185\u7684 g_a \u662f\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\uff0c\u5e76\u6ca1\u6709\u5b9e\u73b0\u5bf9\u5168\u5c40\u53d8\u91cf\u7684\u4fee\u6539\u3002 1 2 3 4 5 6 7 8 9 g_a = 1 def func (): g_a += 2 func () \"\"\" UnboundLocalError: local variable 'g_a' referenced before assignment \"\"\" \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7531\u4e8e\u8d4b\u503c\u8bed\u53e5 g_a = g_a + 2 \u7684\u5b58\u5728\uff0c g_a \u7531\u4e8e\u8d4b\u503c\u800c\u6539\u53d8\u4e86\u5f15\u7528\uff0c g_a \u4ecd\u662f\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u3002\u7531\u4e8e\u901a\u8fc7\u81ea\u8eab\u8d4b\u503c\uff0c\u76f8\u5f53\u4e8e g_a \u5728\u88ab\u5206\u914d\u5230\u547d\u540d\u7a7a\u95f4\u4e4b\u524d\u5c31\u88ab\u8bbf\u95ee ( referenced ) \u4e86\u3002 \u5982\u679c\u8981\u5728\u51fd\u6570\u5185\u5b9e\u73b0\u5bf9\u5168\u5c40\u53d8\u91cf\u7684\u4fee\u6539\uff0c\u53ef\u4ee5\u901a\u8fc7 global \u5173\u952e\u5b57\uff0c\u544a\u8bc9\u89e3\u91ca\u5668\u8fd9\u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff1a 1 2 3 4 5 6 7 8 g_a = 1 def func (): print ( g_a ) # 1 g_a += 2 func () print ( g_a ) # 3 \u7c7b\u4f3c\u5730\uff0c\u5d4c\u5957\u51fd\u6570\u7684\u95ed\u5305\u7a7a\u95f4\u4e5f\u4f1a\u51fa\u73b0\u76f8\u540c\u7684\u95ee\u9898\uff0c\u6b64\u65f6\u5219\u7528 nonlocal \u5173\u952e\u5b57\u89e3\u51b3\u3002\u4f8b\u5b50\u8be6\u89c1 e.g. \u3002","title":"3.Namespace and Scope"},{"location":"2-F/2.3/#1","text":"a namespace is mapping from names to objects. Most namespaces are currently implemented as Python dictionaries. \u547d\u540d\u7a7a\u95f4\u5c31\u662f\u5185\u5b58\u4e2d\u5b58\u653e\u540d\u5b57\u4e0e\u503c\u7684\u6620\u5c04\u5173\u7cfb\u7684\u5730\u65b9\uff0c\u901a\u5e38\u901a\u8fc7\u5b57\u5178\u5b9e\u73b0\uff0c\u5176\u8bbe\u8ba1\u7684\u539f\u56e0\u662f\u907f\u514d\u53d8\u91cf\u7684\u91cd\u547d\u540d\u3002 \u4e00\u822c\u6709\u4e09\u79cd\u547d\u540d\u7a7a\u95f4\uff1a \u5185\u7f6e\u540d\u79f0 ( built-in names )\uff1a python \u5185\u7f6e\u7684\u540d\u79f0\uff0c\u4f8b\u5982 abs \u3001 int \u3001 BaseException \uff1b Python \u89e3\u91ca\u5668\u542f\u52a8\u65f6\u751f\u6548\uff0c\u89e3\u91ca\u5668\u5173\u95ed\u65f6\u5931\u6548\u3002 \u5168\u5c40\u540d\u79f0 ( global names )\uff1a\u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u5982\u51fd\u6570\u540d\u3001\u7c7b\u540d\u3001\u6a21\u5757\u7ea7\u7684\u53d8\u91cf\u548c\u5e38\u91cf\u540d\uff1b Python \u6587\u4ef6\u6267\u884c\u65f6\u751f\u6548\uff0c\u6267\u884c\u5b8c\u6bd5\u65f6\u5931\u6548\u3002 \u5c40\u90e8\u540d\u79f0 ( local names )\uff1a\u51fd\u6570\u6216\u8005\u7c7b\u4e2d\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u5305\u62ec\u53c2\u6570\u540d\u3001\u53d8\u91cf\u540d\u548c\u4e00\u90e8\u5206\u51fd\u6570\u540d\u3002 \u51fd\u6570\u8c03\u7528\u65f6\u751f\u6548\uff0c\u8c03\u7528\u5b8c\u6210\u65f6\u5931\u6548\u3002 \u4e09\u4e2a\u547d\u540d\u7a7a\u95f4\u6210\u5d4c\u5957\u5173\u7cfb\u3002\u5f53\u8981\u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf\u65f6\uff0c Python \u89e3\u91ca\u5668\u7684\u67e5\u627e\u987a\u5e8f\u4e3a\u4ece\u5185\u5411\u5916\uff0c\u5373 local -> global -> built-in \u3002\u5982\u679c\u627e\u4e0d\u5230\u53d8\u91cf\uff0c\u5b83\u4f1a\u653e\u5f03\u67e5\u627e\u5e76\u629b\u51fa\u4e00\u4e2a NameError \u3002 \u4e0d\u540c\u547d\u540d\u7a7a\u95f4\u4e2d\u53ef\u4ee5\u6709\u76f8\u540c\u7684\u53d8\u91cf\u540d\u3002","title":"1. \u547d\u540d\u7a7a\u95f4"},{"location":"2-F/2.3/#2","text":"a scope is a textual region of a Python program where a namespace is directly accessible. \"Directly accessible\" here means that an unqualified reference to a name attempts to find the name in the namespace. \u4f5c\u7528\u57df\u662f\u4f34\u968f\u7740\u547d\u540d\u7a7a\u95f4\u4ea7\u751f\u7684\u6982\u5ff5\uff0c\u5728\u4e00\u4e2a Python \u7a0b\u5e8f\u7684\u4e0d\u540c\u4f4d\u7f6e\u5b9a\u4e49\u7684\u53d8\u91cf\u4f1a\u88ab\u6620\u5c04\u5230\u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\uff0c\u56e0\u6b64\u4e0d\u540c\u4f5c\u7528\u57df\u5bf9\u547d\u540d\u7a7a\u95f4\u7684\u8bbf\u95ee\u6743\u9650\u4e5f\u4e0d\u540c\uff0c\u8bbf\u95ee\u987a\u5e8f\u4e3a\u4ece\u5f53\u524d\u4f4d\u7f6e\u5411\u5916\u8bbf\u95ee\u3002\u6839\u636e\u547d\u540d\u7a7a\u95f4\u7684\u5206\u7c7b\uff0c\u4f5c\u7528\u57df\u53ef\u5206\u4e3a\u4ee5\u4e0b\u56db\u79cd (\u6210\u5d4c\u5957\u5173\u7cfb)\uff1a local \uff1a\u5c40\u90e8\u547d\u540d\u7a7a\u95f4\uff1b enclosing \uff1a\u5916\u90e8\u51fd\u6570\u5d4c\u5957\u7684\u547d\u540d\u7a7a\u95f4\u3002\u89c1\u95ed\u5305\u3002 global \uff1a\u67d0\u4e2a\u6a21\u5757\u7684\u547d\u540d\u7a7a\u95f4\uff1b built-in \uff1a\u5185\u7f6e\u547d\u540d\u7a7a\u95f4\u3002 \u67e5\u627e\u67d0\u4e2a\u53d8\u91cf\u540d\u7684\u987a\u5e8f\u4e3a L -> E -> G -> B \u3002","title":"2. \u4f5c\u7528\u57df"},{"location":"2-F/2.3/#1_1","text":"\u5185\u7f6e\u4f5c\u7528\u57df\u901a\u8fc7\u540d\u4e3a builtin \u7684\u6807\u51c6\u6a21\u5757\u5b9e\u73b0\u7684\uff0c\u4f46\u8fd9\u4e2a\u53d8\u91cf\u672c\u8eab\u6ca1\u6709\u88ab\u6dfb\u52a0\u8fdb\u5185\u7f6e\u4f5c\u7528\u57df\u5185\u3002\u53ef\u901a\u8fc7\u4ee5\u4e0b\u4ee3\u7801\u67e5\u770b\u9884\u5b9a\u4e49\u4e86\u54ea\u4e9b\u53d8\u91cf\uff1a 1 2 3 import builtin print ( dir ( builtin ))","title":"\u2460. \u67e5\u770b\u9884\u5b9a\u4e49\u540d\u79f0"},{"location":"2-F/2.3/#2_1","text":"\u5728 Python \u4e2d\uff0c\u53ea\u6709\u6a21\u5757\u3001\u7c7b\u4ee5\u53ca\u51fd\u6570 ( def \u3001 lambda ) \u624d\u4f1a\u5f15\u5165\u65b0\u7684\u4f5c\u7528\u57df\uff0c\u800c\u4ee3\u7801\u5757\u4f8b\u5982 if/else \u3001 try/except \u3001 for/while \u7b49\u4e0d\u4f1a\u5f15\u5165\u65b0\u7684\u4f5c\u7528\u57df\u3002\u4f8b\u5982\uff1a 1 2 3 if True : new_arg = 100 print ( new_arg ) # 100","title":"\u2461. \u4f5c\u7528\u57df\u7684\u5f15\u5165"},{"location":"2-F/2.3/#3-global","text":"1 2 3 4 g_a = 1 def func (): g_a = 2 \u524d\u9762\u63d0\u5230\u8fc7\uff0c\u4e0d\u540c\u547d\u540d\u7a7a\u95f4\u7684\u53d8\u91cf\u53ef\u4ee5\u91cd\u540d\u3002\u56e0\u6b64\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u51fd\u6570\u5185\u7684 g_a \u662f\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\uff0c\u5e76\u6ca1\u6709\u5b9e\u73b0\u5bf9\u5168\u5c40\u53d8\u91cf\u7684\u4fee\u6539\u3002 1 2 3 4 5 6 7 8 9 g_a = 1 def func (): g_a += 2 func () \"\"\" UnboundLocalError: local variable 'g_a' referenced before assignment \"\"\" \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7531\u4e8e\u8d4b\u503c\u8bed\u53e5 g_a = g_a + 2 \u7684\u5b58\u5728\uff0c g_a \u7531\u4e8e\u8d4b\u503c\u800c\u6539\u53d8\u4e86\u5f15\u7528\uff0c g_a \u4ecd\u662f\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u3002\u7531\u4e8e\u901a\u8fc7\u81ea\u8eab\u8d4b\u503c\uff0c\u76f8\u5f53\u4e8e g_a \u5728\u88ab\u5206\u914d\u5230\u547d\u540d\u7a7a\u95f4\u4e4b\u524d\u5c31\u88ab\u8bbf\u95ee ( referenced ) \u4e86\u3002 \u5982\u679c\u8981\u5728\u51fd\u6570\u5185\u5b9e\u73b0\u5bf9\u5168\u5c40\u53d8\u91cf\u7684\u4fee\u6539\uff0c\u53ef\u4ee5\u901a\u8fc7 global \u5173\u952e\u5b57\uff0c\u544a\u8bc9\u89e3\u91ca\u5668\u8fd9\u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff1a 1 2 3 4 5 6 7 8 g_a = 1 def func (): print ( g_a ) # 1 g_a += 2 func () print ( g_a ) # 3 \u7c7b\u4f3c\u5730\uff0c\u5d4c\u5957\u51fd\u6570\u7684\u95ed\u5305\u7a7a\u95f4\u4e5f\u4f1a\u51fa\u73b0\u76f8\u540c\u7684\u95ee\u9898\uff0c\u6b64\u65f6\u5219\u7528 nonlocal \u5173\u952e\u5b57\u89e3\u51b3\u3002\u4f8b\u5b50\u8be6\u89c1 e.g. \u3002","title":"3. global \u5173\u952e\u5b57"},{"location":"3-Func/3.1/","text":"1. \u5b9a\u4e49\u51fd\u6570 \u5728 Python \u4e2d\uff0c\u5b9a\u4e49\u51fd\u6570\u901a\u8fc7 def \u5173\u952e\u5b57\u58f0\u660e\uff0c\u5e76\u4ecd\u7528\u5192\u53f7\u58f0\u660e\u4f5c\u7528\u57df\u3002 1 2 def func_demo (): pass 2. \u8fd4\u56de\u503c Python \u652f\u6301\u591a\u4e2a\u8fd4\u56de\u503c\u3002 1 2 3 4 5 def func_demo (): return 1 , '12-2' res = func_demo () n , d = func_demo () \u5176\u539f\u7406\u662f\uff0c Python \u7684\u51fd\u6570\u5728\u8fd4\u56de tuple \u7684\u65f6\u5019\u53ef\u4ee5\u7701\u7565\u6389 \" ( ) \"\uff1b\u800c tuple \u5728\u8d4b\u503c\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u6309\u7167\u4f4d\u7f6e\u4f9d\u6b21 unpack \u7ed9\u5bf9\u5e94\u7684\u53d8\u91cf\u3002","title":"1.Basic Characteristics"},{"location":"3-Func/3.1/#1","text":"\u5728 Python \u4e2d\uff0c\u5b9a\u4e49\u51fd\u6570\u901a\u8fc7 def \u5173\u952e\u5b57\u58f0\u660e\uff0c\u5e76\u4ecd\u7528\u5192\u53f7\u58f0\u660e\u4f5c\u7528\u57df\u3002 1 2 def func_demo (): pass","title":"1. \u5b9a\u4e49\u51fd\u6570"},{"location":"3-Func/3.1/#2","text":"Python \u652f\u6301\u591a\u4e2a\u8fd4\u56de\u503c\u3002 1 2 3 4 5 def func_demo (): return 1 , '12-2' res = func_demo () n , d = func_demo () \u5176\u539f\u7406\u662f\uff0c Python \u7684\u51fd\u6570\u5728\u8fd4\u56de tuple \u7684\u65f6\u5019\u53ef\u4ee5\u7701\u7565\u6389 \" ( ) \"\uff1b\u800c tuple \u5728\u8d4b\u503c\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u6309\u7167\u4f4d\u7f6e\u4f9d\u6b21 unpack \u7ed9\u5bf9\u5e94\u7684\u53d8\u91cf\u3002","title":"2. \u8fd4\u56de\u503c"},{"location":"3-Func/3.2/","text":"1. \u666e\u901a\u53c2\u6570 (1). \u5b9e\u53c2 Python \u4e2d\u7684\u5b9e\u53c2\u8868\u53ea\u6709\u7b80\u5355\u7684\u4e24\u4e2a\u90e8\u5206\uff1a \u2003\u2003\u2003\u2003 func (< \u4f4d\u7f6e\u5b9e\u53c2 >, < \u5173\u952e\u5b57\u5b9e\u53c2 >) \u8981\u6ce8\u610f\u4f4d\u7f6e\u5b9e\u53c2\u548c\u5f62\u53c2\u4e4b\u95f4\u8981\u4e25\u683c\u6309\u7167\u4e0a\u9762\u7684\u987a\u5e8f\uff0c\u4e14\u4e0d\u80fd\u4ea4\u9519\u3002 1 2 3 4 5 def printer ( name , age ): print ( name , age ) # demo print_property ( age = 2 , name = 'bob' ) \u5173\u952e\u5b57\u5b9e\u53c2\u7684\u610f\u4e49\u5728\u4e8e\uff1a\u2460 \u6446\u8131\u4f4d\u7f6e\u9650\u5236\uff1b\u2461 \u5f53\u9ed8\u8ba4\u53c2\u6570\u8f83\u591a\uff0c\u63d0\u5347\u6613\u7528\u6027\u548c\u53ef\u8bfb\u6027\u3002 (2). \u5f62\u53c2 Python \u4e2d\u666e\u901a\u5f62\u53c2\u4e5f\u6709\u4e24\u4e2a\u90e8\u5206\uff1a \u2003\u2003\u2003\u2003 def func (< \u4f4d\u7f6e\u5b9e\u53c2 >, < \u9ed8\u8ba4\u5b9e\u53c2 >) \u5f53\u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570\u4f5c\u4e3a\u5f62\u53c2\uff0c\u5982\u679c\u8c03\u7528\u65f6\u6ca1\u6307\u660e\u8fd9\u4e2a\u53c2\u6570\uff0c\u5c31\u4f1a\u4f7f\u7528\u9ed8\u8ba4\u503c\u4f5c\u4e3a\u5176\u503c\u4f7f\u7528\uff1b\u5982\u679c\u6307\u660e\uff0c\u5c31\u4f7f\u7528\u5b9e\u53c2\u6307\u660e\u7684\u503c\u3002 1 2 3 4 5 def print_property ( name , age , gender = 'M' ) print ( name , age , gender ) print ( 'bob' , 10 ) print ( 'alice' , 10 , 'F' ) \u8fd9\u79cd\u673a\u5236\u7b80\u5316\u4e86\u51fd\u6570\u7684\u8c03\u7528\u3002\u5728\u4f7f\u7528\u65f6\u8981\u6ce8\u610f\u4ee5\u4e0b\u95ee\u9898\uff1a \u2460 \u51fd\u6570\u5b9a\u4e49\u65f6\uff0c\u540c\u5b9e\u53c2\u4e00\u6837\uff0c\u4f4d\u7f6e\u53c2\u6570\u5728\u524d\uff0c\u9ed8\u8ba4\u53c2\u6570\u5728\u540e\u3002 \u2461 \u51fd\u6570\u5728\u5b9a\u4e49\u65f6\uff0c\u9ed8\u8ba4\u53c2\u6570\u6307\u793a\u7684\u53d8\u91cf\u5c31\u88ab\u521d\u59cb\u5316\u4e86\uff0c\u800c\u4e0d\u662f\u5728\u6bcf\u6b21\u8c03\u7528\u65f6\u521d\u59cb\u5316\u3002\u56e0\u6b64\uff0c\u9ed8\u8ba4\u53c2\u6570\u5e94\u5c3d\u91cf\u4e3a\u4e0d\u53ef\u53d8\u5bf9\u8c61\u3002 Example : 1 2 3 4 def init_with_M ( L = []): L . append ( 'M' ) print ( L ) return L Solution : 1 2 3 4 5 6 def init_with_M ( L = None ): if L is None : L = [] L . append ( 'M' ) print ( L ) return L 2. \u5f62\u53c2\u7684\u9ad8\u7ea7\u53c2\u6570\u7279\u6027 Python \u4e2d\u5f62\u53c2\u8868\u53ef\u5206\u4e3a\u4e94\u4e2a\u90e8\u5206\uff1a \u2002 def func (< \u9650\u5b9a\u4f4d\u7f6e\u5f62\u53c2 >, < \u666e\u901a\u5f62\u53c2 >, < \u7279\u6b8a\u5f62\u53c2 args >, < \u9650\u5b9a\u5173\u952e\u5b57\u5f62\u53c2 >, < \u7279\u6b8a\u5f62\u53c2 kwargs >) \u2460 \u9650\u5b9a\u4f4d\u7f6e\u5f62\u53c2 ( position-only ) \u9650\u5236\u5f00\u5934\u51e0\u4e2a\u53c2\u6570\u53ea\u80fd\u901a\u8fc7\u4f4d\u7f6e\u800c\u4e0d\u80fd\u901a\u8fc7\u5173\u952e\u5b57\u4f20\u9012\uff0c\u5728 Python 3.8 \u4e2d\u6b63\u5f0f\u5f15\u5165\u3002 1 2 3 # example: a, b are positon-only parameters def printer ( a , b , / , c , d ): print ( a , b , c , d ) \u2461 \u9650\u5b9a\u5173\u952e\u5b57\u5f62\u53c2 ( keyword-only ) \u53c8\u53eb\u547d\u540d\u5173\u952e\u5b57\u53c2\u6570\uff0c\u9650\u5236\u540e\u9762\u51e0\u4e2a\u53c2\u6570\u53ea\u80fd\u901a\u8fc7\u5173\u952e\u5b57\u7684\u65b9\u5f0f\u4f20\u9012\u3002\u8fd9\u6837\u8bbe\u7f6e\u7684\u610f\u4e49\u901a\u5e38\u5728\u4e8e\uff1a \u540e\u9762\u51e0\u4e2a\u5f62\u53c2\u5177\u6709\u660e\u663e\u7684\u542b\u4e49\uff0c\u663e\u5f0f\u5199\u51fa\u6709\u5229\u4e8e\u53ef\u8bfb\u6027\uff1b \u540e\u9762\u51e0\u4e2a\u5f62\u53c2\u968f\u7248\u672c\u53d8\u5316\uff0c\u5f3a\u5236\u5173\u952e\u5b57\u5f62\u5f0f\u6709\u5229\u4e8e\u517c\u5bb9\u6027\u3002 1 2 3 # example: c, d are keyword-only parameters def printer ( a , b = 3 , * , c , d ): print ( a , b , c , d ) \u2462 \u7279\u6b8a\u5f62\u53c2\uff1a\u53ef\u53d8\u53c2\u6570 * args \u2003 * args \u7684\u661f\u53f7\u4e0e\u9650\u5b9a\u5173\u952e\u5b57\u53c2\u6570\u7684\u661f\u53f7\u5360\u540c\u4e00\u4f4d\u7f6e\uff0c\u5b83\u8d1f\u8d23\u63a5\u6536\u8c03\u7528\u65f6\u628a\u9650\u5b9a\u4f4d\u7f6e\u5f62\u53c2\u548c\u666e\u901a\u5f62\u53c2\u90fd\u5339\u914d\u5b8c\u540e\u5269\u4f59\u7684\u4f4d\u7f6e\u5b9e\u53c2\u3002\u63a5\u6536\u7684\u65b9\u5f0f\u662f\u628a\u8fd9\u4e9b\u5269\u4e0b\u7684\u53c2\u6570\u5c01\u88c5\u6210\u4e00\u4e2a\u5143\u7ec4\uff0c\u5728\u51fd\u6570\u5185\u53ef\u901a\u8fc7\u53d8\u91cf args \u4f7f\u7528\u5b83\u3002\u5982\u679c\u672a\u63a5\u6536\u5230\u503c\uff0c\u90a3\u4e48 args \u662f\u4e00\u4e2a\u7a7a\u5143\u7ec4\u3002 \u2003\u5982\u679c\u5e0c\u671b\u5b83\u53ef\u4ee5\u63a5\u6536\u5230\u53c2\u6570\uff0c\u524d\u9762\u7684\u6240\u6709\u666e\u901a\u5f62\u53c2\u90fd\u8981\u6309\u4f4d\u7f6e\u4f20\u9012\uff0c\u5426\u5219\u8c03\u7528\u7684\u5b9e\u53c2\u4f1a\u51fa\u73b0\u5173\u952e\u5b57\u5b9e\u53c2\u524d\u4e8e\u4f4d\u7f6e\u5b9e\u53c2\uff1b\u5982\u679c\u5ffd\u7565 *args \uff0c\u666e\u901a\u5f62\u53c2\u4f9d\u7136\u53ef\u4ee5\u517c\u5bb9\u5173\u952e\u5b57\u5f62\u5f0f\u3002 1 2 3 4 5 6 7 8 9 10 11 # example: d is keyword-only parameter def printer ( a , b , c = 10 , * args , d ): print ( a , b , c , d ) print ( args ) # demo: # called properly: args = (4, 5, 6) printer ( 1 , 2 , 3 , 4 , 5 , 6 , d = 7 ) # SyntaxError: positional argument follows keyword argument printer ( a = 1 , b = 2 , c = 3 , 4 , d = 7 ) \u2463 \u7279\u6b8a\u5f62\u53c2\uff1a\u53ef\u53d8\u53c2\u6570 ** kwargs \u2003 ** kwargs \u8d1f\u8d23\u63a5\u6536\u6240\u6709\u8c03\u7528\u65f6\u672a\u6210\u529f\u5339\u914d\u7684\u5173\u952e\u5b57\u5b9e\u53c2\uff0c\u76f8\u5f53\u4e8e\u5173\u952e\u5b57\u5b9e\u53c2\u7684\u53ef\u53d8\u53c2\u6570\uff0c\u5e76\u5c01\u88c5\u6210\u4e00\u4e2a\u5b57\u5178\uff0c\u53ef\u4ee5\u5728\u51fd\u6570\u5185\u901a\u8fc7\u53d8\u91cf kwargs \u4f7f\u7528\u5b83\u3002 \u2003\u8c03\u7528\u8005\u5982\u679c\u628a\u524d\u9762\u7684\u5173\u952e\u5b57\u53c2\u6570\u6253\u9519\uff0c\u76f8\u5e94\u7684\u53c2\u6570\u5c31\u4f1a\u88ab\u4f20\u8fdb kwargs \u9020\u6210\u9519\u8bef\uff0c\u7531\u4e8e kwargs \u7684\u81ea\u7531\u5ea6\u5f88\u9ad8\uff0c\u8bbe\u8ba1\u8005\u4f7f\u7528\u5b83\u65f6\u9700\u8c28\u614e\u3002 3. \u603b\u7ed3\uff1a\u4f20\u53c2\u89c4\u5219 * args \u4e0d\u5b58\u5728\u65f6 \u4f4d\u7f6e\u5b9e\u53c2\u6309\u4f4d\u7f6e\u4f20\u9012\u7ed9 * \u4e4b\u524d\u7684\u5f62\u53c2\uff0c\u4e14\u4f4d\u7f6e\u5b9e\u53c2\u7684\u4e2a\u6570\u4e0d\u591a\u4e8e\u9650\u5b9a\u4f4d\u7f6e\u5f62\u53c2\u548c\u666e\u901a\u5f62\u53c2\u4e4b\u548c \u5173\u952e\u5b57\u5b9e\u53c2\u5339\u914d\u5269\u4e0b\u7684\u4f4d\u7f6e\u5f62\u53c2\u548c\u9650\u5b9a\u5173\u952e\u5b57\u5f62\u53c2\uff0c\u591a\u4f59\u7684\u5173\u952e\u5b57\u5b9e\u53c2\u4f20\u5165 ** kwargs * args \u5b58\u5728\uff0c\u4e14 * args \u8981\u60f3\u83b7\u5f97\u503c \u4f4d\u7f6e\u5b9e\u53c2\u6309\u4f4d\u7f6e\u4f20\u9012\u7ed9 * args \u4e4b\u524d\u7684\u5f62\u53c2\uff0c\u4e14 * args \u524d\u6240\u6709\u7684\u5f62\u53c2\u90fd\u8981\u6309\u4f4d\u7f6e\u4f20\u9012 \u5173\u952e\u5b57\u5b9e\u53c2\u5339\u914d\u5269\u4e0b\u7684\u9650\u5b9a\u5173\u952e\u5b57\u5f62\u53c2\uff0c\u591a\u4f59\u7684\u5173\u952e\u5b57\u5b9e\u53c2\u4f20\u5165 ** kwargs 4. \u7279\u6b8a\u4f20\u53c2\u65b9\u6cd5 (1). \u5e8f\u5217\u89e3\u5305 \u5f53\u9700\u8981\u628a\u4e00\u4e2a\u5e8f\u5217\u7684\u5bf9\u8c61\u89e3\u653e\u51fa\u6765\uff0c\u4f5c\u4e3a\u51fd\u6570\u7684\u4f4d\u7f6e\u5b9e\u53c2\u4f20\u9012\uff0c\u53ef\u4ee5\u901a\u8fc7\u524d\u7f00 * \u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 def func ( a , b , c , / , x , y , * args , kw1 , kw2 , kw3 , ** kwargs ): pass # demo: list1 = [ 1 , 2 , 3 ] list2 = [ 4 , 5 , 6 ] func ( * list1 , 100 , * list2 , kw1 = 10 , kw2 = 11 , kw3 = 12 ) # result: # a = 1, b = 2, c = 3, x = 100, y = 4 # args = [5, 6], kwargs = {} (2). \u5b57\u5178\u89e3\u5305 \u5f53\u9700\u8981\u628a\u4e00\u4e2a\u5b57\u5178\u7684\u5bf9\u8c61\u89e3\u653e\u51fa\u6765\uff0c\u4f5c\u4e3a\u51fd\u6570\u7684\u5173\u952e\u5b57\u5b9e\u53c2\u4f20\u9012\uff0c\u53ef\u4ee5\u901a\u8fc7\u524d\u7f00 ** \u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 def func ( a , b , c , / , x , y , * args , kw1 , kw2 , kw3 , ** kwargs ): pass # demo: dict1 = { 'kw1' : 10 , 'kw2' : 11 } dict2 = { 'y' : 4 , 'kw3' : 12 , 'kw4' : 13 } func ( 1 , 2 , 3 , x = 100 , ** dict1 , ** dict2 ) # result: # a = 1, b = 2, c = 3, x = 100, y = 4 # args= [], kwargs = {'kw4': dict2['kw4']}","title":"2.Parameter Characteristics"},{"location":"3-Func/3.2/#1","text":"","title":"1. \u666e\u901a\u53c2\u6570"},{"location":"3-Func/3.2/#1_1","text":"Python \u4e2d\u7684\u5b9e\u53c2\u8868\u53ea\u6709\u7b80\u5355\u7684\u4e24\u4e2a\u90e8\u5206\uff1a \u2003\u2003\u2003\u2003 func (< \u4f4d\u7f6e\u5b9e\u53c2 >, < \u5173\u952e\u5b57\u5b9e\u53c2 >) \u8981\u6ce8\u610f\u4f4d\u7f6e\u5b9e\u53c2\u548c\u5f62\u53c2\u4e4b\u95f4\u8981\u4e25\u683c\u6309\u7167\u4e0a\u9762\u7684\u987a\u5e8f\uff0c\u4e14\u4e0d\u80fd\u4ea4\u9519\u3002 1 2 3 4 5 def printer ( name , age ): print ( name , age ) # demo print_property ( age = 2 , name = 'bob' ) \u5173\u952e\u5b57\u5b9e\u53c2\u7684\u610f\u4e49\u5728\u4e8e\uff1a\u2460 \u6446\u8131\u4f4d\u7f6e\u9650\u5236\uff1b\u2461 \u5f53\u9ed8\u8ba4\u53c2\u6570\u8f83\u591a\uff0c\u63d0\u5347\u6613\u7528\u6027\u548c\u53ef\u8bfb\u6027\u3002","title":"(1). \u5b9e\u53c2"},{"location":"3-Func/3.2/#2","text":"Python \u4e2d\u666e\u901a\u5f62\u53c2\u4e5f\u6709\u4e24\u4e2a\u90e8\u5206\uff1a \u2003\u2003\u2003\u2003 def func (< \u4f4d\u7f6e\u5b9e\u53c2 >, < \u9ed8\u8ba4\u5b9e\u53c2 >) \u5f53\u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570\u4f5c\u4e3a\u5f62\u53c2\uff0c\u5982\u679c\u8c03\u7528\u65f6\u6ca1\u6307\u660e\u8fd9\u4e2a\u53c2\u6570\uff0c\u5c31\u4f1a\u4f7f\u7528\u9ed8\u8ba4\u503c\u4f5c\u4e3a\u5176\u503c\u4f7f\u7528\uff1b\u5982\u679c\u6307\u660e\uff0c\u5c31\u4f7f\u7528\u5b9e\u53c2\u6307\u660e\u7684\u503c\u3002 1 2 3 4 5 def print_property ( name , age , gender = 'M' ) print ( name , age , gender ) print ( 'bob' , 10 ) print ( 'alice' , 10 , 'F' ) \u8fd9\u79cd\u673a\u5236\u7b80\u5316\u4e86\u51fd\u6570\u7684\u8c03\u7528\u3002\u5728\u4f7f\u7528\u65f6\u8981\u6ce8\u610f\u4ee5\u4e0b\u95ee\u9898\uff1a \u2460 \u51fd\u6570\u5b9a\u4e49\u65f6\uff0c\u540c\u5b9e\u53c2\u4e00\u6837\uff0c\u4f4d\u7f6e\u53c2\u6570\u5728\u524d\uff0c\u9ed8\u8ba4\u53c2\u6570\u5728\u540e\u3002 \u2461 \u51fd\u6570\u5728\u5b9a\u4e49\u65f6\uff0c\u9ed8\u8ba4\u53c2\u6570\u6307\u793a\u7684\u53d8\u91cf\u5c31\u88ab\u521d\u59cb\u5316\u4e86\uff0c\u800c\u4e0d\u662f\u5728\u6bcf\u6b21\u8c03\u7528\u65f6\u521d\u59cb\u5316\u3002\u56e0\u6b64\uff0c\u9ed8\u8ba4\u53c2\u6570\u5e94\u5c3d\u91cf\u4e3a\u4e0d\u53ef\u53d8\u5bf9\u8c61\u3002 Example : 1 2 3 4 def init_with_M ( L = []): L . append ( 'M' ) print ( L ) return L Solution : 1 2 3 4 5 6 def init_with_M ( L = None ): if L is None : L = [] L . append ( 'M' ) print ( L ) return L","title":"(2). \u5f62\u53c2"},{"location":"3-Func/3.2/#2_1","text":"Python \u4e2d\u5f62\u53c2\u8868\u53ef\u5206\u4e3a\u4e94\u4e2a\u90e8\u5206\uff1a \u2002 def func (< \u9650\u5b9a\u4f4d\u7f6e\u5f62\u53c2 >, < \u666e\u901a\u5f62\u53c2 >, < \u7279\u6b8a\u5f62\u53c2 args >, < \u9650\u5b9a\u5173\u952e\u5b57\u5f62\u53c2 >, < \u7279\u6b8a\u5f62\u53c2 kwargs >)","title":"2. \u5f62\u53c2\u7684\u9ad8\u7ea7\u53c2\u6570\u7279\u6027"},{"location":"3-Func/3.2/#1-position-only","text":"\u9650\u5236\u5f00\u5934\u51e0\u4e2a\u53c2\u6570\u53ea\u80fd\u901a\u8fc7\u4f4d\u7f6e\u800c\u4e0d\u80fd\u901a\u8fc7\u5173\u952e\u5b57\u4f20\u9012\uff0c\u5728 Python 3.8 \u4e2d\u6b63\u5f0f\u5f15\u5165\u3002 1 2 3 # example: a, b are positon-only parameters def printer ( a , b , / , c , d ): print ( a , b , c , d )","title":"\u2460 \u9650\u5b9a\u4f4d\u7f6e\u5f62\u53c2 (position-only)"},{"location":"3-Func/3.2/#2-keyword-only","text":"\u53c8\u53eb\u547d\u540d\u5173\u952e\u5b57\u53c2\u6570\uff0c\u9650\u5236\u540e\u9762\u51e0\u4e2a\u53c2\u6570\u53ea\u80fd\u901a\u8fc7\u5173\u952e\u5b57\u7684\u65b9\u5f0f\u4f20\u9012\u3002\u8fd9\u6837\u8bbe\u7f6e\u7684\u610f\u4e49\u901a\u5e38\u5728\u4e8e\uff1a \u540e\u9762\u51e0\u4e2a\u5f62\u53c2\u5177\u6709\u660e\u663e\u7684\u542b\u4e49\uff0c\u663e\u5f0f\u5199\u51fa\u6709\u5229\u4e8e\u53ef\u8bfb\u6027\uff1b \u540e\u9762\u51e0\u4e2a\u5f62\u53c2\u968f\u7248\u672c\u53d8\u5316\uff0c\u5f3a\u5236\u5173\u952e\u5b57\u5f62\u5f0f\u6709\u5229\u4e8e\u517c\u5bb9\u6027\u3002 1 2 3 # example: c, d are keyword-only parameters def printer ( a , b = 3 , * , c , d ): print ( a , b , c , d )","title":"\u2461 \u9650\u5b9a\u5173\u952e\u5b57\u5f62\u53c2 (keyword-only)"},{"location":"3-Func/3.2/#3-args","text":"* args \u7684\u661f\u53f7\u4e0e\u9650\u5b9a\u5173\u952e\u5b57\u53c2\u6570\u7684\u661f\u53f7\u5360\u540c\u4e00\u4f4d\u7f6e\uff0c\u5b83\u8d1f\u8d23\u63a5\u6536\u8c03\u7528\u65f6\u628a\u9650\u5b9a\u4f4d\u7f6e\u5f62\u53c2\u548c\u666e\u901a\u5f62\u53c2\u90fd\u5339\u914d\u5b8c\u540e\u5269\u4f59\u7684\u4f4d\u7f6e\u5b9e\u53c2\u3002\u63a5\u6536\u7684\u65b9\u5f0f\u662f\u628a\u8fd9\u4e9b\u5269\u4e0b\u7684\u53c2\u6570\u5c01\u88c5\u6210\u4e00\u4e2a\u5143\u7ec4\uff0c\u5728\u51fd\u6570\u5185\u53ef\u901a\u8fc7\u53d8\u91cf args \u4f7f\u7528\u5b83\u3002\u5982\u679c\u672a\u63a5\u6536\u5230\u503c\uff0c\u90a3\u4e48 args \u662f\u4e00\u4e2a\u7a7a\u5143\u7ec4\u3002 \u2003\u5982\u679c\u5e0c\u671b\u5b83\u53ef\u4ee5\u63a5\u6536\u5230\u53c2\u6570\uff0c\u524d\u9762\u7684\u6240\u6709\u666e\u901a\u5f62\u53c2\u90fd\u8981\u6309\u4f4d\u7f6e\u4f20\u9012\uff0c\u5426\u5219\u8c03\u7528\u7684\u5b9e\u53c2\u4f1a\u51fa\u73b0\u5173\u952e\u5b57\u5b9e\u53c2\u524d\u4e8e\u4f4d\u7f6e\u5b9e\u53c2\uff1b\u5982\u679c\u5ffd\u7565 *args \uff0c\u666e\u901a\u5f62\u53c2\u4f9d\u7136\u53ef\u4ee5\u517c\u5bb9\u5173\u952e\u5b57\u5f62\u5f0f\u3002 1 2 3 4 5 6 7 8 9 10 11 # example: d is keyword-only parameter def printer ( a , b , c = 10 , * args , d ): print ( a , b , c , d ) print ( args ) # demo: # called properly: args = (4, 5, 6) printer ( 1 , 2 , 3 , 4 , 5 , 6 , d = 7 ) # SyntaxError: positional argument follows keyword argument printer ( a = 1 , b = 2 , c = 3 , 4 , d = 7 )","title":"\u2462 \u7279\u6b8a\u5f62\u53c2\uff1a\u53ef\u53d8\u53c2\u6570 *args"},{"location":"3-Func/3.2/#4-kwargs","text":"** kwargs \u8d1f\u8d23\u63a5\u6536\u6240\u6709\u8c03\u7528\u65f6\u672a\u6210\u529f\u5339\u914d\u7684\u5173\u952e\u5b57\u5b9e\u53c2\uff0c\u76f8\u5f53\u4e8e\u5173\u952e\u5b57\u5b9e\u53c2\u7684\u53ef\u53d8\u53c2\u6570\uff0c\u5e76\u5c01\u88c5\u6210\u4e00\u4e2a\u5b57\u5178\uff0c\u53ef\u4ee5\u5728\u51fd\u6570\u5185\u901a\u8fc7\u53d8\u91cf kwargs \u4f7f\u7528\u5b83\u3002 \u2003\u8c03\u7528\u8005\u5982\u679c\u628a\u524d\u9762\u7684\u5173\u952e\u5b57\u53c2\u6570\u6253\u9519\uff0c\u76f8\u5e94\u7684\u53c2\u6570\u5c31\u4f1a\u88ab\u4f20\u8fdb kwargs \u9020\u6210\u9519\u8bef\uff0c\u7531\u4e8e kwargs \u7684\u81ea\u7531\u5ea6\u5f88\u9ad8\uff0c\u8bbe\u8ba1\u8005\u4f7f\u7528\u5b83\u65f6\u9700\u8c28\u614e\u3002","title":"\u2463 \u7279\u6b8a\u5f62\u53c2\uff1a\u53ef\u53d8\u53c2\u6570 **kwargs"},{"location":"3-Func/3.2/#3","text":"* args \u4e0d\u5b58\u5728\u65f6 \u4f4d\u7f6e\u5b9e\u53c2\u6309\u4f4d\u7f6e\u4f20\u9012\u7ed9 * \u4e4b\u524d\u7684\u5f62\u53c2\uff0c\u4e14\u4f4d\u7f6e\u5b9e\u53c2\u7684\u4e2a\u6570\u4e0d\u591a\u4e8e\u9650\u5b9a\u4f4d\u7f6e\u5f62\u53c2\u548c\u666e\u901a\u5f62\u53c2\u4e4b\u548c \u5173\u952e\u5b57\u5b9e\u53c2\u5339\u914d\u5269\u4e0b\u7684\u4f4d\u7f6e\u5f62\u53c2\u548c\u9650\u5b9a\u5173\u952e\u5b57\u5f62\u53c2\uff0c\u591a\u4f59\u7684\u5173\u952e\u5b57\u5b9e\u53c2\u4f20\u5165 ** kwargs * args \u5b58\u5728\uff0c\u4e14 * args \u8981\u60f3\u83b7\u5f97\u503c \u4f4d\u7f6e\u5b9e\u53c2\u6309\u4f4d\u7f6e\u4f20\u9012\u7ed9 * args \u4e4b\u524d\u7684\u5f62\u53c2\uff0c\u4e14 * args \u524d\u6240\u6709\u7684\u5f62\u53c2\u90fd\u8981\u6309\u4f4d\u7f6e\u4f20\u9012 \u5173\u952e\u5b57\u5b9e\u53c2\u5339\u914d\u5269\u4e0b\u7684\u9650\u5b9a\u5173\u952e\u5b57\u5f62\u53c2\uff0c\u591a\u4f59\u7684\u5173\u952e\u5b57\u5b9e\u53c2\u4f20\u5165 ** kwargs","title":"3. \u603b\u7ed3\uff1a\u4f20\u53c2\u89c4\u5219"},{"location":"3-Func/3.2/#4","text":"","title":"4. \u7279\u6b8a\u4f20\u53c2\u65b9\u6cd5"},{"location":"3-Func/3.2/#1_2","text":"\u5f53\u9700\u8981\u628a\u4e00\u4e2a\u5e8f\u5217\u7684\u5bf9\u8c61\u89e3\u653e\u51fa\u6765\uff0c\u4f5c\u4e3a\u51fd\u6570\u7684\u4f4d\u7f6e\u5b9e\u53c2\u4f20\u9012\uff0c\u53ef\u4ee5\u901a\u8fc7\u524d\u7f00 * \u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 def func ( a , b , c , / , x , y , * args , kw1 , kw2 , kw3 , ** kwargs ): pass # demo: list1 = [ 1 , 2 , 3 ] list2 = [ 4 , 5 , 6 ] func ( * list1 , 100 , * list2 , kw1 = 10 , kw2 = 11 , kw3 = 12 ) # result: # a = 1, b = 2, c = 3, x = 100, y = 4 # args = [5, 6], kwargs = {}","title":"(1). \u5e8f\u5217\u89e3\u5305"},{"location":"3-Func/3.2/#2_2","text":"\u5f53\u9700\u8981\u628a\u4e00\u4e2a\u5b57\u5178\u7684\u5bf9\u8c61\u89e3\u653e\u51fa\u6765\uff0c\u4f5c\u4e3a\u51fd\u6570\u7684\u5173\u952e\u5b57\u5b9e\u53c2\u4f20\u9012\uff0c\u53ef\u4ee5\u901a\u8fc7\u524d\u7f00 ** \u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 def func ( a , b , c , / , x , y , * args , kw1 , kw2 , kw3 , ** kwargs ): pass # demo: dict1 = { 'kw1' : 10 , 'kw2' : 11 } dict2 = { 'y' : 4 , 'kw3' : 12 , 'kw4' : 13 } func ( 1 , 2 , 3 , x = 100 , ** dict1 , ** dict2 ) # result: # a = 1, b = 2, c = 3, x = 100, y = 4 # args= [], kwargs = {'kw4': dict2['kw4']}","title":"(2). \u5b57\u5178\u89e3\u5305"},{"location":"3-Func/3.3/","text":"1. \u51fd\u6570\u5373\u5bf9\u8c61 \u5728 Python \u4e2d\uff0c\u51fd\u6570\u662f\u4e00\u7b49\u5bf9\u8c61\uff0c\u5373\uff1a \u5728\u8fd0\u884c\u65f6\u521b\u5efa\uff1b \u80fd\u8d4b\u503c\u7ed9\u53d8\u91cf\u6216\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u5143\u7d20\uff1b \u80fd\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\uff1b \u80fd\u4f5c\u4e3a\u51fd\u6570\u7684\u8fd4\u56de\u7ed3\u679c\u3002 \u63a5\u6536\u51fd\u6570\u4e3a\u53c2\u6570\uff0c\u6216\u8005\u628a\u51fd\u6570\u4f5c\u4e3a\u8fd4\u56de\u503c\u7684\u51fd\u6570\u662f\u9ad8\u9636\u51fd\u6570\u3002 Python \u5185\u7f6e\u4e86 map/reduce \u3001 filter \u3001 sorted \u7b49\u9ad8\u9636\u51fd\u6570\u3002\u5728 Python3 \u4e2d\uff0c\u7531\u4e8e\u5f15\u5165\u4e86\u5217\u8868\u751f\u6210\u5f0f\u548c\u751f\u6210\u5668\u8868\u8fbe\u5f0f\uff0c map \u548c filter \u7684\u91cd\u8981\u6027\u5df2\u88ab\u51cf\u5f31\u3002 (1). map( func , * iterables ) -> map object map \u628a\u4f20\u5165\u7684\u51fd\u6570\u4f5c\u7528\u4e8e\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a iterator 1 2 3 4 5 def f ( x ): return str ( x ) res = list ( map ( f , [ 1 , 2 , 3 ])) \u7531\u4e8e iterator \u662f\u4e00\u4e2a\u60f0\u6027\u5e8f\u5217\uff0c\u8fd8\u9700\u8981 list() \u628a\u6bcf\u4e2a\u5143\u7d20\u90fd\u8ba1\u7b97\u51fa\u6765\u3002 (2). reduce( func , sequence [..]) -> value func \u5fc5\u987b\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff0c\u5176\u6548\u679c\u76f8\u5f53\u4e8e\uff1a \u2003\u2003\u2003 reduce( f , [x1, x2, x3, x4]) = f ( f ( f (x1, x2), x3), x4) 1 2 3 4 5 6 7 from functools import reduce def f ( x , y ): return x * 10 + y res = reduce ( f , [ 1 , 2 , 3 , 4 , 5 ]) (3). filter( func , iterables ) -> filter object \u548c map \u7c7b\u4f3c\uff0c\u63a5\u6536\u51fd\u6570\u548c\u5e8f\u5217\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a iterator \u3002\u4e0d\u540c\u7684\u662f\uff0c filter \u6839\u636e\u51fd\u6570\u8fd4\u56de\u503c\u662f True/False \u5224\u65ad\u4fdd\u7559\u8fd8\u662f\u4e22\u5f03\u8be5\u5143\u7d20\u3002 1 2 3 4 5 def not_empty ( s ): return s and s . strip () res = list ( filter ( not_empty , [ 'A' , '' , None , 'D' ])) # res = ['A', 'D'] (4). sorted() sorted \u4e5f\u662f\u4e00\u4e2a\u9ad8\u9636\u51fd\u6570\uff0c\u5b83\u63d0\u4f9b\u4e00\u4e2a key \u51fd\u6570\u4f5c\u4e3a\u9ed8\u8ba4\u53c2\u6570\uff0c\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7684\u6392\u5e8f\uff1a 1 2 3 4 5 res1 = sorted ([ - 100 , 2 , 4 , - 3 ], key = abs ) # res1 = [2, -3, 4, -100] res2 = sorted ([ 'alice' , 'bob' , 'Zoom' , 'Course' ], key = str . lower ) # res2 = ['alice', 'bob', 'Course', 'Zoom'] 2. \u533f\u540d\u51fd\u6570 \u5728\u4f20\u5165\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u65f6\uff0c\u53ef\u4ee5\u4e0d\u663e\u5f0f\u5b9a\u4e49\u51fd\u6570\uff0c\u800c\u662f\u76f4\u63a5\u4f20\u5165\u533f\u540d\u51fd\u6570\uff1a 1 res = list ( filter ( lambda : x , y : x * y , [ 1 , 2 , 3 , 4 ])) \u533f\u540d\u51fd\u6570\u7684\u597d\u5904\u662f\u4e0d\u7528\u8003\u8651\u51fd\u6570\u540d\u51b2\u7a81\uff0c\u4f46\u5b83\u7684\u9650\u5236\u662f\u53ea\u80fd\u6709\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002 \u533f\u540d\u51fd\u6570\u4e00\u6837\u4e5f\u662f\u4e2a\u5bf9\u8c61\uff0c\u53ef\u4ee5\u8d4b\u503c\u7ed9\u53d8\u91cf\u3001\u4f5c\u4e3a\u8fd4\u56de\u503c\u8fd4\u56de\u3002 3. \u8fd4\u56de\u51fd\u6570\u4e0e\u95ed\u5305 (1). \u5d4c\u5957\u51fd\u6570 1 2 3 4 def prt ( msg ): def printer (): print ( msg ) printer () \u901a\u8fc7\u5d4c\u5957\u51fd\u6570\uff0c\u9ad8\u9636\u51fd\u6570\u652f\u6301\u51fd\u6570\u4f5c\u4e3a\u8fd4\u56de\u503c\u8fd4\u56de\uff0c\u4e3a\u7a0b\u5e8f\u63d0\u4f9b\u66f4\u5927\u7684\u7075\u6d3b\u6027\u3002 (2). \u95ed\u5305 \u2003\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c\u95ed\u5305\u662f\u8bcd\u6cd5\u95ed\u5305 ( lexical closure ) \u7684\u7b80\u79f0\uff0c\u662f\u6307\u5b9e\u73b0\u4e86\u51fd\u6570\u548c\u5176\u76f8\u5173\u7684\u73af\u5883 ( free variable ) \u7ed1\u5b9a\u5728\u4e00\u8d77\u7684\u6280\u672f\u3002\u5373\u4f7f\u51fd\u6570\u5728\u8fd9\u4e9b\u81ea\u7531\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u5916\u88ab\u8c03\u7528\uff0c\u5b83\u4f9d\u7136\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e9b\u81ea\u7531\u53d8\u91cf (\u503c\u6216\u5f15\u7528)\u3002 \u2003\u4f8b\u5982\uff0c\u5982\u679c\u8981\u5b9e\u73b0\u4e00\u4e2a\u8ba1\u7b97\u79fb\u52a8\u5e73\u5747\u503c\u7684\u51fd\u6570\uff0c\u666e\u901a\u7684\u65b9\u6cd5\u662f\u901a\u8fc7 OOP \u5b9e\u73b0\u5bf9\u6210\u5458\u7684\u8bb0\u5f55\uff0c\u66f4 pythonic \u7684\u529e\u6cd5\u662f\u4f7f\u7528\u95ed\u5305\u8bb0\u5f55\u72b6\u6001\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def get_averager () : count = 0 total = 0 def averager ( * vals ) : nonlocal count , total count += len ( vals ) total += sum ( vals ) return total / count return averager avg = get_averager () avg ( 1 , 2 , 3 , 4 , 5 , 6 ) print ( avg ( 7 )) # 4 print ( avg . __closure__ [ 1 ]. cell_contents ) # 28 \u5b9e\u9645\u4e0a\uff0c\u6240\u6709\u7684\u51fd\u6570\u90fd\u6709\u4e00\u4e2a __closure__ \u5c5e\u6027\u3002\u5982\u679c\u8fd9\u4e2a\u51fd\u6570\u662f\u4e00\u4e2a\u95ed\u5305\u51fd\u6570\u7684\u8bdd\uff0c\u90a3\u4e48 cell_contents \u4e2d\u5b58\u50a8\u7684\u5c31\u662f\u81ea\u7531\u53d8\u91cf\u3002 \u2003\u6ce8\u610f\u5230\uff0c\u7531\u4e8e\u4f5c\u7528\u57df\u7684\u95ee\u9898\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86 nonlocal \u5173\u952e\u5b57\u3002 (3). \u5faa\u73af\u53d8\u91cf \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd4\u56de\u7684\u51fd\u6570\u6ca1\u6709\u7acb\u523b\u6267\u884c\uff0c\u800c\u662f\u76f4\u5230\u8c03\u7528\u4e86\u624d\u88ab\u6267\u884c\uff1a 1 2 3 4 5 6 7 8 9 10 11 def get_square () : funcs = [] for i in range ( 1 , 4 ) : def square () : return i ** 2 funcs . append ( square ) return funcs sq1 , sq2 , sq3 = get_square () print ( sq1 () , sq2 () , sq3 ()) # 9 9 9 \u8fd4\u56de\u95ed\u5305\u51fd\u6570\u65f6\u4e00\u5b9a\u8981\u6ce8\u610f\u4e0d\u8981\u5f15\u7528\u5faa\u73af\u53d8\u91cf\u3002\u5982\u679c\u4e00\u5b9a\u8981\u5f15\u7528\uff0c\u53ef\u4ee5\u518d\u5d4c\u5957\u4e00\u4e2a\u51fd\u6570\u4fdd\u7559\u72b6\u6001\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 def get_square () : def reserve ( j ) : def square () : return j ** 2 return square funcs = [] for i in range ( 1 , 4 ) : funcs . append ( reserve ( i )) return funcs sq1 , sq2 , sq3 = get_square () print ( sq1 () , sq2 () , sq3 ()) # 1 , 4 , 9","title":"3.High-order Function"},{"location":"3-Func/3.3/#1","text":"\u5728 Python \u4e2d\uff0c\u51fd\u6570\u662f\u4e00\u7b49\u5bf9\u8c61\uff0c\u5373\uff1a \u5728\u8fd0\u884c\u65f6\u521b\u5efa\uff1b \u80fd\u8d4b\u503c\u7ed9\u53d8\u91cf\u6216\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u5143\u7d20\uff1b \u80fd\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\uff1b \u80fd\u4f5c\u4e3a\u51fd\u6570\u7684\u8fd4\u56de\u7ed3\u679c\u3002 \u63a5\u6536\u51fd\u6570\u4e3a\u53c2\u6570\uff0c\u6216\u8005\u628a\u51fd\u6570\u4f5c\u4e3a\u8fd4\u56de\u503c\u7684\u51fd\u6570\u662f\u9ad8\u9636\u51fd\u6570\u3002 Python \u5185\u7f6e\u4e86 map/reduce \u3001 filter \u3001 sorted \u7b49\u9ad8\u9636\u51fd\u6570\u3002\u5728 Python3 \u4e2d\uff0c\u7531\u4e8e\u5f15\u5165\u4e86\u5217\u8868\u751f\u6210\u5f0f\u548c\u751f\u6210\u5668\u8868\u8fbe\u5f0f\uff0c map \u548c filter \u7684\u91cd\u8981\u6027\u5df2\u88ab\u51cf\u5f31\u3002","title":"1. \u51fd\u6570\u5373\u5bf9\u8c61"},{"location":"3-Func/3.3/#1-mapfunc-42iterables-map-object","text":"map \u628a\u4f20\u5165\u7684\u51fd\u6570\u4f5c\u7528\u4e8e\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a iterator 1 2 3 4 5 def f ( x ): return str ( x ) res = list ( map ( f , [ 1 , 2 , 3 ])) \u7531\u4e8e iterator \u662f\u4e00\u4e2a\u60f0\u6027\u5e8f\u5217\uff0c\u8fd8\u9700\u8981 list() \u628a\u6bcf\u4e2a\u5143\u7d20\u90fd\u8ba1\u7b97\u51fa\u6765\u3002","title":"(1). map(func, *iterables) -&gt; map object"},{"location":"3-Func/3.3/#2-reducefunc-sequence-value","text":"func \u5fc5\u987b\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff0c\u5176\u6548\u679c\u76f8\u5f53\u4e8e\uff1a \u2003\u2003\u2003 reduce( f , [x1, x2, x3, x4]) = f ( f ( f (x1, x2), x3), x4) 1 2 3 4 5 6 7 from functools import reduce def f ( x , y ): return x * 10 + y res = reduce ( f , [ 1 , 2 , 3 , 4 , 5 ])","title":"(2). reduce(func, sequence[..]) -&gt; value"},{"location":"3-Func/3.3/#3-filterfunc-iterables-filter-object","text":"\u548c map \u7c7b\u4f3c\uff0c\u63a5\u6536\u51fd\u6570\u548c\u5e8f\u5217\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a iterator \u3002\u4e0d\u540c\u7684\u662f\uff0c filter \u6839\u636e\u51fd\u6570\u8fd4\u56de\u503c\u662f True/False \u5224\u65ad\u4fdd\u7559\u8fd8\u662f\u4e22\u5f03\u8be5\u5143\u7d20\u3002 1 2 3 4 5 def not_empty ( s ): return s and s . strip () res = list ( filter ( not_empty , [ 'A' , '' , None , 'D' ])) # res = ['A', 'D']","title":"(3). filter(func, iterables) -&gt; filter object"},{"location":"3-Func/3.3/#4-sorted","text":"sorted \u4e5f\u662f\u4e00\u4e2a\u9ad8\u9636\u51fd\u6570\uff0c\u5b83\u63d0\u4f9b\u4e00\u4e2a key \u51fd\u6570\u4f5c\u4e3a\u9ed8\u8ba4\u53c2\u6570\uff0c\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7684\u6392\u5e8f\uff1a 1 2 3 4 5 res1 = sorted ([ - 100 , 2 , 4 , - 3 ], key = abs ) # res1 = [2, -3, 4, -100] res2 = sorted ([ 'alice' , 'bob' , 'Zoom' , 'Course' ], key = str . lower ) # res2 = ['alice', 'bob', 'Course', 'Zoom']","title":"(4). sorted()"},{"location":"3-Func/3.3/#2","text":"\u5728\u4f20\u5165\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u65f6\uff0c\u53ef\u4ee5\u4e0d\u663e\u5f0f\u5b9a\u4e49\u51fd\u6570\uff0c\u800c\u662f\u76f4\u63a5\u4f20\u5165\u533f\u540d\u51fd\u6570\uff1a 1 res = list ( filter ( lambda : x , y : x * y , [ 1 , 2 , 3 , 4 ])) \u533f\u540d\u51fd\u6570\u7684\u597d\u5904\u662f\u4e0d\u7528\u8003\u8651\u51fd\u6570\u540d\u51b2\u7a81\uff0c\u4f46\u5b83\u7684\u9650\u5236\u662f\u53ea\u80fd\u6709\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002 \u533f\u540d\u51fd\u6570\u4e00\u6837\u4e5f\u662f\u4e2a\u5bf9\u8c61\uff0c\u53ef\u4ee5\u8d4b\u503c\u7ed9\u53d8\u91cf\u3001\u4f5c\u4e3a\u8fd4\u56de\u503c\u8fd4\u56de\u3002","title":"2. \u533f\u540d\u51fd\u6570"},{"location":"3-Func/3.3/#3","text":"","title":"3. \u8fd4\u56de\u51fd\u6570\u4e0e\u95ed\u5305"},{"location":"3-Func/3.3/#1_1","text":"1 2 3 4 def prt ( msg ): def printer (): print ( msg ) printer () \u901a\u8fc7\u5d4c\u5957\u51fd\u6570\uff0c\u9ad8\u9636\u51fd\u6570\u652f\u6301\u51fd\u6570\u4f5c\u4e3a\u8fd4\u56de\u503c\u8fd4\u56de\uff0c\u4e3a\u7a0b\u5e8f\u63d0\u4f9b\u66f4\u5927\u7684\u7075\u6d3b\u6027\u3002","title":"(1). \u5d4c\u5957\u51fd\u6570"},{"location":"3-Func/3.3/#2_1","text":"\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c\u95ed\u5305\u662f\u8bcd\u6cd5\u95ed\u5305 ( lexical closure ) \u7684\u7b80\u79f0\uff0c\u662f\u6307\u5b9e\u73b0\u4e86\u51fd\u6570\u548c\u5176\u76f8\u5173\u7684\u73af\u5883 ( free variable ) \u7ed1\u5b9a\u5728\u4e00\u8d77\u7684\u6280\u672f\u3002\u5373\u4f7f\u51fd\u6570\u5728\u8fd9\u4e9b\u81ea\u7531\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u5916\u88ab\u8c03\u7528\uff0c\u5b83\u4f9d\u7136\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e9b\u81ea\u7531\u53d8\u91cf (\u503c\u6216\u5f15\u7528)\u3002 \u2003\u4f8b\u5982\uff0c\u5982\u679c\u8981\u5b9e\u73b0\u4e00\u4e2a\u8ba1\u7b97\u79fb\u52a8\u5e73\u5747\u503c\u7684\u51fd\u6570\uff0c\u666e\u901a\u7684\u65b9\u6cd5\u662f\u901a\u8fc7 OOP \u5b9e\u73b0\u5bf9\u6210\u5458\u7684\u8bb0\u5f55\uff0c\u66f4 pythonic \u7684\u529e\u6cd5\u662f\u4f7f\u7528\u95ed\u5305\u8bb0\u5f55\u72b6\u6001\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def get_averager () : count = 0 total = 0 def averager ( * vals ) : nonlocal count , total count += len ( vals ) total += sum ( vals ) return total / count return averager avg = get_averager () avg ( 1 , 2 , 3 , 4 , 5 , 6 ) print ( avg ( 7 )) # 4 print ( avg . __closure__ [ 1 ]. cell_contents ) # 28 \u5b9e\u9645\u4e0a\uff0c\u6240\u6709\u7684\u51fd\u6570\u90fd\u6709\u4e00\u4e2a __closure__ \u5c5e\u6027\u3002\u5982\u679c\u8fd9\u4e2a\u51fd\u6570\u662f\u4e00\u4e2a\u95ed\u5305\u51fd\u6570\u7684\u8bdd\uff0c\u90a3\u4e48 cell_contents \u4e2d\u5b58\u50a8\u7684\u5c31\u662f\u81ea\u7531\u53d8\u91cf\u3002 \u2003\u6ce8\u610f\u5230\uff0c\u7531\u4e8e\u4f5c\u7528\u57df\u7684\u95ee\u9898\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86 nonlocal \u5173\u952e\u5b57\u3002","title":"(2). \u95ed\u5305"},{"location":"3-Func/3.3/#3_1","text":"\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd4\u56de\u7684\u51fd\u6570\u6ca1\u6709\u7acb\u523b\u6267\u884c\uff0c\u800c\u662f\u76f4\u5230\u8c03\u7528\u4e86\u624d\u88ab\u6267\u884c\uff1a 1 2 3 4 5 6 7 8 9 10 11 def get_square () : funcs = [] for i in range ( 1 , 4 ) : def square () : return i ** 2 funcs . append ( square ) return funcs sq1 , sq2 , sq3 = get_square () print ( sq1 () , sq2 () , sq3 ()) # 9 9 9 \u8fd4\u56de\u95ed\u5305\u51fd\u6570\u65f6\u4e00\u5b9a\u8981\u6ce8\u610f\u4e0d\u8981\u5f15\u7528\u5faa\u73af\u53d8\u91cf\u3002\u5982\u679c\u4e00\u5b9a\u8981\u5f15\u7528\uff0c\u53ef\u4ee5\u518d\u5d4c\u5957\u4e00\u4e2a\u51fd\u6570\u4fdd\u7559\u72b6\u6001\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 def get_square () : def reserve ( j ) : def square () : return j ** 2 return square funcs = [] for i in range ( 1 , 4 ) : funcs . append ( reserve ( i )) return funcs sq1 , sq2 , sq3 = get_square () print ( sq1 () , sq2 () , sq3 ()) # 1 , 4 , 9","title":"(3). \u5faa\u73af\u53d8\u91cf"},{"location":"3-Func/3.4/","text":"1. \u88c5\u9970\u5668 \u2003\u88c5\u9970\u5668\u5728\u8fd9\u91cc\u6307\u4e3a\u4e00\u4e2a\u51fd\u6570\u5305\u88c5\u4e00\u4e2a wrapper \uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u51fd\u6570\uff0c\u589e\u52a0\u4e00\u4e9b\u9644\u52a0\u529f\u80fd\u3002\u88c5\u9970\u5668\u5728 Python \u4e2d\u901a\u8fc7\u9ad8\u9636\u51fd\u6570\u5b9e\u73b0: \u5b9a\u4e49\u4e00\u4e2a\u88c5\u9970\u51fd\u6570\uff0c\u7136\u540e\u901a\u8fc7\u9ad8\u9636\u51fd\u6570\u8fd4\u56de\u3002\u5728 Python \u4e2d\u4e5f\u652f\u6301\u7c7b\u88c5\u9970\u5668\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def decorate ( func ): print ( \"decorated\" ) def inner ( * args , ** kwargs ): print ( 'additional function' ) return func ( * args , ** kwargs ) return inner def target1 ( time ): print ( 'target() is running' + str ( time )) @decorate def target2 ( time ): print ( 'target() is running' + str ( time )) print ( \"before\" ) target1 = decorate ( target1 ) target1 ( 1 ) target2 ( 1 ) target2 \u7684\u5199\u6cd5\u5373 python \u652f\u6301\u7684\u88c5\u9970\u5668\u7684\u8bed\u6cd5\uff0c\u5b83\u4e0e target1 \u7684\u5199\u6cd5\u6548\u679c\u662f\u4e00\u6837\u7684\uff0c\u533a\u522b\u5728\u4e8e\uff0c\u524d\u8005\u7684\u88c5\u9970\u51fd\u6570\u5728\u6a21\u5757\u5bfc\u5165\u800c\u975e\u8fd0\u884c\u65f6\u5c31\u6267\u884c\u4e86\u3002 \u88c5\u9970\u5668\u5e38\u5e38\u5728\u53e6\u4e00\u4e2a\u6a21\u5757\u4e2d\u5b9a\u4e49\u3002 2. \u4fdd\u7559\u5c5e\u6027 \u4f8b\uff1a\u901a\u8fc7\u88c5\u9970\u5668\u8ba1\u7b97\u51fd\u6570\u8fd0\u884c\u7684\u65f6\u95f4\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import time def clock ( func ): def clocked ( * args , ** kwargs ): start = time . perf_counter () res = func ( * args , ** kwargs ) stop = time . perf_counter () name = func . __name__ arg_str = ', ' . join ( repr ( arg ) for arg in args ) print ( '[ %0.8f s] %s ( %s ) -> %r ' % ( stop - start , name , arg_str , res )) return res return clocked @clock def fibonacci ( n ): if n < 3 : return 1 return fibonacci ( n - 1 ) + fibonacci ( n - 2 ) print ( fibonacci ( 5 )) print ( fibonacci . __name__ ) # clocked \u8fd9\u79cd\u5199\u6cd5\u7684\u7f3a\u70b9\u5728\u4e8e\uff0c\u88ab\u5305\u88c5\u7684\u51fd\u6570\u7684 __doc__ \u548c __name__ \u5c5e\u6027\u88ab\u88c5\u9970\u51fd\u6570\u906e\u76d6\u4e86\u3002\u53ef\u4ee5\u901a\u8fc7 functools.wraps \u628a\u76f8\u5173\u7684\u5c5e\u6027\u4ece fibonacci() \u590d\u5236\u5230 clocked() \u4e2d\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import functools def clock ( func ): @functools.wraps ( func ) def clocked ( * args , ** kwargs ): start = time . perf_counter () res = func ( * args , ** kwargs ) stop = time . perf_counter () name = func . __name__ arg_lst = [] if args : arg_lst . append ( ', ' . join ( repr ( arg ) for arg in args )) if kwargs : pairs = [ ' %s = %r ' % ( k , w ) for k , w in sorted ( kwargs . items ())] arg_lst . append ( ', ' . join ( pairs )) arg_str = ', ' . join ( arg_lst ) print ( '[ %0.8f s] %s ( %s ) -> %r ' % ( stop - start , name , arg_str , res )) return res return clocked 3. \u6807\u51c6\u5e93\u4e2d\u7684\u88c5\u9970\u5668 (1). functools.lru_cache functools.lru_cache(maxsize=128, typed=False) \u5b9e\u73b0\u4e86\u5907\u5fd8\u529f\u80fd\uff0c\u907f\u514d\u51fd\u6570\u4f20\u5165\u76f8\u540c\u53c2\u6570\u65f6\u8fdb\u884c\u7684\u91cd\u590d\u8ba1\u7b97\u3002 1 2 3 4 5 6 import functools @functoos.lru_cache () @clock def fibonacci ( n ): ... maxsize \u6307\u5b9a\u7f13\u5b58\u5927\u5c0f\uff0c\u5176\u503c\u5e94\u8bbe\u4e3a 2 \u7684\u5e42\uff1b typed \u5982\u679c\u8bbe\u4e3a True \uff0c\u4e0d\u540c\u53c2\u6570\u7c7b\u578b\u5f97\u5230\u7684\u7ed3\u679c\u4f1a\u88ab\u5206\u5f00\u4fdd\u5b58\u3002 (2). functools.singledispach \u4f8b\uff1a\u4e3a python \u5bf9\u8c61\u751f\u6210 html 1 2 3 4 5 6 7 import html def htmlize ( obj ): content = html . escape ( repr ( obj )) return '<pre>{}</pre>' . format ( content ) print ( htmlize ( '<1>' )) \u5982\u679c\u60f3\u505a\u4e00\u4e9b\u6269\u5c55\uff0c\u4f8b\u5982\u628a\u6574\u6570\u663e\u793a\u4e3a\u5341\u516d\u8fdb\u5236\uff0c\u6216\u662f\u66f4\u6539\u5b57\u7b26\u4e32\u7684\u6362\u884c\u7b26\uff0c\u7531\u4e8e python \u65e0\u6cd5\u50cf\u9759\u6001\u8bed\u8a00\u90a3\u6837\u652f\u6301\u51fd\u6570\u91cd\u8f7d\uff0c\u56e0\u6b64\u53ea\u80fd\u4f7f\u7528 if-else \u3002 Python3.4 \u4e2d\u589e\u52a0\u7684\u5355\u5206\u6d3e\u6cdb\u51fd\u6570\u6a21\u5757 functools.singledispatch \u53ef\u4ee5\u5f88\u597d\u5730\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 from functools import singledispatch import numbers import html @singledispatch def htmlize ( obj ): content = html . escape ( repr ( obj )) return '<pre>{}</pre>' . format ( content ) @htmlize.register ( str ) def _ ( text ): content = html . escape ( text ) . replace ( ' \\n ' , '<br> \\n ' ) return '<pre>{0}</pre>' . format ( content ) @htmlize.register ( numbers . Integral ) def _ ( n ): return '<pre>{0} (0x{0:x})</pre>' . format ( obj ) print ( htmlize ( 's \\n ' )) \u4f7f\u7528 @singledispatch \u88c5\u9970\u7684\u666e\u901a\u51fd\u6570\u4f1a\u53d8\u6210\u6cdb\u51fd\u6570 ( generic function )\uff1a\u6839\u636e\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\uff0c\u4ee5\u4e0d\u540c\u65b9\u5f0f\u6267\u884c\u76f8\u540c\u64cd\u4f5c\u7684\u4e00\u7ec4\u51fd\u6570: \u5355\u5206\u6d3e\uff1a\u6839\u636e\u5355\u4e00\u53c2\u6570\u5206\u6d3e\uff1b \u4e13\u95e8\u51fd\u6570\u7684\u540d\u79f0\u65e0\u5173\u7d27\u8981\uff0c\"_\" \u8db3\u591f\u7b80\u5355\uff1b \u4e13\u95e8\u51fd\u6570\u5e94\u8be5\u5904\u7406\u62bd\u8c61\u57fa\u7c7b (\u5982 numbers.Integral \u548c abc.MutableSequence )\uff0c\u4e0d\u8981\u5904\u7406\u5177\u4f53\u5b9e\u73b0 (\u5982 int \u548c list )\u3002\u8fd9\u6837\uff0c\u4ee3\u7801\u652f\u6301\u7684 \u517c\u5bb9\u7c7b\u578b\u66f4\u5e7f\u6cdb\u3002 4. \u88c5\u9970\u5668\u5176\u4ed6\u7279\u6027 (1). \u53e0\u52a0\u88c5\u9970\u5668 1 2 3 4 @d1 @d2 def f (): print ( 'f' ) \u7b49\u540c\u4e8e\uff1a 1 2 3 4 def f (): print ( 'f' ) f = d1 ( d2 ( f )) (2). \u88c5\u9970\u5668\u53c2\u6570 \u5982\u679c\u88c5\u9970\u5668\u672c\u8eab\u9700\u8981\u53c2\u6570\uff0c\u90a3\u4e48\u5c31\u8fd8\u9700\u8981\u4e00\u4e2a\u8fd4\u56de decorator \u7684\u9ad8\u9636\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def clock ( addition = '' ): def outer ( func ): @functools.wraps ( func ) def clocked ( * args , ** kwargs ): start = time . perf_counter () res = func ( * args , ** kwargs ) stop = time . perf_counter () name = func . __name__ arg_lst = [] if args : arg_lst . append ( ', ' . join ( repr ( arg ) for arg in args )) if kwargs : pairs = [ ' %s = %r ' % ( k , w ) for k , w in sorted ( kwargs . items ())] arg_lst . append ( ', ' . join ( pairs )) arg_str = ', ' . join ( arg_lst ) print ( '[ %0.8f s] %s ( %s ) -> %r%s ' % ( stop - start , name , arg_str , res , addition )) return res return clocked return outer","title":"4.Decorator"},{"location":"3-Func/3.4/#1","text":"\u88c5\u9970\u5668\u5728\u8fd9\u91cc\u6307\u4e3a\u4e00\u4e2a\u51fd\u6570\u5305\u88c5\u4e00\u4e2a wrapper \uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u51fd\u6570\uff0c\u589e\u52a0\u4e00\u4e9b\u9644\u52a0\u529f\u80fd\u3002\u88c5\u9970\u5668\u5728 Python \u4e2d\u901a\u8fc7\u9ad8\u9636\u51fd\u6570\u5b9e\u73b0: \u5b9a\u4e49\u4e00\u4e2a\u88c5\u9970\u51fd\u6570\uff0c\u7136\u540e\u901a\u8fc7\u9ad8\u9636\u51fd\u6570\u8fd4\u56de\u3002\u5728 Python \u4e2d\u4e5f\u652f\u6301\u7c7b\u88c5\u9970\u5668\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def decorate ( func ): print ( \"decorated\" ) def inner ( * args , ** kwargs ): print ( 'additional function' ) return func ( * args , ** kwargs ) return inner def target1 ( time ): print ( 'target() is running' + str ( time )) @decorate def target2 ( time ): print ( 'target() is running' + str ( time )) print ( \"before\" ) target1 = decorate ( target1 ) target1 ( 1 ) target2 ( 1 ) target2 \u7684\u5199\u6cd5\u5373 python \u652f\u6301\u7684\u88c5\u9970\u5668\u7684\u8bed\u6cd5\uff0c\u5b83\u4e0e target1 \u7684\u5199\u6cd5\u6548\u679c\u662f\u4e00\u6837\u7684\uff0c\u533a\u522b\u5728\u4e8e\uff0c\u524d\u8005\u7684\u88c5\u9970\u51fd\u6570\u5728\u6a21\u5757\u5bfc\u5165\u800c\u975e\u8fd0\u884c\u65f6\u5c31\u6267\u884c\u4e86\u3002 \u88c5\u9970\u5668\u5e38\u5e38\u5728\u53e6\u4e00\u4e2a\u6a21\u5757\u4e2d\u5b9a\u4e49\u3002","title":"1. \u88c5\u9970\u5668"},{"location":"3-Func/3.4/#2","text":"\u4f8b\uff1a\u901a\u8fc7\u88c5\u9970\u5668\u8ba1\u7b97\u51fd\u6570\u8fd0\u884c\u7684\u65f6\u95f4\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import time def clock ( func ): def clocked ( * args , ** kwargs ): start = time . perf_counter () res = func ( * args , ** kwargs ) stop = time . perf_counter () name = func . __name__ arg_str = ', ' . join ( repr ( arg ) for arg in args ) print ( '[ %0.8f s] %s ( %s ) -> %r ' % ( stop - start , name , arg_str , res )) return res return clocked @clock def fibonacci ( n ): if n < 3 : return 1 return fibonacci ( n - 1 ) + fibonacci ( n - 2 ) print ( fibonacci ( 5 )) print ( fibonacci . __name__ ) # clocked \u8fd9\u79cd\u5199\u6cd5\u7684\u7f3a\u70b9\u5728\u4e8e\uff0c\u88ab\u5305\u88c5\u7684\u51fd\u6570\u7684 __doc__ \u548c __name__ \u5c5e\u6027\u88ab\u88c5\u9970\u51fd\u6570\u906e\u76d6\u4e86\u3002\u53ef\u4ee5\u901a\u8fc7 functools.wraps \u628a\u76f8\u5173\u7684\u5c5e\u6027\u4ece fibonacci() \u590d\u5236\u5230 clocked() \u4e2d\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import functools def clock ( func ): @functools.wraps ( func ) def clocked ( * args , ** kwargs ): start = time . perf_counter () res = func ( * args , ** kwargs ) stop = time . perf_counter () name = func . __name__ arg_lst = [] if args : arg_lst . append ( ', ' . join ( repr ( arg ) for arg in args )) if kwargs : pairs = [ ' %s = %r ' % ( k , w ) for k , w in sorted ( kwargs . items ())] arg_lst . append ( ', ' . join ( pairs )) arg_str = ', ' . join ( arg_lst ) print ( '[ %0.8f s] %s ( %s ) -> %r ' % ( stop - start , name , arg_str , res )) return res return clocked","title":"2. \u4fdd\u7559\u5c5e\u6027"},{"location":"3-Func/3.4/#3","text":"","title":"3. \u6807\u51c6\u5e93\u4e2d\u7684\u88c5\u9970\u5668"},{"location":"3-Func/3.4/#1-functoolslru_cache","text":"functools.lru_cache(maxsize=128, typed=False) \u5b9e\u73b0\u4e86\u5907\u5fd8\u529f\u80fd\uff0c\u907f\u514d\u51fd\u6570\u4f20\u5165\u76f8\u540c\u53c2\u6570\u65f6\u8fdb\u884c\u7684\u91cd\u590d\u8ba1\u7b97\u3002 1 2 3 4 5 6 import functools @functoos.lru_cache () @clock def fibonacci ( n ): ... maxsize \u6307\u5b9a\u7f13\u5b58\u5927\u5c0f\uff0c\u5176\u503c\u5e94\u8bbe\u4e3a 2 \u7684\u5e42\uff1b typed \u5982\u679c\u8bbe\u4e3a True \uff0c\u4e0d\u540c\u53c2\u6570\u7c7b\u578b\u5f97\u5230\u7684\u7ed3\u679c\u4f1a\u88ab\u5206\u5f00\u4fdd\u5b58\u3002","title":"(1). functools.lru_cache"},{"location":"3-Func/3.4/#2-functoolssingledispach","text":"\u4f8b\uff1a\u4e3a python \u5bf9\u8c61\u751f\u6210 html 1 2 3 4 5 6 7 import html def htmlize ( obj ): content = html . escape ( repr ( obj )) return '<pre>{}</pre>' . format ( content ) print ( htmlize ( '<1>' )) \u5982\u679c\u60f3\u505a\u4e00\u4e9b\u6269\u5c55\uff0c\u4f8b\u5982\u628a\u6574\u6570\u663e\u793a\u4e3a\u5341\u516d\u8fdb\u5236\uff0c\u6216\u662f\u66f4\u6539\u5b57\u7b26\u4e32\u7684\u6362\u884c\u7b26\uff0c\u7531\u4e8e python \u65e0\u6cd5\u50cf\u9759\u6001\u8bed\u8a00\u90a3\u6837\u652f\u6301\u51fd\u6570\u91cd\u8f7d\uff0c\u56e0\u6b64\u53ea\u80fd\u4f7f\u7528 if-else \u3002 Python3.4 \u4e2d\u589e\u52a0\u7684\u5355\u5206\u6d3e\u6cdb\u51fd\u6570\u6a21\u5757 functools.singledispatch \u53ef\u4ee5\u5f88\u597d\u5730\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 from functools import singledispatch import numbers import html @singledispatch def htmlize ( obj ): content = html . escape ( repr ( obj )) return '<pre>{}</pre>' . format ( content ) @htmlize.register ( str ) def _ ( text ): content = html . escape ( text ) . replace ( ' \\n ' , '<br> \\n ' ) return '<pre>{0}</pre>' . format ( content ) @htmlize.register ( numbers . Integral ) def _ ( n ): return '<pre>{0} (0x{0:x})</pre>' . format ( obj ) print ( htmlize ( 's \\n ' )) \u4f7f\u7528 @singledispatch \u88c5\u9970\u7684\u666e\u901a\u51fd\u6570\u4f1a\u53d8\u6210\u6cdb\u51fd\u6570 ( generic function )\uff1a\u6839\u636e\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\uff0c\u4ee5\u4e0d\u540c\u65b9\u5f0f\u6267\u884c\u76f8\u540c\u64cd\u4f5c\u7684\u4e00\u7ec4\u51fd\u6570: \u5355\u5206\u6d3e\uff1a\u6839\u636e\u5355\u4e00\u53c2\u6570\u5206\u6d3e\uff1b \u4e13\u95e8\u51fd\u6570\u7684\u540d\u79f0\u65e0\u5173\u7d27\u8981\uff0c\"_\" \u8db3\u591f\u7b80\u5355\uff1b \u4e13\u95e8\u51fd\u6570\u5e94\u8be5\u5904\u7406\u62bd\u8c61\u57fa\u7c7b (\u5982 numbers.Integral \u548c abc.MutableSequence )\uff0c\u4e0d\u8981\u5904\u7406\u5177\u4f53\u5b9e\u73b0 (\u5982 int \u548c list )\u3002\u8fd9\u6837\uff0c\u4ee3\u7801\u652f\u6301\u7684 \u517c\u5bb9\u7c7b\u578b\u66f4\u5e7f\u6cdb\u3002","title":"(2). functools.singledispach"},{"location":"3-Func/3.4/#4","text":"","title":"4. \u88c5\u9970\u5668\u5176\u4ed6\u7279\u6027"},{"location":"3-Func/3.4/#1_1","text":"1 2 3 4 @d1 @d2 def f (): print ( 'f' ) \u7b49\u540c\u4e8e\uff1a 1 2 3 4 def f (): print ( 'f' ) f = d1 ( d2 ( f ))","title":"(1). \u53e0\u52a0\u88c5\u9970\u5668"},{"location":"3-Func/3.4/#2_1","text":"\u5982\u679c\u88c5\u9970\u5668\u672c\u8eab\u9700\u8981\u53c2\u6570\uff0c\u90a3\u4e48\u5c31\u8fd8\u9700\u8981\u4e00\u4e2a\u8fd4\u56de decorator \u7684\u9ad8\u9636\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def clock ( addition = '' ): def outer ( func ): @functools.wraps ( func ) def clocked ( * args , ** kwargs ): start = time . perf_counter () res = func ( * args , ** kwargs ) stop = time . perf_counter () name = func . __name__ arg_lst = [] if args : arg_lst . append ( ', ' . join ( repr ( arg ) for arg in args )) if kwargs : pairs = [ ' %s = %r ' % ( k , w ) for k , w in sorted ( kwargs . items ())] arg_lst . append ( ', ' . join ( pairs )) arg_str = ', ' . join ( arg_lst ) print ( '[ %0.8f s] %s ( %s ) -> %r%s ' % ( stop - start , name , arg_str , res , addition )) return res return clocked return outer","title":"(2). \u88c5\u9970\u5668\u53c2\u6570"},{"location":"4-OOP/4.1/","text":"1. import \u6bcf\u4e2a\u6a21\u5757\u5305\u542b\u4e00\u4e9b\u51fd\u6570\u5b9a\u4e49\u548c\u4e00\u90e8\u5206\u53ef\u6267\u884c\u4ee3\u7801\u3002\u5982\u679c\u5f53\u524d\u6587\u4ef6\u60f3\u4f7f\u7528\u53e6\u4e00\u4e2a py \u6a21\u5757\uff0c\u53ef\u4ee5\u4f7f\u7528 import \u8bed\u53e5\uff1a 1 2 3 import sys print ( sys . path ) \u5176\u683c\u5f0f\u4e3a import <module_name> \u6216 import <module_name> as <bias> \u3002 \u5728\u5bfc\u5165\u65f6\uff0c\u6bcf\u4e2a\u6a21\u5757\u5185\u7684\u811a\u672c\u5747\u4f1a\u88ab\u6267\u884c\u4e00\u6b21\uff1b \u4e0d\u7ba1\u6267\u884c\u591a\u5c11\u6b21 import \uff0c\u6bcf\u4e2a\u6a21\u5757\u53ea\u4f1a\u88ab\u6267\u884c\u4e00\u6b21\uff1b python \u89e3\u91ca\u5668\u5728\u641c\u7d22\u8def\u5f84 ( sys.path ) \u4e2d\u5bfb\u627e\u6307\u5b9a\u7684\u6a21\u5757\u3002\u641c\u7d22\u76ee\u5f55\u5305\u62ec\uff1a\u5f53\u524d\u76ee\u5f55\u3001 python \u5b89\u88c5\u65f6\u786e\u5b9a\u7684\u7cfb\u7edf\u8def\u5f84\u3001\u5e93\u5b89\u88c5\u65f6\u786e\u5b9a\u7684\u8def\u5f84\u3002 \u2003\u4f7f\u7528 import \uff0c\u6e90\u6a21\u5757\u7684\u547d\u540d\u7a7a\u95f4 (\u53d8\u91cf\u540d\u3001\u51fd\u6570\u540d) \u5e76\u6ca1\u6709\u5bfc\u5165\u5f53\u524d\u6a21\u5757\uff0c\u5982\u679c\u9700\u8981\u8bbf\u95ee\u53d8\u91cf\u6216\u4f7f\u7528\u51fd\u6570\uff0c\u9700\u8981\u901a\u8fc7 module.<name> \u7684\u5f62\u5f0f\u8bbf\u95ee\u3002 \u2003\u5982\u679c\u67d0\u4e2a\u51fd\u6570\u6216\u53d8\u91cf\u9700\u8981\u88ab\u7ecf\u5e38\u4f7f\u7528\uff0c\u53ef\u4ee5\u4e3a\u5b83\u8d4b\u4e00\u4e2a\u672c\u5730\u540d\u79f0\uff1a 1 2 3 4 import sys gettrace = sys . gettrace print ( gettrace ()) 2. from ... import \u53ef\u4ee5\u901a\u8fc7 from ... import \u5bfc\u5165\u6307\u5b9a\u7684\u90e8\u5206\u5230\u5f53\u524d\u7684\u7b26\u53f7\u8868\u4e2d\uff1a 1 from < module_name > import < arg_name1 > , < arg_name2 > , < func_name1 > , ... \u4f46\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u4f1a\u628a <module_name> \u5bfc\u5165\u5230\u5f53\u524d\u7684\u7b26\u53f7\u8868\u3002 \u6216\u8005\u76f4\u63a5\u5bfc\u5165\u5168\u90e8\u5185\u5bb9 (\u9664\u4e86\u4ee5\u5355\u4e00\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u540d\u5b57) 1 from < module_name > import * \u8fd9\u79cd\u65b9\u6cd5\u5e76\u4e0d\u5efa\u8bae\u9891\u7e41\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u5b58\u5728\u8986\u76d6\u5df2\u6709\u5b9a\u4e49\u7684\u98ce\u9669\u3002 3. __name__ \u5c5e\u6027 \u2003 Python \u4e2d\u6bcf\u4e2a\u6a21\u5757\u90fd\u6709\u4e00\u4e2a __name__ \u5c5e\u6027\u3002\u53ea\u6709\u5f53 py \u6587\u4ef6\u88ab\u5f53\u4f5c\u811a\u672c\u6267\u884c\u800c\u4e0d\u662f\u88ab\u5f53\u4f5c\u6a21\u5757\u5f15\u5165\u7684\u65f6\u5019\uff0c __name__ \u7684\u503c\u624d\u7b49\u4e8e '__main__' \u3002\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u7279\u6027\u6d4b\u8bd5\u6a21\u5757\u3002 1 2 3 ... if __name__ == '__main__' : # do the testing ... 4. Package \u2003 Python \u4e5f\u901a\u8fc7\u5305\u7ba1\u7406\u4e00\u4e2a\u9879\u76ee\u4e0d\u540c\u6a21\u5757\u7684\u547d\u540d\u7a7a\u95f4\u3002 \u2003\u4e00\u4e2a\u76ee\u5f55\u53ea\u6709\u5728\u5305\u542b\u4e00\u4e2a __init.py__ \u7684\u65f6\u5019\u624d\u4f1a\u88ab\u8ba4\u4e3a\u662f Python \u7684\u4e00\u4e2a Package \u3002\u5728\u5bfc\u5165\u4e00\u4e2a\u5305\u7684\u65f6\u5019\uff0c\u9996\u5148\u4f1a\u9ed8\u8ba4\u6267\u884c __init.py__ \u91cc\u7684\u4ee3\u7801\uff0c\u56e0\u6b64\u53ef\u4ee5\u5229\u7528 __init.py__ \u505a\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u5de5\u4f5c\uff0c\u4f8b\u5982\u5bfc\u5165\u4e00\u4e9b\u9ed8\u8ba4\u6a21\u5757\u3002 (1). \u5bfc\u5165\u65b9\u6cd5 1 2 3 import item.subitem.subsubitem item . subitem . subsubitem . func () \u2003\u4ee5\u4e0a\u9762\u7684\u4ee3\u7801\u4e3a\u4f8b\uff0c\u5982\u679c\u662f\u901a\u8fc7 import \u5bfc\u5165\uff0c\u524d\u9762\u7684\u6bcf\u4e00\u9879\u5fc5\u987b\u90fd\u662f\u5305\uff0c\u800c\u6700\u540e\u4e00\u9879 ( subsubitem ) \u53ef\u4ee5\u662f\u5305\u540d\u6216\u6a21\u5757\u540d ( py \u6587\u4ef6\u540d)\uff0c\u5e76\u4e14\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u5bfc\u5165\u7684\u6a21\u5757\u4e2d\u7684\u53d8\u91cf\u548c\u51fd\u6570\u5fc5\u987b\u901a\u8fc7\u5168\u540d\u4f7f\u7528\u3002 1 from package import item \u2003\u800c\u5982\u679c\u662f\u901a\u8fc7\u4e0a\u9762\u7684\u65b9\u5f0f\u5bfc\u5165\uff0c item \u53ef\u4ee5\u662f\u5b50\u5305\u3001\u6a21\u5757\u3001\u51fd\u6570\u6216\u53d8\u91cf\u7684\u540d\u5b57 (\u4e0d\u80fd\u5305\u542b \".\" )\u3002 \u2003\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4ee5\u4e0a\u4e24\u79cd\u65b9\u6cd5\u5982\u679c\u6700\u7ec8\u5bfc\u5165\u7684\u662f\u4e00\u4e2a\u5305\uff0c\u53ea\u662f\u76f8\u5f53\u4e8e\u6267\u884c\u76f8\u5e94\u5305\u4e2d\u7684 __init.py__ \uff0c\u800c\u6ca1\u6709\u5bfc\u5165\u76f8\u5e94\u5305\u4e2d\u7684\u5b50\u6a21\u5757\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \"\"\" example: . \u2514\u2500\u2500 mainpackage \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 s0.py \u251c\u2500\u2500 subpackage1 | \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 s1.py \u2514\u2500\u2500 subpackage2 \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 s2.py \u2514\u2500\u2500 s3.py \u2514\u2500\u2500 demo.py \"\"\" # in demo.py: import mainpackage.subpackage1 # invalid: mainpackage . subpackage1 . s1 . func () \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u53ea\u6709 subpackage1 \u7684 __init.py__ \u4e2d\u5bfc\u5165\u4e86 s1 \uff0c s1 \u7b26\u53f7\u8868\u624d\u80fd\u6210\u529f\u6dfb\u52a0\u5230 demo.py \u4e2d\uff0c\u4e0a\u9762\u7684\u8c03\u7528\u8bed\u53e5\u624d\u80fd\u751f\u6548\u3002 (2). from <package_name> import * \u2003\u7531\u4e8e Windows \u662f\u4e00\u4e2a\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u7684\u7cfb\u7edf\uff0c\u56e0\u6b64\uff0c\u5728\u4f7f\u7528 from <package_name> import * \u65f6\u9ed8\u8ba4\u4e0d\u4f1a\u5bfc\u5165\u4efb\u4f55\u5b50\u6a21\u5757\uff0c\u4e5f\u53ea\u662f\u76f8\u5f53\u4e8e (1) \u4e2d\u7684\u5bfc\u5165 __init.py__ \u800c\u5df2\u3002 \u2003\u5b9e\u9645\u4e0a\uff0c from <package_name> import * \u4f1a\u5bfc\u5165 <package_name> \u7684 __init.py__ \u4e2d\u7684\u5217\u8868\u53d8\u91cf __all__ \u5185\u7684\u6240\u6709\u540d\u5b57\u3002 \u2003\u5bf9\u4e8e (1) \u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u4f8b\u5b50\uff0c mainpackage \u53ef\u4ee5\u8fd9\u6837\u8bbe\u7f6e\uff1a 1 2 3 # __init.py__ of mainpackage __all__ = [ 'subpackage1' , 'subpackage2' , 's0' ] \u5c3d\u7ba1\u8fd9\u79cd\u5bfc\u5165\u65b9\u6cd5\u5f88\u65b9\u4fbf\uff0c\u4f46\u4ecd\u7136\u63a8\u8350 from <package_name> import <specific_module> (3). \u540c\u7ea7\u5bfc\u5165 \u6cbf\u7528 (1) \u4e2d\u7684\u4f8b\u5b50\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u907f\u514d\u4f7f\u7528\u7edd\u5bf9\u8def\u5f84\u5bfc\u5165\uff1a 1 2 # file: s2.py from . import s3 # eql: from mainpackage.subpackage2 import s3","title":"1.Module"},{"location":"4-OOP/4.1/#1-import","text":"\u6bcf\u4e2a\u6a21\u5757\u5305\u542b\u4e00\u4e9b\u51fd\u6570\u5b9a\u4e49\u548c\u4e00\u90e8\u5206\u53ef\u6267\u884c\u4ee3\u7801\u3002\u5982\u679c\u5f53\u524d\u6587\u4ef6\u60f3\u4f7f\u7528\u53e6\u4e00\u4e2a py \u6a21\u5757\uff0c\u53ef\u4ee5\u4f7f\u7528 import \u8bed\u53e5\uff1a 1 2 3 import sys print ( sys . path ) \u5176\u683c\u5f0f\u4e3a import <module_name> \u6216 import <module_name> as <bias> \u3002 \u5728\u5bfc\u5165\u65f6\uff0c\u6bcf\u4e2a\u6a21\u5757\u5185\u7684\u811a\u672c\u5747\u4f1a\u88ab\u6267\u884c\u4e00\u6b21\uff1b \u4e0d\u7ba1\u6267\u884c\u591a\u5c11\u6b21 import \uff0c\u6bcf\u4e2a\u6a21\u5757\u53ea\u4f1a\u88ab\u6267\u884c\u4e00\u6b21\uff1b python \u89e3\u91ca\u5668\u5728\u641c\u7d22\u8def\u5f84 ( sys.path ) \u4e2d\u5bfb\u627e\u6307\u5b9a\u7684\u6a21\u5757\u3002\u641c\u7d22\u76ee\u5f55\u5305\u62ec\uff1a\u5f53\u524d\u76ee\u5f55\u3001 python \u5b89\u88c5\u65f6\u786e\u5b9a\u7684\u7cfb\u7edf\u8def\u5f84\u3001\u5e93\u5b89\u88c5\u65f6\u786e\u5b9a\u7684\u8def\u5f84\u3002 \u2003\u4f7f\u7528 import \uff0c\u6e90\u6a21\u5757\u7684\u547d\u540d\u7a7a\u95f4 (\u53d8\u91cf\u540d\u3001\u51fd\u6570\u540d) \u5e76\u6ca1\u6709\u5bfc\u5165\u5f53\u524d\u6a21\u5757\uff0c\u5982\u679c\u9700\u8981\u8bbf\u95ee\u53d8\u91cf\u6216\u4f7f\u7528\u51fd\u6570\uff0c\u9700\u8981\u901a\u8fc7 module.<name> \u7684\u5f62\u5f0f\u8bbf\u95ee\u3002 \u2003\u5982\u679c\u67d0\u4e2a\u51fd\u6570\u6216\u53d8\u91cf\u9700\u8981\u88ab\u7ecf\u5e38\u4f7f\u7528\uff0c\u53ef\u4ee5\u4e3a\u5b83\u8d4b\u4e00\u4e2a\u672c\u5730\u540d\u79f0\uff1a 1 2 3 4 import sys gettrace = sys . gettrace print ( gettrace ())","title":"1. import"},{"location":"4-OOP/4.1/#2-from-import","text":"\u53ef\u4ee5\u901a\u8fc7 from ... import \u5bfc\u5165\u6307\u5b9a\u7684\u90e8\u5206\u5230\u5f53\u524d\u7684\u7b26\u53f7\u8868\u4e2d\uff1a 1 from < module_name > import < arg_name1 > , < arg_name2 > , < func_name1 > , ... \u4f46\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u4f1a\u628a <module_name> \u5bfc\u5165\u5230\u5f53\u524d\u7684\u7b26\u53f7\u8868\u3002 \u6216\u8005\u76f4\u63a5\u5bfc\u5165\u5168\u90e8\u5185\u5bb9 (\u9664\u4e86\u4ee5\u5355\u4e00\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u540d\u5b57) 1 from < module_name > import * \u8fd9\u79cd\u65b9\u6cd5\u5e76\u4e0d\u5efa\u8bae\u9891\u7e41\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u5b58\u5728\u8986\u76d6\u5df2\u6709\u5b9a\u4e49\u7684\u98ce\u9669\u3002","title":"2. from ... import"},{"location":"4-OOP/4.1/#3-9595name9595","text":"Python \u4e2d\u6bcf\u4e2a\u6a21\u5757\u90fd\u6709\u4e00\u4e2a __name__ \u5c5e\u6027\u3002\u53ea\u6709\u5f53 py \u6587\u4ef6\u88ab\u5f53\u4f5c\u811a\u672c\u6267\u884c\u800c\u4e0d\u662f\u88ab\u5f53\u4f5c\u6a21\u5757\u5f15\u5165\u7684\u65f6\u5019\uff0c __name__ \u7684\u503c\u624d\u7b49\u4e8e '__main__' \u3002\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u7279\u6027\u6d4b\u8bd5\u6a21\u5757\u3002 1 2 3 ... if __name__ == '__main__' : # do the testing ...","title":"3. __name__ \u5c5e\u6027"},{"location":"4-OOP/4.1/#4-package","text":"Python \u4e5f\u901a\u8fc7\u5305\u7ba1\u7406\u4e00\u4e2a\u9879\u76ee\u4e0d\u540c\u6a21\u5757\u7684\u547d\u540d\u7a7a\u95f4\u3002 \u2003\u4e00\u4e2a\u76ee\u5f55\u53ea\u6709\u5728\u5305\u542b\u4e00\u4e2a __init.py__ \u7684\u65f6\u5019\u624d\u4f1a\u88ab\u8ba4\u4e3a\u662f Python \u7684\u4e00\u4e2a Package \u3002\u5728\u5bfc\u5165\u4e00\u4e2a\u5305\u7684\u65f6\u5019\uff0c\u9996\u5148\u4f1a\u9ed8\u8ba4\u6267\u884c __init.py__ \u91cc\u7684\u4ee3\u7801\uff0c\u56e0\u6b64\u53ef\u4ee5\u5229\u7528 __init.py__ \u505a\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u5de5\u4f5c\uff0c\u4f8b\u5982\u5bfc\u5165\u4e00\u4e9b\u9ed8\u8ba4\u6a21\u5757\u3002","title":"4. Package"},{"location":"4-OOP/4.1/#1","text":"1 2 3 import item.subitem.subsubitem item . subitem . subsubitem . func () \u2003\u4ee5\u4e0a\u9762\u7684\u4ee3\u7801\u4e3a\u4f8b\uff0c\u5982\u679c\u662f\u901a\u8fc7 import \u5bfc\u5165\uff0c\u524d\u9762\u7684\u6bcf\u4e00\u9879\u5fc5\u987b\u90fd\u662f\u5305\uff0c\u800c\u6700\u540e\u4e00\u9879 ( subsubitem ) \u53ef\u4ee5\u662f\u5305\u540d\u6216\u6a21\u5757\u540d ( py \u6587\u4ef6\u540d)\uff0c\u5e76\u4e14\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u5bfc\u5165\u7684\u6a21\u5757\u4e2d\u7684\u53d8\u91cf\u548c\u51fd\u6570\u5fc5\u987b\u901a\u8fc7\u5168\u540d\u4f7f\u7528\u3002 1 from package import item \u2003\u800c\u5982\u679c\u662f\u901a\u8fc7\u4e0a\u9762\u7684\u65b9\u5f0f\u5bfc\u5165\uff0c item \u53ef\u4ee5\u662f\u5b50\u5305\u3001\u6a21\u5757\u3001\u51fd\u6570\u6216\u53d8\u91cf\u7684\u540d\u5b57 (\u4e0d\u80fd\u5305\u542b \".\" )\u3002 \u2003\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4ee5\u4e0a\u4e24\u79cd\u65b9\u6cd5\u5982\u679c\u6700\u7ec8\u5bfc\u5165\u7684\u662f\u4e00\u4e2a\u5305\uff0c\u53ea\u662f\u76f8\u5f53\u4e8e\u6267\u884c\u76f8\u5e94\u5305\u4e2d\u7684 __init.py__ \uff0c\u800c\u6ca1\u6709\u5bfc\u5165\u76f8\u5e94\u5305\u4e2d\u7684\u5b50\u6a21\u5757\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \"\"\" example: . \u2514\u2500\u2500 mainpackage \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 s0.py \u251c\u2500\u2500 subpackage1 | \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 s1.py \u2514\u2500\u2500 subpackage2 \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 s2.py \u2514\u2500\u2500 s3.py \u2514\u2500\u2500 demo.py \"\"\" # in demo.py: import mainpackage.subpackage1 # invalid: mainpackage . subpackage1 . s1 . func () \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u53ea\u6709 subpackage1 \u7684 __init.py__ \u4e2d\u5bfc\u5165\u4e86 s1 \uff0c s1 \u7b26\u53f7\u8868\u624d\u80fd\u6210\u529f\u6dfb\u52a0\u5230 demo.py \u4e2d\uff0c\u4e0a\u9762\u7684\u8c03\u7528\u8bed\u53e5\u624d\u80fd\u751f\u6548\u3002","title":"(1). \u5bfc\u5165\u65b9\u6cd5"},{"location":"4-OOP/4.1/#2-from-package_name-import","text":"\u7531\u4e8e Windows \u662f\u4e00\u4e2a\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u7684\u7cfb\u7edf\uff0c\u56e0\u6b64\uff0c\u5728\u4f7f\u7528 from <package_name> import * \u65f6\u9ed8\u8ba4\u4e0d\u4f1a\u5bfc\u5165\u4efb\u4f55\u5b50\u6a21\u5757\uff0c\u4e5f\u53ea\u662f\u76f8\u5f53\u4e8e (1) \u4e2d\u7684\u5bfc\u5165 __init.py__ \u800c\u5df2\u3002 \u2003\u5b9e\u9645\u4e0a\uff0c from <package_name> import * \u4f1a\u5bfc\u5165 <package_name> \u7684 __init.py__ \u4e2d\u7684\u5217\u8868\u53d8\u91cf __all__ \u5185\u7684\u6240\u6709\u540d\u5b57\u3002 \u2003\u5bf9\u4e8e (1) \u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u4f8b\u5b50\uff0c mainpackage \u53ef\u4ee5\u8fd9\u6837\u8bbe\u7f6e\uff1a 1 2 3 # __init.py__ of mainpackage __all__ = [ 'subpackage1' , 'subpackage2' , 's0' ] \u5c3d\u7ba1\u8fd9\u79cd\u5bfc\u5165\u65b9\u6cd5\u5f88\u65b9\u4fbf\uff0c\u4f46\u4ecd\u7136\u63a8\u8350 from <package_name> import <specific_module>","title":"(2). from &lt;package_name&gt; import *"},{"location":"4-OOP/4.1/#3","text":"\u6cbf\u7528 (1) \u4e2d\u7684\u4f8b\u5b50\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u907f\u514d\u4f7f\u7528\u7edd\u5bf9\u8def\u5f84\u5bfc\u5165\uff1a 1 2 # file: s2.py from . import s3 # eql: from mainpackage.subpackage2 import s3","title":"(3). \u540c\u7ea7\u5bfc\u5165"},{"location":"4-OOP/4.2/","text":"1. \u521b\u5efa\u7c7b \u5728 Python \u4e2d\uff0c\u901a\u8fc7 class \u5173\u952e\u5b57\u5b9a\u4e49\u4e00\u4e2a\u7c7b\uff0c\u7c7b\u540d\u901a\u5e38\u4f7f\u7528\u5927\u9a7c\u5cf0\u547d\u540d\u6cd5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 class Teemo ( object ): weapon = 'arrow' def __init__ ( self , mushrooms = 3 ): self . name = 'Teemo' self . mushrooms = mushrooms def put_mushrooms ( self , n = 1 ): if self . mushrooms > n : self . mushrooms -= n return True \u5728 Python3 \u4e2d\uff0c class Name( object ): \u4e0e class Name(): \u548c class Name: \u7b49\u4ef7\uff0c\u90fd\u4ee3\u8868\u7ee7\u627f\u9ed8\u8ba4\u7684\u57fa\u7c7b object \u3002 2. \u5c5e\u6027\u4e0e\u8bbf\u95ee\u9650\u5236 (1). \u5b9e\u4f8b\u5c5e\u6027 \u2003\u4e00\u822c\u5728\u6784\u9020\u51fd\u6570 def __init__( self , ...) \u4e2d\u628a\u7c7b\u7684\u5c5e\u6027\u7ed1\u5b9a\u5230 self \u4e0a\uff0c\u4e5f\u53ef\u4ee5\u5728\u6784\u9020\u51fd\u6570\u524d\u58f0\u660e\u3002\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u7c7b\u7684\u6210\u5458\u90fd\u662f public \u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u4e0b\u5212\u7ebf\u5b9e\u73b0 private \uff1a 1 2 3 4 ... def __init__ ( self , mushrooms = 3 ): self . __name = 'Teemo' self . __mushrooms = mushrooms \u2003\u5c3d\u7ba1\u53d8\u91cf\u88ab\u8bbe\u7f6e\u4e3a\u79c1\u6709\uff0c\u4f46\u4ecd\u53ef\u4ee5\u901a\u8fc7 instance._Teemo__name \u7684\u65b9\u5f0f\u8bbf\u95ee\uff0c Python \u5e76\u4e0d\u963b\u6b62\u8bbf\u95ee\u8005\u505a\u574f\u4e8b\u3002 \u2003\u5728 Python \u4e2d\uff0c\u5f62\u5982 __ <arg_name> __ \u7684\u53d8\u91cf\u662f\u7279\u6b8a\u53d8\u91cf\uff0c\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\uff1b\u5f62\u5982 _ <arg_name> \u7684\u53d8\u91cf\u4ee3\u8868 \u201c\u867d\u7136\u6211\u53ef\u4ee5\u88ab\u8bbf\u95ee\uff0c\u4f46\u8bf7\u628a\u6211\u89c6\u4e3a\u79c1\u6709\u53d8\u91cf\uff0c\u4e0d\u8981\u968f\u610f\u8bbf\u95ee\u201d\u3002 (2). \u7c7b\u5c5e\u6027 \u2003\u5728 __init__ \u524d\u5b9a\u4e49\u7684\u53d8\u91cf\u4e3a\u7c7b\u53d8\u91cf\u3002\u7c7b\u53d8\u91cf\u53ea\u80fd\u901a\u8fc7\u7c7b\u540d\u8bbf\u95ee\uff0c\u5982\u679c\u901a\u8fc7\u5bf9\u8c61\u8bbf\u95ee\uff0c\u5728 python \u4e2d\u76f8\u5f53\u4e8e\u52a8\u6001\u6dfb\u52a0\u4e86\u4e00\u4e2a\u5b9e\u4f8b\u5c5e\u6027\u3002 3. \u65b9\u6cd5 \u2003\u7c7b\u7684\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u663e\u5f0f\u58f0\u660e\u4e3a self (\u4e5f\u53ef\u4ee5\u662f this \uff0c\u4f46\u901a\u5e38\u7528 self )\uff0c\u8868\u793a\u8fd9\u4e2a\u5bf9\u8c61\u3002 \u2003\u79c1\u6709\u65b9\u6cd5\u4e5f\u901a\u8fc7\u6dfb\u52a0\u53cc\u4e0b\u5212\u7ebf\u524d\u7f00\u5b9e\u73b0\uff1a 1 2 3 def __skill_r ( self , n = 1 ): if self . mushrooms > n : self . mushrooms -= n \u7c7b\u4f3c\u5730\uff0c\u79c1\u6709\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u901a\u8fc7 instance._< class_name >__< method > \u8bbf\u95ee\u3002 4. \u52a8\u6001\u6dfb\u52a0 \u4f5c\u4e3a\u4e00\u95e8\u52a8\u6001\u8bed\u8a00\uff0c Python \u652f\u6301\u52a8\u6001\u6dfb\u52a0\u5c5e\u6027\u548c\u65b9\u6cd5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 import types class ... def flash ( self ): print ( self . _Teemo__name + ' flashed' ) def tp ( self ): print ( self . _Teemo__name + ' transfered' ) def run ( self ): print ( self . _Teemo__name + ' ran' ) hero = Teemo ( 20 ) # \u52a8\u6001\u6dfb\u52a0\u5b9e\u4f8b\u5c5e\u6027 hero . enemy = 'Fizz' # \u52a8\u6001\u6dfb\u52a0\u7c7b\u5c5e\u6027 Teemo . partner = 'Tristana' # \u52a8\u6001\u6dfb\u52a0\u5b9e\u4f8b\u65b9\u6cd5 # \u65b9\u5f0f\u4e00: \u9700\u8981\u6dfb\u52a0\u53c2\u6570 hero . flash = flash hero . flash ( hero ) # \u65b9\u5f0f\u4e8c hero . run = types . MethodType ( run , hero ) hero . run () # \u52a8\u6001\u6dfb\u52a0\u7c7b\u65b9\u6cd5 Teemo . tp = tp hero . tp () \u6b64\u5916\uff0c\u8fd8\u9700\u8981\u6ce8\u610f\uff1a \u52a8\u6001\u6dfb\u52a0\u5c5e\u6027 __< attribute > \u662f\u65e0\u6cd5\u4f5c\u4e3a\u539f\u7c7b\u7684\u79c1\u6709\u53d8\u91cf\uff1b \u5f53\u7c7b\u5c5e\u6027\u548c\u5b9e\u4f8b\u5c5e\u6027\u540c\u540d\uff0c\u8bbf\u95ee\u65f6\u7c7b\u5c5e\u6027\u4f1a\u8986\u76d6\u5b9e\u4f8b\u5c5e\u6027\u3002 5. \u51fd\u6570\u91cd\u8f7d \u2003\u51fd\u6570\u7684\u91cd\u8f7d\u662f\u4e3a\u4e86\u6446\u8131\u9759\u6001\u8bed\u8a00\u5bf9\u4e8e\u53c2\u6570\u7684\u9650\u5236\u7684\u4e00\u79cd\u529e\u6cd5 (\u5982 Java )\u3002 Python \u4f5c\u4e3a\u4e00\u95e8\u52a8\u6001\u7c7b\u578b\u8bed\u8a00\uff0c\u51fd\u6570\u7684\u53c2\u6570\u6ca1\u6709\u7c7b\u578b\u9650\u5236\u4e14\u5e26\u6709\u9ed8\u8ba4\u53c2\u6570\u7b49\u529f\u80fd\uff0c\u56e0\u800c\u4e0d\u9700\u8981\u51fd\u6570\u7684\u91cd\u8f7d\u3002","title":"2.Class and Instance"},{"location":"4-OOP/4.2/#1","text":"\u5728 Python \u4e2d\uff0c\u901a\u8fc7 class \u5173\u952e\u5b57\u5b9a\u4e49\u4e00\u4e2a\u7c7b\uff0c\u7c7b\u540d\u901a\u5e38\u4f7f\u7528\u5927\u9a7c\u5cf0\u547d\u540d\u6cd5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 class Teemo ( object ): weapon = 'arrow' def __init__ ( self , mushrooms = 3 ): self . name = 'Teemo' self . mushrooms = mushrooms def put_mushrooms ( self , n = 1 ): if self . mushrooms > n : self . mushrooms -= n return True \u5728 Python3 \u4e2d\uff0c class Name( object ): \u4e0e class Name(): \u548c class Name: \u7b49\u4ef7\uff0c\u90fd\u4ee3\u8868\u7ee7\u627f\u9ed8\u8ba4\u7684\u57fa\u7c7b object \u3002","title":"1. \u521b\u5efa\u7c7b"},{"location":"4-OOP/4.2/#2","text":"","title":"2. \u5c5e\u6027\u4e0e\u8bbf\u95ee\u9650\u5236"},{"location":"4-OOP/4.2/#1_1","text":"\u4e00\u822c\u5728\u6784\u9020\u51fd\u6570 def __init__( self , ...) \u4e2d\u628a\u7c7b\u7684\u5c5e\u6027\u7ed1\u5b9a\u5230 self \u4e0a\uff0c\u4e5f\u53ef\u4ee5\u5728\u6784\u9020\u51fd\u6570\u524d\u58f0\u660e\u3002\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u7c7b\u7684\u6210\u5458\u90fd\u662f public \u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u4e0b\u5212\u7ebf\u5b9e\u73b0 private \uff1a 1 2 3 4 ... def __init__ ( self , mushrooms = 3 ): self . __name = 'Teemo' self . __mushrooms = mushrooms \u2003\u5c3d\u7ba1\u53d8\u91cf\u88ab\u8bbe\u7f6e\u4e3a\u79c1\u6709\uff0c\u4f46\u4ecd\u53ef\u4ee5\u901a\u8fc7 instance._Teemo__name \u7684\u65b9\u5f0f\u8bbf\u95ee\uff0c Python \u5e76\u4e0d\u963b\u6b62\u8bbf\u95ee\u8005\u505a\u574f\u4e8b\u3002 \u2003\u5728 Python \u4e2d\uff0c\u5f62\u5982 __ <arg_name> __ \u7684\u53d8\u91cf\u662f\u7279\u6b8a\u53d8\u91cf\uff0c\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\uff1b\u5f62\u5982 _ <arg_name> \u7684\u53d8\u91cf\u4ee3\u8868 \u201c\u867d\u7136\u6211\u53ef\u4ee5\u88ab\u8bbf\u95ee\uff0c\u4f46\u8bf7\u628a\u6211\u89c6\u4e3a\u79c1\u6709\u53d8\u91cf\uff0c\u4e0d\u8981\u968f\u610f\u8bbf\u95ee\u201d\u3002","title":"(1). \u5b9e\u4f8b\u5c5e\u6027"},{"location":"4-OOP/4.2/#2_1","text":"\u5728 __init__ \u524d\u5b9a\u4e49\u7684\u53d8\u91cf\u4e3a\u7c7b\u53d8\u91cf\u3002\u7c7b\u53d8\u91cf\u53ea\u80fd\u901a\u8fc7\u7c7b\u540d\u8bbf\u95ee\uff0c\u5982\u679c\u901a\u8fc7\u5bf9\u8c61\u8bbf\u95ee\uff0c\u5728 python \u4e2d\u76f8\u5f53\u4e8e\u52a8\u6001\u6dfb\u52a0\u4e86\u4e00\u4e2a\u5b9e\u4f8b\u5c5e\u6027\u3002","title":"(2). \u7c7b\u5c5e\u6027"},{"location":"4-OOP/4.2/#3","text":"\u7c7b\u7684\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u663e\u5f0f\u58f0\u660e\u4e3a self (\u4e5f\u53ef\u4ee5\u662f this \uff0c\u4f46\u901a\u5e38\u7528 self )\uff0c\u8868\u793a\u8fd9\u4e2a\u5bf9\u8c61\u3002 \u2003\u79c1\u6709\u65b9\u6cd5\u4e5f\u901a\u8fc7\u6dfb\u52a0\u53cc\u4e0b\u5212\u7ebf\u524d\u7f00\u5b9e\u73b0\uff1a 1 2 3 def __skill_r ( self , n = 1 ): if self . mushrooms > n : self . mushrooms -= n \u7c7b\u4f3c\u5730\uff0c\u79c1\u6709\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u901a\u8fc7 instance._< class_name >__< method > \u8bbf\u95ee\u3002","title":"3. \u65b9\u6cd5"},{"location":"4-OOP/4.2/#4","text":"\u4f5c\u4e3a\u4e00\u95e8\u52a8\u6001\u8bed\u8a00\uff0c Python \u652f\u6301\u52a8\u6001\u6dfb\u52a0\u5c5e\u6027\u548c\u65b9\u6cd5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 import types class ... def flash ( self ): print ( self . _Teemo__name + ' flashed' ) def tp ( self ): print ( self . _Teemo__name + ' transfered' ) def run ( self ): print ( self . _Teemo__name + ' ran' ) hero = Teemo ( 20 ) # \u52a8\u6001\u6dfb\u52a0\u5b9e\u4f8b\u5c5e\u6027 hero . enemy = 'Fizz' # \u52a8\u6001\u6dfb\u52a0\u7c7b\u5c5e\u6027 Teemo . partner = 'Tristana' # \u52a8\u6001\u6dfb\u52a0\u5b9e\u4f8b\u65b9\u6cd5 # \u65b9\u5f0f\u4e00: \u9700\u8981\u6dfb\u52a0\u53c2\u6570 hero . flash = flash hero . flash ( hero ) # \u65b9\u5f0f\u4e8c hero . run = types . MethodType ( run , hero ) hero . run () # \u52a8\u6001\u6dfb\u52a0\u7c7b\u65b9\u6cd5 Teemo . tp = tp hero . tp () \u6b64\u5916\uff0c\u8fd8\u9700\u8981\u6ce8\u610f\uff1a \u52a8\u6001\u6dfb\u52a0\u5c5e\u6027 __< attribute > \u662f\u65e0\u6cd5\u4f5c\u4e3a\u539f\u7c7b\u7684\u79c1\u6709\u53d8\u91cf\uff1b \u5f53\u7c7b\u5c5e\u6027\u548c\u5b9e\u4f8b\u5c5e\u6027\u540c\u540d\uff0c\u8bbf\u95ee\u65f6\u7c7b\u5c5e\u6027\u4f1a\u8986\u76d6\u5b9e\u4f8b\u5c5e\u6027\u3002","title":"4. \u52a8\u6001\u6dfb\u52a0"},{"location":"4-OOP/4.2/#5","text":"\u51fd\u6570\u7684\u91cd\u8f7d\u662f\u4e3a\u4e86\u6446\u8131\u9759\u6001\u8bed\u8a00\u5bf9\u4e8e\u53c2\u6570\u7684\u9650\u5236\u7684\u4e00\u79cd\u529e\u6cd5 (\u5982 Java )\u3002 Python \u4f5c\u4e3a\u4e00\u95e8\u52a8\u6001\u7c7b\u578b\u8bed\u8a00\uff0c\u51fd\u6570\u7684\u53c2\u6570\u6ca1\u6709\u7c7b\u578b\u9650\u5236\u4e14\u5e26\u6709\u9ed8\u8ba4\u53c2\u6570\u7b49\u529f\u80fd\uff0c\u56e0\u800c\u4e0d\u9700\u8981\u51fd\u6570\u7684\u91cd\u8f7d\u3002","title":"5. \u51fd\u6570\u91cd\u8f7d"},{"location":"4-OOP/4.3/","text":"1. \u7ee7\u627f Python \u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5b9e\u73b0\u7ee7\u627f (\u5373\u83b7\u5f97\u7236\u7c7b\u7684\u5c5e\u6027\u548c\u65b9\u6cd5)\uff1a 1 2 3 4 5 6 7 8 9 10 11 class Mage ( object ): ap = 0 def increase_ap ( self ): self . ap += 1 class Teemo ( Mage ): ... def increase_ap ( self , amount ): self . ap += amount \u5982\u679c\u9700\u8981 Override \u7236\u7c7b\u7684\u65b9\u6cd5\uff0c\u53ea\u9700\u8981\u518d\u5b50\u7c7b\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u540c\u540d\u51fd\u6570\uff0c\u4e14\u53c2\u6570\u5217\u8868\u53ef\u4ee5\u4e0d\u540c\u3002 2. Duck Typing \u2003\"\u9e2d\u5b50\u7c7b\u578b\" \u6e90\u4e8e India \u8bd7\u4eba Riley \u7684\u4e00\u53e5\u8bd7\uff0c\u5728\u7a0b\u5e8f\u8bbe\u8ba1\u4e2d\uff0c\u5b83\u6307\u7684\u662f\u52a8\u6001\u7c7b\u578b\u8bed\u8a00\u548c\u67d0\u4e9b\u9759\u6001\u8bed\u8a00\u7684\u4e00\u79cd\u5bf9\u8c61\u63a8\u65ad\u7684\u98ce\u683c\u3002\u5728 Python \u4e2d\u7684\u4f53\u73b0\u662f\uff1a \u53d8\u91cf\u7ed1\u5b9a\u7684\u7c7b\u578b\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u51fd\u6570\u548c\u65b9\u6cd5\u53ef\u4ee5\u63a5\u53d7\u4efb\u4f55\u7c7b\u578b\u7684\u53c2\u6570\uff1b \u8c03\u7528\u662f\u5426\u6210\u529f\u7531\u53c2\u6570\u7684\u65b9\u6cd5\u548c\u5c5e\u6027\u800c\u4e0d\u662f\u7c7b\u578b\u786e\u5b9a\uff0c\u8c03\u7528\u4e0d\u6210\u529f\u5219\u629b\u51fa\u9519\u8bef\u3002 1 2 3 4 5 6 7 8 9 10 class LittleRedRidinghood ( object ): def put_mushroom ( self ): return True def attack ( teemo ): if teemo . put_mushroom (): print ( \"attack\" ) p = LittleRedRidinghood () attack ( p ) 3. \u591a\u7ee7\u627f\u4e0e MixIn Python \u652f\u6301\u591a\u7ee7\u627f 1 2 3 4 5 6 7 8 9 class Shooter ( object ): ad = 0 def increase_ad ( self ): self . ad += 1 class Teemo ( Mage , Shooter ): ... \u2003 MixIn \u662f\u4e00\u79cd\u7279\u6b8a\u7684\u591a\u91cd\u7ee7\u627f\uff0c\u5373\u5229\u7528\u591a\u91cd\u7ee7\u627f\u5b9e\u73b0\u4e3a\u4e00\u4e2a\u7c7b\u6269\u5c55\u529f\u80fd\u3002 \u2003\u4ee5\u591a\u5c42\u7ee7\u627f\u95ee\u9898\u4e3a\u4f8b\uff0c\u5f53\u4e00\u4e2a\u7c7b\u7684\u53d8\u5316\u6709\u591a\u4e2a\u7ef4\u5ea6\uff0c\u4e3a\u4e86\u907f\u514d\u8fc7\u591a\u7684\u7ee7\u627f\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528 MixIn \u7c7b\u4f5c\u4e3a\u529f\u80fd\u6a21\u5757\u8fdb\u884c\u6269\u5c55 (\u53e6\u4e00\u79cd\u529e\u6cd5\u662f\u4f7f\u7528\u6865\u63a5\u6a21\u5f0f)\uff1a 1 2 3 4 5 6 class RunnableMixIn ( object ): def run (): print ( \"running\" ) class Teemo ( Mage , Shooter , RunnableMixIn ): ... MixIn \u7c7b\u7684\u7279\u6027\u603b\u7ed3\u8d77\u6765\u5c31\u662f\uff1a \u4e0d\u80fd\u751f\u6210\u5b9e\u4f8b\uff0c\u5c5e\u4e8e\u62bd\u8c61\u7c7b\uff1b \u4e0d\u80fd\u7ee7\u627f MixIn \u7c7b\u4ee5\u5916\u7684\u7c7b\u3002 \u8fd9\u4e0e Java \u4e2d\u7684 Interface \u5f88\u76f8\u4f3c\u3002 \u4e0d\u540c\u7684\u662f\uff0c Java \u7684\u63a5\u53e3\u53ea\u63d0\u4f9b \"\u89c4\u683c\" \u4e0a\u7684\u591a\u91cd\u7ee7\u627f\uff0c\u800c MixIn \u7c7b\u540c\u65f6\u63d0\u4f9b \"\u89c4\u683c\" \u548c \"\u5b9e\u73b0\" \u4e0a\u7684\u591a\u91cd\u7ee7\u627f\uff0c\u4f7f\u7528\u4e0a\u66f4\u65b9\u4fbf\u3002","title":"3.Inheritance and Polymorphism"},{"location":"4-OOP/4.3/#1","text":"Python \u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5b9e\u73b0\u7ee7\u627f (\u5373\u83b7\u5f97\u7236\u7c7b\u7684\u5c5e\u6027\u548c\u65b9\u6cd5)\uff1a 1 2 3 4 5 6 7 8 9 10 11 class Mage ( object ): ap = 0 def increase_ap ( self ): self . ap += 1 class Teemo ( Mage ): ... def increase_ap ( self , amount ): self . ap += amount \u5982\u679c\u9700\u8981 Override \u7236\u7c7b\u7684\u65b9\u6cd5\uff0c\u53ea\u9700\u8981\u518d\u5b50\u7c7b\u4e2d\u5b9a\u4e49\u4e00\u4e2a\u540c\u540d\u51fd\u6570\uff0c\u4e14\u53c2\u6570\u5217\u8868\u53ef\u4ee5\u4e0d\u540c\u3002","title":"1. \u7ee7\u627f"},{"location":"4-OOP/4.3/#2-duck-typing","text":"\"\u9e2d\u5b50\u7c7b\u578b\" \u6e90\u4e8e India \u8bd7\u4eba Riley \u7684\u4e00\u53e5\u8bd7\uff0c\u5728\u7a0b\u5e8f\u8bbe\u8ba1\u4e2d\uff0c\u5b83\u6307\u7684\u662f\u52a8\u6001\u7c7b\u578b\u8bed\u8a00\u548c\u67d0\u4e9b\u9759\u6001\u8bed\u8a00\u7684\u4e00\u79cd\u5bf9\u8c61\u63a8\u65ad\u7684\u98ce\u683c\u3002\u5728 Python \u4e2d\u7684\u4f53\u73b0\u662f\uff1a \u53d8\u91cf\u7ed1\u5b9a\u7684\u7c7b\u578b\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u51fd\u6570\u548c\u65b9\u6cd5\u53ef\u4ee5\u63a5\u53d7\u4efb\u4f55\u7c7b\u578b\u7684\u53c2\u6570\uff1b \u8c03\u7528\u662f\u5426\u6210\u529f\u7531\u53c2\u6570\u7684\u65b9\u6cd5\u548c\u5c5e\u6027\u800c\u4e0d\u662f\u7c7b\u578b\u786e\u5b9a\uff0c\u8c03\u7528\u4e0d\u6210\u529f\u5219\u629b\u51fa\u9519\u8bef\u3002 1 2 3 4 5 6 7 8 9 10 class LittleRedRidinghood ( object ): def put_mushroom ( self ): return True def attack ( teemo ): if teemo . put_mushroom (): print ( \"attack\" ) p = LittleRedRidinghood () attack ( p )","title":"2. Duck Typing"},{"location":"4-OOP/4.3/#3-mixin","text":"Python \u652f\u6301\u591a\u7ee7\u627f 1 2 3 4 5 6 7 8 9 class Shooter ( object ): ad = 0 def increase_ad ( self ): self . ad += 1 class Teemo ( Mage , Shooter ): ... \u2003 MixIn \u662f\u4e00\u79cd\u7279\u6b8a\u7684\u591a\u91cd\u7ee7\u627f\uff0c\u5373\u5229\u7528\u591a\u91cd\u7ee7\u627f\u5b9e\u73b0\u4e3a\u4e00\u4e2a\u7c7b\u6269\u5c55\u529f\u80fd\u3002 \u2003\u4ee5\u591a\u5c42\u7ee7\u627f\u95ee\u9898\u4e3a\u4f8b\uff0c\u5f53\u4e00\u4e2a\u7c7b\u7684\u53d8\u5316\u6709\u591a\u4e2a\u7ef4\u5ea6\uff0c\u4e3a\u4e86\u907f\u514d\u8fc7\u591a\u7684\u7ee7\u627f\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528 MixIn \u7c7b\u4f5c\u4e3a\u529f\u80fd\u6a21\u5757\u8fdb\u884c\u6269\u5c55 (\u53e6\u4e00\u79cd\u529e\u6cd5\u662f\u4f7f\u7528\u6865\u63a5\u6a21\u5f0f)\uff1a 1 2 3 4 5 6 class RunnableMixIn ( object ): def run (): print ( \"running\" ) class Teemo ( Mage , Shooter , RunnableMixIn ): ... MixIn \u7c7b\u7684\u7279\u6027\u603b\u7ed3\u8d77\u6765\u5c31\u662f\uff1a \u4e0d\u80fd\u751f\u6210\u5b9e\u4f8b\uff0c\u5c5e\u4e8e\u62bd\u8c61\u7c7b\uff1b \u4e0d\u80fd\u7ee7\u627f MixIn \u7c7b\u4ee5\u5916\u7684\u7c7b\u3002 \u8fd9\u4e0e Java \u4e2d\u7684 Interface \u5f88\u76f8\u4f3c\u3002 \u4e0d\u540c\u7684\u662f\uff0c Java \u7684\u63a5\u53e3\u53ea\u63d0\u4f9b \"\u89c4\u683c\" \u4e0a\u7684\u591a\u91cd\u7ee7\u627f\uff0c\u800c MixIn \u7c7b\u540c\u65f6\u63d0\u4f9b \"\u89c4\u683c\" \u548c \"\u5b9e\u73b0\" \u4e0a\u7684\u591a\u91cd\u7ee7\u627f\uff0c\u4f7f\u7528\u4e0a\u66f4\u65b9\u4fbf\u3002","title":"3. \u591a\u7ee7\u627f\u4e0e MixIn"},{"location":"4-OOP/4.4/","text":"1. \u7c7b\u7684\u7279\u6b8a\u5c5e\u6027 (1). \u57fa\u672c\u7684\u4e13\u6709\u5c5e\u6027 \u5c5e\u6027\u540d \u4f5c\u7528 class/obj .__doc__ docstring class .__name__ \u7c7b\u540d class/obj .__module__ \u7c7b/\u5bf9\u8c61\u6240\u5728\u6a21\u5757 obj .__class__ \u5bf9\u8c61\u6240\u5c5e\u7684\u7c7b\u540d class .__bases__ \u7ee7\u627f\u7684\u7236\u7c7b class/obj .__dict__ \u6210\u5458\u5b57\u5178\uff0c\u5b58\u50a8\u6240\u6709\u7c7b/\u5b9e\u4f8b\u6210\u5458\u4fe1\u606f (2). class .__slots__ __slots__ \u662f\u4e00\u4e2a tuple \u5f62\u5f0f\u7684\u7c7b\u53d8\u91cf\uff0c\u4e00\u65e6\u8bbe\u5b9a\u4ee5\u540e\uff0c obj .__dict__ \u5c31\u4f1a\u65e0\u6548\uff0c\u4e14\u6b64\u7c7b\u7684\u5b9e\u4f8b\u4e0d\u80fd\u62e5\u6709\u8fd9\u4e2a tuple \u4e2d\u4ee5\u5916\u7684\u5c5e\u6027\u3002\u5b83\u7684\u597d\u5904\u5728\u4e8e\uff1a \u53ef\u4ee5\u9650\u5236\u4e0d\u80fd\u968f\u610f\u52a8\u6001\u7ed1\u5b9a\u5c5e\u6027\uff1b tuple \u5360\u7528\u5185\u5b58\u5c11\u4e8e\u6563\u5217\u8868\uff0c\u5f53\u5b9e\u4f8b\u5bf9\u8c61\u8f83\u591a\uff0c\u53ef\u663e\u8457\u51cf\u5c11\u5185\u5b58\u5360\u7528\u3002 \u9700\u8981\u6ce8\u610f\u51e0\u70b9\uff1a \u6bcf\u4e2a\u5b50\u7c7b\u90fd\u8981\u5b9a\u4e49 __slots__ \uff0c\u89e3\u91ca\u5668\u9ed8\u8ba4\u5ffd\u7565\u7ee7\u627f\u7684 __slots__ \uff1b \u5982\u679c\u4e0d\u628a __weakref__ \u52a0\u5165 __slots__ \uff0c\u5b9e\u4f8b\u5c31\u4e0d\u80fd\u4f5c\u4e3a\u5f31\u5f15\u7528\u7684\u76ee\u6807\u3002 2. \u7c7b\u7684\u7279\u6b8a\u65b9\u6cd5 (1). \u57fa\u672c\u7684\u4e13\u6709\u65b9\u6cd5 \u65b9\u6cd5\u540d \u4f5c\u7528 __init__() \u6784\u9020\u51fd\u6570 __del__() \u6790\u6784\u51fd\u6570 __len__() \u4f7f\u5f97\u5bf9\u8c61\u53ef\u4ee5\u76f4\u63a5\u4f5c\u7528\u4e8elen()\u51fd\u6570 __str__() toString() __repr__() \u4ea4\u4e92\u73af\u5883\u4e0b\u7684toString() (2). __iter__()\u3001__next__() \u5982\u679c\u4e00\u4e2a\u7c7b\u60f3\u88ab\u4f5c\u7528\u4e8e for-in \u5faa\u73af\uff0c\u5c31\u5fc5\u987b\u5b9e\u73b0 __iter__() \uff0c\u8be5\u65b9\u6cd5\u4f1a\u8fd4\u56de\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff1b\u968f\u540e\uff0c for \u5faa\u73af\u5c31\u4f1a\u4e0d\u65ad\u8c03\u7528\u8fd9\u4e2a\u5bf9\u8c61\u7684 __next__() \u65b9\u6cd5\u53d6\u5f97\u4e0b\u4e00\u4e2a\u503c\u3002 \u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Fibonacci (): def __init__ ( self , maxn ): self . maxn = maxn self . pre = 1 self . curr = 0 self . cnt = 0 def __iter__ ( self ): return self def __next__ ( self ): self . cnt += 1 if self . cnt > self . maxn : raise StopIteration self . pre , self . curr = self . curr , self . pre + self . curr return self . curr (3). __setitem__()\u3001__getitem__() \u6309\u7167\u4e0b\u6807\u7684\u65b9\u5f0f\u4ece\u5b9e\u4f8b\u4e2d\u6dfb\u52a0\u6216\u8bbf\u95ee\u6570\u636e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Container (): def __init__ ( self ): self . vals = {} def __setitem__ ( self , key , value ): self . vals [ key ] = value def __getitem__ ( self , index ): return self . vals [ index ] f = Container () f [ 0 ] = 1 print ( f [ 0 ]) \u5982\u679c\u8981\u652f\u6301\u5207\u7247\u8bbf\u95ee\uff0c\u5373 __getitem__() \u8981\u8bc6\u522b\u5207\u7247\u5bf9\u8c61\uff0c\u8fd8\u9700\u8981\u4e00\u4e9b\u989d\u5916\u7684\u5de5\u4f5c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Container (): ... def __getitem__ ( self , index ): if isinstance ( index , int ): return self . vals [ index ] if isinstance ( index , slice ): start = index . start stop = index . stop if start is None : start = 0 if stop is None : stop = len ( self . vals ) ret = [] for x in range ( start , stop ): ret . append ( self . vals [ x ]) return ret f = Container () f [ 0 ] = 1 f [ 1 ] = 2 print ( f [ 0 : 2 ]) \u66f4\u5b8c\u6574\u7684\u5207\u7247\u8fd8\u8981\u5904\u7406\u8d1f\u6570\u548c step \u53c2\u6570\u3002 (4). __call__() \u5982\u679c\u5b9a\u4e49\u4e86 __call__() \uff0c\u90a3\u4e48\u8fd9\u5c31\u662f\u4e00\u4e2a\u53ef\u8c03\u7528\u7c7b\u3002 1 2 3 4 5 6 class StarPrinter ( object ): def __call__ ( self , var ): print ( \"*** %s ***\" % str ( var )) sp = StarPrinter () sp ( 3 ) (5). __getattr__() \u5f53\u8c03\u7528\u67d0\u4e2a\u7c7b\u7684\u67d0\u4e2a\u5c5e\u6027\u65f6\uff0c\u5982\u679c\u8fd9\u4e2a\u5c5e\u6027\u4e0d\u5b58\u5728\uff0c\u90a3\u4e48 Python \u89e3\u91ca\u5668\u5c31\u4f1a\u5c1d\u8bd5\u4ece __getattr__( self , attr ) \u4e2d\u83b7\u5f97\u5c5e\u6027\u3002 \u8fd9\u79cd\u5b8c\u5168\u52a8\u6001\u7684\u7279\u6027\u652f\u6301\u52a8\u6001\u7684\u94fe\u5f0f\u8c03\u7528\uff0c\u5176\u542b\u4e49\u66f4\u6e05\u6670\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class URLGenerator ( object ): \"\"\"__getattr__ and __call__ return an obj for chaining\"\"\" def __init__ ( self , header ): self . header = header def __getattr__ ( self , path ): # path is name of attribute (string) return URLGenerator ( ' %s / %s ' % ( self . header , path )) def __str__ ( self ): return self . header def __call__ ( self , string ): return URLGenerator ( ' %s / %s ' % ( self . header , string )) __repr__ = __str__ g = URLGenerator ( 'http://www.abc.xyz.com' ) s1 = '4-OOP' print ( g ( '4-OOP' ) . test ) \u53ef\u4ee5\u901a\u8fc7\u5185\u7f6e\u51fd\u6570 callable() \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u4e3a\u53ef\u8c03\u7528\u5bf9\u8c61\u3002 3. \u8fd0\u7b97\u7b26\u91cd\u8f7d (1). \u7b97\u672f\u8fd0\u7b97\u7b26 \u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26 __add__( self, other ), __radd__( self, other ) + __sub__( self, other ), __rsub__( self, other ) - __mul__( self, other ), __rmul__( self, other ) * __truediv__( self, other ), __rtruediv__( self, other ) / __floordiv__( self, other ), __rfloordiv__( self, other ) // __mod__( self, other ), __rmod__( self, other ) % __pow__( self, other ), __rpow__( self, other ) ** (2). \u590d\u5408\u8d4b\u503c\u8fd0\u7b97\u7b26 \u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26 __iadd__( self, other ) += __isub__( self, other ) -= __imul__( self, other ) *= __itruediv__( self, other ) /= __ifloordiv__( self, other ) //= __imod__( self, other ) %= __ipow__( self, other ) **= (3). \u6bd4\u8f83\u8fd0\u7b97\u7b26 \u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26 __lt__( self, other ) < __le__( self, other ) <= __gt__( self, other ) > __ge__( self, other ) >= __eq__( self, other ) == __ne__( self, other ) != (4). \u4f4d\u8fd0\u7b97\u7b26 \u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26 __and__( self, other ), __rand__( self, other ) & __or__( self, other ), __ror__( self, other ) | __xor__( self, other ), __rxor__( self, other ) ^ __lshift__( self, other ), __rlshift__( self, other ) << __rshift__( self, other ), __rrshift__( self, other ) >> (5). \u590d\u5408\u8d4b\u503c\u4f4d\u8fd0\u7b97\u7b26 \u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26 __iand__( self, other ) &= __ior__( self, other ) |= __ixor__( self, other ) ^= __ilshift__( self, other ) <<= __irshift__( self, other ) >>= (6). \u4e00\u5143\u8fd0\u7b97\u7b26 \u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26 __neg__( self, other ) - __pos__( self, other ) + __invert__( self, other ) ~ (7). in , not in \u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26 __contains__( self, item ) in/not in","title":"4.Special Attributes and Methods"},{"location":"4-OOP/4.4/#1","text":"","title":"1. \u7c7b\u7684\u7279\u6b8a\u5c5e\u6027"},{"location":"4-OOP/4.4/#1_1","text":"\u5c5e\u6027\u540d \u4f5c\u7528 class/obj .__doc__ docstring class .__name__ \u7c7b\u540d class/obj .__module__ \u7c7b/\u5bf9\u8c61\u6240\u5728\u6a21\u5757 obj .__class__ \u5bf9\u8c61\u6240\u5c5e\u7684\u7c7b\u540d class .__bases__ \u7ee7\u627f\u7684\u7236\u7c7b class/obj .__dict__ \u6210\u5458\u5b57\u5178\uff0c\u5b58\u50a8\u6240\u6709\u7c7b/\u5b9e\u4f8b\u6210\u5458\u4fe1\u606f","title":"(1). \u57fa\u672c\u7684\u4e13\u6709\u5c5e\u6027"},{"location":"4-OOP/4.4/#2-class9595slots9595","text":"__slots__ \u662f\u4e00\u4e2a tuple \u5f62\u5f0f\u7684\u7c7b\u53d8\u91cf\uff0c\u4e00\u65e6\u8bbe\u5b9a\u4ee5\u540e\uff0c obj .__dict__ \u5c31\u4f1a\u65e0\u6548\uff0c\u4e14\u6b64\u7c7b\u7684\u5b9e\u4f8b\u4e0d\u80fd\u62e5\u6709\u8fd9\u4e2a tuple \u4e2d\u4ee5\u5916\u7684\u5c5e\u6027\u3002\u5b83\u7684\u597d\u5904\u5728\u4e8e\uff1a \u53ef\u4ee5\u9650\u5236\u4e0d\u80fd\u968f\u610f\u52a8\u6001\u7ed1\u5b9a\u5c5e\u6027\uff1b tuple \u5360\u7528\u5185\u5b58\u5c11\u4e8e\u6563\u5217\u8868\uff0c\u5f53\u5b9e\u4f8b\u5bf9\u8c61\u8f83\u591a\uff0c\u53ef\u663e\u8457\u51cf\u5c11\u5185\u5b58\u5360\u7528\u3002 \u9700\u8981\u6ce8\u610f\u51e0\u70b9\uff1a \u6bcf\u4e2a\u5b50\u7c7b\u90fd\u8981\u5b9a\u4e49 __slots__ \uff0c\u89e3\u91ca\u5668\u9ed8\u8ba4\u5ffd\u7565\u7ee7\u627f\u7684 __slots__ \uff1b \u5982\u679c\u4e0d\u628a __weakref__ \u52a0\u5165 __slots__ \uff0c\u5b9e\u4f8b\u5c31\u4e0d\u80fd\u4f5c\u4e3a\u5f31\u5f15\u7528\u7684\u76ee\u6807\u3002","title":"(2). class.__slots__"},{"location":"4-OOP/4.4/#2","text":"","title":"2. \u7c7b\u7684\u7279\u6b8a\u65b9\u6cd5"},{"location":"4-OOP/4.4/#1_2","text":"\u65b9\u6cd5\u540d \u4f5c\u7528 __init__() \u6784\u9020\u51fd\u6570 __del__() \u6790\u6784\u51fd\u6570 __len__() \u4f7f\u5f97\u5bf9\u8c61\u53ef\u4ee5\u76f4\u63a5\u4f5c\u7528\u4e8elen()\u51fd\u6570 __str__() toString() __repr__() \u4ea4\u4e92\u73af\u5883\u4e0b\u7684toString()","title":"(1). \u57fa\u672c\u7684\u4e13\u6709\u65b9\u6cd5"},{"location":"4-OOP/4.4/#2-9595iter95959595next9595","text":"\u5982\u679c\u4e00\u4e2a\u7c7b\u60f3\u88ab\u4f5c\u7528\u4e8e for-in \u5faa\u73af\uff0c\u5c31\u5fc5\u987b\u5b9e\u73b0 __iter__() \uff0c\u8be5\u65b9\u6cd5\u4f1a\u8fd4\u56de\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\uff1b\u968f\u540e\uff0c for \u5faa\u73af\u5c31\u4f1a\u4e0d\u65ad\u8c03\u7528\u8fd9\u4e2a\u5bf9\u8c61\u7684 __next__() \u65b9\u6cd5\u53d6\u5f97\u4e0b\u4e00\u4e2a\u503c\u3002 \u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Fibonacci (): def __init__ ( self , maxn ): self . maxn = maxn self . pre = 1 self . curr = 0 self . cnt = 0 def __iter__ ( self ): return self def __next__ ( self ): self . cnt += 1 if self . cnt > self . maxn : raise StopIteration self . pre , self . curr = self . curr , self . pre + self . curr return self . curr","title":"(2). __iter__()\u3001__next__()"},{"location":"4-OOP/4.4/#3-9595setitem95959595getitem9595","text":"\u6309\u7167\u4e0b\u6807\u7684\u65b9\u5f0f\u4ece\u5b9e\u4f8b\u4e2d\u6dfb\u52a0\u6216\u8bbf\u95ee\u6570\u636e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Container (): def __init__ ( self ): self . vals = {} def __setitem__ ( self , key , value ): self . vals [ key ] = value def __getitem__ ( self , index ): return self . vals [ index ] f = Container () f [ 0 ] = 1 print ( f [ 0 ]) \u5982\u679c\u8981\u652f\u6301\u5207\u7247\u8bbf\u95ee\uff0c\u5373 __getitem__() \u8981\u8bc6\u522b\u5207\u7247\u5bf9\u8c61\uff0c\u8fd8\u9700\u8981\u4e00\u4e9b\u989d\u5916\u7684\u5de5\u4f5c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Container (): ... def __getitem__ ( self , index ): if isinstance ( index , int ): return self . vals [ index ] if isinstance ( index , slice ): start = index . start stop = index . stop if start is None : start = 0 if stop is None : stop = len ( self . vals ) ret = [] for x in range ( start , stop ): ret . append ( self . vals [ x ]) return ret f = Container () f [ 0 ] = 1 f [ 1 ] = 2 print ( f [ 0 : 2 ]) \u66f4\u5b8c\u6574\u7684\u5207\u7247\u8fd8\u8981\u5904\u7406\u8d1f\u6570\u548c step \u53c2\u6570\u3002","title":"(3). __setitem__()\u3001__getitem__()"},{"location":"4-OOP/4.4/#4-9595call9595","text":"\u5982\u679c\u5b9a\u4e49\u4e86 __call__() \uff0c\u90a3\u4e48\u8fd9\u5c31\u662f\u4e00\u4e2a\u53ef\u8c03\u7528\u7c7b\u3002 1 2 3 4 5 6 class StarPrinter ( object ): def __call__ ( self , var ): print ( \"*** %s ***\" % str ( var )) sp = StarPrinter () sp ( 3 )","title":"(4). __call__()"},{"location":"4-OOP/4.4/#5-9595getattr9595","text":"\u5f53\u8c03\u7528\u67d0\u4e2a\u7c7b\u7684\u67d0\u4e2a\u5c5e\u6027\u65f6\uff0c\u5982\u679c\u8fd9\u4e2a\u5c5e\u6027\u4e0d\u5b58\u5728\uff0c\u90a3\u4e48 Python \u89e3\u91ca\u5668\u5c31\u4f1a\u5c1d\u8bd5\u4ece __getattr__( self , attr ) \u4e2d\u83b7\u5f97\u5c5e\u6027\u3002 \u8fd9\u79cd\u5b8c\u5168\u52a8\u6001\u7684\u7279\u6027\u652f\u6301\u52a8\u6001\u7684\u94fe\u5f0f\u8c03\u7528\uff0c\u5176\u542b\u4e49\u66f4\u6e05\u6670\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class URLGenerator ( object ): \"\"\"__getattr__ and __call__ return an obj for chaining\"\"\" def __init__ ( self , header ): self . header = header def __getattr__ ( self , path ): # path is name of attribute (string) return URLGenerator ( ' %s / %s ' % ( self . header , path )) def __str__ ( self ): return self . header def __call__ ( self , string ): return URLGenerator ( ' %s / %s ' % ( self . header , string )) __repr__ = __str__ g = URLGenerator ( 'http://www.abc.xyz.com' ) s1 = '4-OOP' print ( g ( '4-OOP' ) . test ) \u53ef\u4ee5\u901a\u8fc7\u5185\u7f6e\u51fd\u6570 callable() \u5224\u65ad\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u4e3a\u53ef\u8c03\u7528\u5bf9\u8c61\u3002","title":"(5). __getattr__()"},{"location":"4-OOP/4.4/#3","text":"","title":"3. \u8fd0\u7b97\u7b26\u91cd\u8f7d"},{"location":"4-OOP/4.4/#1_3","text":"\u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26 __add__( self, other ), __radd__( self, other ) + __sub__( self, other ), __rsub__( self, other ) - __mul__( self, other ), __rmul__( self, other ) * __truediv__( self, other ), __rtruediv__( self, other ) / __floordiv__( self, other ), __rfloordiv__( self, other ) // __mod__( self, other ), __rmod__( self, other ) % __pow__( self, other ), __rpow__( self, other ) **","title":"(1). \u7b97\u672f\u8fd0\u7b97\u7b26"},{"location":"4-OOP/4.4/#2_1","text":"\u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26 __iadd__( self, other ) += __isub__( self, other ) -= __imul__( self, other ) *= __itruediv__( self, other ) /= __ifloordiv__( self, other ) //= __imod__( self, other ) %= __ipow__( self, other ) **=","title":"(2). \u590d\u5408\u8d4b\u503c\u8fd0\u7b97\u7b26"},{"location":"4-OOP/4.4/#3_1","text":"\u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26 __lt__( self, other ) < __le__( self, other ) <= __gt__( self, other ) > __ge__( self, other ) >= __eq__( self, other ) == __ne__( self, other ) !=","title":"(3). \u6bd4\u8f83\u8fd0\u7b97\u7b26"},{"location":"4-OOP/4.4/#4","text":"\u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26 __and__( self, other ), __rand__( self, other ) & __or__( self, other ), __ror__( self, other ) | __xor__( self, other ), __rxor__( self, other ) ^ __lshift__( self, other ), __rlshift__( self, other ) << __rshift__( self, other ), __rrshift__( self, other ) >>","title":"(4). \u4f4d\u8fd0\u7b97\u7b26"},{"location":"4-OOP/4.4/#5","text":"\u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26 __iand__( self, other ) &= __ior__( self, other ) |= __ixor__( self, other ) ^= __ilshift__( self, other ) <<= __irshift__( self, other ) >>=","title":"(5). \u590d\u5408\u8d4b\u503c\u4f4d\u8fd0\u7b97\u7b26"},{"location":"4-OOP/4.4/#6","text":"\u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26 __neg__( self, other ) - __pos__( self, other ) + __invert__( self, other ) ~","title":"(6). \u4e00\u5143\u8fd0\u7b97\u7b26"},{"location":"4-OOP/4.4/#7-in-not-in","text":"\u65b9\u6cd5\u540d \u8fd0\u7b97\u7b26 __contains__( self, item ) in/not in","title":"(7). in, not in"},{"location":"4-OOP/4.5/","text":"1. \u679a\u4e3e\u7c7b 1 2 3 4 5 6 from enum import Enum Month = Enum ( 'Month' , ( 'Jan' , 'Feb' , 'Mar' , 'Apr' , 'May' , 'Jun' , 'Jul' , 'Aug' , 'Sep' , 'Oct' , 'Nov' , 'Dec' )) for name , member in Month . __members__ . items (): print ( name , member , member . value ) \u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 Month.Jan \u8bbf\u95ee\u5e38\u91cf\uff0c\u9ed8\u8ba4\u4ece 1 \u5f00\u59cb\u8ba1\u6570\u3002 2. \u66f4\u7cbe\u786e\u7684\u679a\u4e3e \u4ece Enum \u6d3e\u751f\u5b50\u7c7b\uff1a 1 2 3 4 5 6 7 8 9 10 11 from enum import Enum , unique @unique class Weekday ( Enum ): Sun = 0 Mon = 1 Tue = 2 Wed = 3 Thu = 4 Fri = 5 Sat = 6 \u5176\u4e2d @unique \u7528\u4e8e\u68c0\u67e5\u662f\u5426\u6ca1\u6709\u91cd\u590d\u503c\u3002","title":"5.Enumeration"},{"location":"4-OOP/4.5/#1","text":"1 2 3 4 5 6 from enum import Enum Month = Enum ( 'Month' , ( 'Jan' , 'Feb' , 'Mar' , 'Apr' , 'May' , 'Jun' , 'Jul' , 'Aug' , 'Sep' , 'Oct' , 'Nov' , 'Dec' )) for name , member in Month . __members__ . items (): print ( name , member , member . value ) \u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 Month.Jan \u8bbf\u95ee\u5e38\u91cf\uff0c\u9ed8\u8ba4\u4ece 1 \u5f00\u59cb\u8ba1\u6570\u3002","title":"1. \u679a\u4e3e\u7c7b"},{"location":"4-OOP/4.5/#2","text":"\u4ece Enum \u6d3e\u751f\u5b50\u7c7b\uff1a 1 2 3 4 5 6 7 8 9 10 11 from enum import Enum , unique @unique class Weekday ( Enum ): Sun = 0 Mon = 1 Tue = 2 Wed = 3 Thu = 4 Fri = 5 Sat = 6 \u5176\u4e2d @unique \u7528\u4e8e\u68c0\u67e5\u662f\u5426\u6ca1\u6709\u91cd\u590d\u503c\u3002","title":"2. \u66f4\u7cbe\u786e\u7684\u679a\u4e3e"},{"location":"4-OOP/4.6/","text":"1. @property @property \u7684\u529f\u80fd\u5373\u5b9e\u73b0 OOP \u4e2d\u7684 setter \u548c getter \uff0c\u5176\u5b9e\u73b0\u6bd4\u8f83\u590d\u6742\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Rectangle ( object ): def __init__ ( self , length , width ): self . _length = length self . _width = width @property def length ( self ): return self . _length @length.setter def length ( self , l ): if l < 0 : self . _length = 0 return self . _length = l r = Rectangle ( 1 , 2 ) r . length = - 1 print ( r . length ) \u901a\u5e38\uff0c\u7528\u88c5\u9970\u51fd\u6570\u7684\u540d\u5b57\u8868\u793a\u5c01\u88c5\u7684\u5c5e\u6027\u540d\uff0c\u800c\u7528\u5355\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u540d\u5b57\u8868\u793a\u6210\u5458\u7684\u540d\u5b57\uff1b \u5982\u679c\u53ea\u8bbe\u7f6e getter \u7684\u88c5\u9970\u5668\uff0c\u5219\u76f8\u5e94\u7684\u5c5e\u6027\u662f\u53ea\u8bfb\u7684\u3002 2. @classmethod \u548c @staticmethod \u5373\u9759\u6001\u65b9\u6cd5\u3002\u5176\u4e2d @classmethod \u548c @staticmethod \u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c @classmethod \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u9ed8\u8ba4\u4f20\u5165\u8c03\u7528\u8fd9\u4e2a\u9759\u6001\u65b9\u6cd5\u7684\u7c7b\u7684\u5f15\u7528\uff0c\u53ef\u4ee5\u77e5\u9053\u662f\u901a\u8fc7\u57fa\u7c7b\u8fd8\u662f\u5b50\u7c7b\u8c03\u7528\u7684\u3002","title":"6.Built-in Decorator"},{"location":"4-OOP/4.6/#1-property","text":"@property \u7684\u529f\u80fd\u5373\u5b9e\u73b0 OOP \u4e2d\u7684 setter \u548c getter \uff0c\u5176\u5b9e\u73b0\u6bd4\u8f83\u590d\u6742\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Rectangle ( object ): def __init__ ( self , length , width ): self . _length = length self . _width = width @property def length ( self ): return self . _length @length.setter def length ( self , l ): if l < 0 : self . _length = 0 return self . _length = l r = Rectangle ( 1 , 2 ) r . length = - 1 print ( r . length ) \u901a\u5e38\uff0c\u7528\u88c5\u9970\u51fd\u6570\u7684\u540d\u5b57\u8868\u793a\u5c01\u88c5\u7684\u5c5e\u6027\u540d\uff0c\u800c\u7528\u5355\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u540d\u5b57\u8868\u793a\u6210\u5458\u7684\u540d\u5b57\uff1b \u5982\u679c\u53ea\u8bbe\u7f6e getter \u7684\u88c5\u9970\u5668\uff0c\u5219\u76f8\u5e94\u7684\u5c5e\u6027\u662f\u53ea\u8bfb\u7684\u3002","title":"1. @property"},{"location":"4-OOP/4.6/#2-classmethod-staticmethod","text":"\u5373\u9759\u6001\u65b9\u6cd5\u3002\u5176\u4e2d @classmethod \u548c @staticmethod \u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c @classmethod \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u9ed8\u8ba4\u4f20\u5165\u8c03\u7528\u8fd9\u4e2a\u9759\u6001\u65b9\u6cd5\u7684\u7c7b\u7684\u5f15\u7528\uff0c\u53ef\u4ee5\u77e5\u9053\u662f\u901a\u8fc7\u57fa\u7c7b\u8fd8\u662f\u5b50\u7c7b\u8c03\u7528\u7684\u3002","title":"2. @classmethod \u548c @staticmethod"}]}