{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Notes","title":"Preface"},{"location":"#notes","text":"","title":"Notes"},{"location":"color/","text":"Primary colors Default: Teal Click on a tile to change the primary color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; }) }) Accent colors Default: Blue Click on a tile to change the accent color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; }) })","title":"Color"},{"location":"color/#primary-colors","text":"Default: Teal Click on a tile to change the primary color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; }) })","title":"Primary colors"},{"location":"color/#accent-colors","text":"Default: Blue Click on a tile to change the accent color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; }) })","title":"Accent colors"},{"location":"1-Fundm/1.1/","text":"#basic1 { font-family:Consolas, \"\u601d\u6e90\u9ed1\u4f53 CN\"; /* \u82f1\u6587\u5b57\u4f53\u5199\u5728\u524d, \u4e2d\u82f1\u6587\u5206\u79bb */ border-collapse:collapse; /* \u662f\u5426\u5c06\u8868\u683c\u4e24\u8fb9\u6298\u53e0\u4e3a\u4e00\u6761\u7ebf */ margin-left: 0px; /* \u8868\u683c\u6574\u4f53\u4e0e\u5de6\u4fa7\u7684\u8ddd\u79bb */ } /* tr: \u884c\u6807\u7b7e; td: \u884c\u4e2d\u7684\u5217\u6807\u7b7e; th: \u884c\u4e2d\u7684\u6807\u9898\u6807\u7b7e; */ #basic1 td, #basic1 th /* \u516c\u5171\u5c5e\u6027\u533a */ { font-size: 16px; border: 2px solid #FFFFFF; /* \u8fb9\u6846\u5bbd \u8fb9\u6846\u5b9e\u7ebf \u8fb9\u6846\u989c\u8272 */ padding: 8px 12px 8px 12px; /* \u5185\u8fb9\u8ddd: \u4e0a \u53f3 \u4e0b \u5de6 */ } #basic1 td { background-color: #e5efeb; /* height: 2.4em; */ /* \u8868\u683c\u9ad8\u5ea6 */ /* font-weight: 500; */ /* \u5b57\u4f53\u52a0\u7c97 */ } #basic1 th { text-align: center; font-size: 16px; padding-top:5px; padding-bottom:4px; background-color:#50aca2; color:#ffffff; /* \u5b57\u4f53\u989c\u8272: \u767d */ } /* \u7528\u4e8e\u5b9e\u73b0\u989c\u8272\u4ea4\u9519, <tr class=\"alt\"> */ #basic1 tr.alt td { /* background-color:#e5efeb; */ } #basic1 tr.smallalign td { padding: 8px 29px 8px 29px; } #basic1 td:hover { /* border: 1px solid red; */ } 1. Python \u652f\u6301\u7684\u6570\u503c\u7c7b\u578b \u2460 int 1 2 3 var = 1 varb = 0b10001000 varx = 0xaf \u2461 long 1 varx = 0xafb2 L \u5728 Python 3.0 \u4ee5\u524d\uff0c\u957f\u6574\u578b\u9700\u8981\u663e\u5f0f\u58f0\u660e\uff1b 3.0 \u4e4b\u540e\uff0c\u5173\u4e8e\u6574\u578b\u548c\u957f\u6574\u578b\u4f1a\u81ea\u52a8\u8bc6\u522b\u3002 \u2462 float 1 2 3 var = 2.0 var_xd = 2. var_s = 3e12 \u2463 complex 1 2 var = 1 + 2j varl = 3e10j 2. \u57fa\u672c\u6570\u503c\u8fd0\u7b97\u7b26 1 2 3 4 5 6 \"\"\" +, -, *, / \"\"\" a = 3 // 2 # quotient a = 3 % 2 # remainder a = a ** a # square 3. \u5f3a\u5236\u8f6c\u6362 int(x, base) \u8f6c\u6362\u4e3a\u6574\u578b long(x, base) \u8f6c\u6362\u4e3a\u957f\u6574\u578b float(x) \u8f6c\u6362\u4e3a\u6d6e\u70b9","title":"1.Number"},{"location":"1-Fundm/1.1/#1-python","text":"","title":"1. Python \u652f\u6301\u7684\u6570\u503c\u7c7b\u578b"},{"location":"1-Fundm/1.1/#1-int","text":"1 2 3 var = 1 varb = 0b10001000 varx = 0xaf","title":"\u2460 int"},{"location":"1-Fundm/1.1/#2-long","text":"1 varx = 0xafb2 L \u5728 Python 3.0 \u4ee5\u524d\uff0c\u957f\u6574\u578b\u9700\u8981\u663e\u5f0f\u58f0\u660e\uff1b 3.0 \u4e4b\u540e\uff0c\u5173\u4e8e\u6574\u578b\u548c\u957f\u6574\u578b\u4f1a\u81ea\u52a8\u8bc6\u522b\u3002","title":"\u2461 long"},{"location":"1-Fundm/1.1/#3-float","text":"1 2 3 var = 2.0 var_xd = 2. var_s = 3e12","title":"\u2462 float"},{"location":"1-Fundm/1.1/#4-complex","text":"1 2 var = 1 + 2j varl = 3e10j","title":"\u2463 complex"},{"location":"1-Fundm/1.1/#2","text":"1 2 3 4 5 6 \"\"\" +, -, *, / \"\"\" a = 3 // 2 # quotient a = 3 % 2 # remainder a = a ** a # square","title":"2. \u57fa\u672c\u6570\u503c\u8fd0\u7b97\u7b26"},{"location":"1-Fundm/1.1/#3","text":"int(x, base) \u8f6c\u6362\u4e3a\u6574\u578b long(x, base) \u8f6c\u6362\u4e3a\u957f\u6574\u578b float(x) \u8f6c\u6362\u4e3a\u6d6e\u70b9","title":"3. \u5f3a\u5236\u8f6c\u6362"},{"location":"1-Fundm/1.2/","text":"1. \u5b57\u7b26\u4e32\u8868\u793a \u5b57\u7b26\u4e32\u53ef\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u521b\u5efa\uff1a 1 2 s1 = 'abc' s2 = \"abc\" \u4e09\u4e2a\u5f15\u53f7\u53ef\u7528\u4e8e\u652f\u6301\u591a\u884c\u5b57\u7b26\u4e32\uff0c\u5b9e\u73b0\u6240\u89c1\u5373\u6240\u5f97 1 2 3 s3 = \"\"\" abc \"\"\" \u5c06\u5bf9\u8c61\u5f3a\u5236\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff1a \u2460 str() : \u9002\u5408\u4eba\u8bfb\u53d6 \u2461 repr() : \u9002\u5408\u89e3\u91ca\u5668\u8bfb\u53d6 2. \u5b57\u7b26\u4e32\u8fd0\u7b97\u7b26 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 a = \"hello\" b = \"world\" # Concatenation print ( a + \" \" + b ) # Concat the same string for times print ( a * 3 ) # Get specified character print ( a [ 1 ]) # Cut a part print ( a [ 1 : 4 ]) print ( a [: 2 ]) # the first two charaters print ( a [ 2 :]) # in addition to first two characters print ( a [: 2 ] + a [ 2 :]) # 'hello' print ( a [ 1 : 1000 ]) # invalid index is changed to the length: 'ello' print ( a [ - 1 ]) # negative: count from right to left # Determine if the character is in the string print ( 'h' in a ) print ( '0' not in a ) # Format print ( 'a has %d charaters' % ( 5 )) 3. \u5b57\u7b26\u7f16\u7801 ASCII : \u65e9\u671f\u8ba1\u7b97\u673a\u88ab\u53d1\u660e\u65f6\u7684\u5b57\u7b26\u7f16\u7801\uff0c\u5305\u542b\u82f1\u6587\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u7b26\u53f7\u7b49 127 \u4e2a\u5b57\u7b26\uff0c\u6bcf\u4e2a\u5360 1 \u5b57\u8282 Unicode : \u7edf\u4e00\u4e86\u5404\u79cd\u8bed\u8a00 ( GBK ...) \u548c\u7b26\u53f7\u7684\u7f16\u7801\uff0c\u89e3\u51b3\u4e86\u4e71\u7801\u95ee\u9898\u3002\u4e00\u822c\u6bcf\u4e2a\u5b57\u7b26\u5360 2 \u4e2a\u5b57\u8282\uff0c\u90e8\u5206\u751f\u50fb\u5b57\u7b26\u5360 4 \u4e2a\u5b57\u8282\u4ee5\u4e0a\u3002 UTF-8 : \u5982\u679c\u6587\u672c\u4e2d\u82f1\u6587\u5b57\u7b26\u5360\u591a\u6570\uff0c Unicode \u6bd4\u8f83\u6d6a\u8d39\u5b58\u50a8\u7a7a\u95f4\uff0c\u56e0\u6b64\u5b9e\u73b0\u4e86\u53ef\u53d8\u957f\u7684 UTF-8 \u7f16\u7801\u3002\u5b83\u6839\u636e Unicode \u7684\u957f\u5ea6\u8fdb\u884c\u7f16\u7801\uff1a\u82f1\u6587\u5b57\u7b26\u88ab\u7f16\u7801\u4e3a 1 \u4e2a\u5b57\u8282\uff0c\u6c49\u5b57\u901a\u5e38\u662f 3 \u4e2a\u5b57\u8282\u3002\u4e00\u4e2a Unicode \u7801\u53ef\u80fd\u88ab\u8f6c\u6362\u6210 1$\\sim$6 \u4e2a Byte \u7684 UTF-8 \u7801\uff0c\u53d6\u51b3\u4e8e Unicode \u7801\u7684\u957f\u5ea6\u3002\u7531\u4e8e UTF-8 \u7684\u7f16\u7801\u89c4\u5219\uff0c\u5b83\u4e5f\u662f ASCII \u7801\u7684\u4e00\u4e2a\u8d85\u96c6\u3002\u901a\u5e38\uff0c\u5b58\u50a8\u6216\u901a\u4fe1\u9009\u62e9\u5bf9\u76f8\u5e94\u5b57\u7b26\u96c6\u8282\u7701\u7a7a\u95f4\u7684\u7f16\u7801\uff1a \u5185\u5b58\u4e2d\u4f7f\u7528 Unicode \u7f16\u7801\uff0c\u78c1\u76d8\u4e2d\u4f7f\u7528 UTF-8 \u7f16\u7801 \u7f51\u7edc\u901a\u4fe1\u4f7f\u7528 UTF-8 \u7f16\u7801 4. Python \u5b57\u7b26\u4e32\u7f16\u7801 Python 3 \u7684\u5b57\u7b26\u4e32\u662f Unicode \u7f16\u7801\u3002 1 2 s1 = \"abc\" s_equiv = u \"abc\" \u53ef\u4ee5\u901a\u8fc7 ord() \u548c chr() \u83b7\u53d6\u5b57\u7b26\u7684 Unicode \u503c\u548c Unicode \u5b57\u7b26 1 2 print ( ord ( \"\u597d\" )) print ( chr ( ord ( \"\u597d\" ))) (1). bytes \u2003 bytes \u662f Python 3 \u65b0\u589e\u7684\u201c\u5b57\u8282\u4e32\u201d\u7c7b\u578b\uff0c\u9002\u7528\u4e8e str \u7684\u64cd\u4f5c\u4e5f\u9002\u7528\u4e8e\u5b83\uff0c\u548c str \u4e0d\u540c\u7684\u662f\uff0c\u4e0d\u7ba1\u5b83\u5b58\u50a8\u7684\u5b57\u7b26\u4e32\u4ee5\u4f55\u79cd\u65b9\u5f0f\u7f16\u7801\uff0c bytes[] \u64cd\u4f5c\u7684\u5355\u4f4d\u90fd\u662f 1 \u4e2a\u5b57\u8282\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 # create by Constructor s1 = bytes () s2 = bytes ( 'hello' , encoding = 'ascii' ) # create by declaration # note: if the character can't be denoted by ASCII, we denote # it by format '/x##' s3 = b 'a' # default chars: ascii s4 = b ' \\xe4 ' s5 = b ' \\u54c8 ' # '\\u##': unicode # create by tranforming directly s6 = 'hello' . encode ( 'utf-8' ) \u2003\u5728\u5199\u5165\u6587\u4ef6\u6216\u8fdb\u884c\u7f51\u7edc\u4f20\u8f93\u65f6\uff0c\u9700\u8981\u628a\u5b57\u7b26\u4e32\u901a\u8fc7 encode() \u5b58\u50a8\u5728 bytes \u4e2d\uff0c\u5f53\u8bfb\u53d6\u7684\u65f6\u5019\u518d\u901a\u8fc7 decode() \u89e3\u7801\u3002 \u2003\u4e3a\u907f\u514d\u4e71\u7801\u95ee\u9898\uff0c encode() \u7684\u53c2\u6570\u5e94\u5c3d\u53ef\u80fd\u4f7f\u7528 \"utf-8\" \u3002 1 2 3 s = b ' \\xe5\\x93\\x88 ' print ( s1 . decode ( 'unicode-escape' )) # s is equivalent to '\\u54c8' (\"\u54c8\"), but the result is gibberish (2). py \u6587\u4ef6\u7684\u7f16\u7801 py \u6587\u4ef6\u7684\u5f00\u5934\u901a\u5e38\u8fd9\u6837\u5f00\u5934\uff1a 1 2 #!/usr/bin/env python3 # -*- coding: utf-8 -*- \u2003\u7b2c\u4e00\u884c\u7684\u76ee\u7684\u662f\u544a\u8bc9 Linux \u7cfb\u7edf\uff0c\u8fd9\u662f\u4e00\u4e2a Python \u53ef\u6267\u884c\u7a0b\u5e8f\uff0c Windows \u4f1a\u9ed8\u8ba4\u5ffd\u7565\u8fd9\u4e00\u6761\u3002 \u2003\u7b2c\u4e8c\u884c\u7684\u76ee\u7684\u662f\u544a\u8bc9 Python \u89e3\u91ca\u5668\uff0c\u6309\u7167 utf-8 \u7f16\u7801\u8bfb\u53d6\u6e90\u4ee3\u7801\u3002\u53ea\u6709\u6587\u672c\u7f16\u8f91\u5668\u8bbe\u4e3a utf-8 \u5e76\u4e14\u52a0\u4e0a\u8fd9\u4e2a\u5f00\u5934\uff0c\u547d\u4ee4\u884c\u6d4b\u8bd5\u7684\u65f6\u5019\u624d\u4e00\u5b9a\u4f1a\u6b63\u5e38\u663e\u793a\u4e2d\u6587\u3002","title":"2.String"},{"location":"1-Fundm/1.2/#1","text":"\u5b57\u7b26\u4e32\u53ef\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u521b\u5efa\uff1a 1 2 s1 = 'abc' s2 = \"abc\" \u4e09\u4e2a\u5f15\u53f7\u53ef\u7528\u4e8e\u652f\u6301\u591a\u884c\u5b57\u7b26\u4e32\uff0c\u5b9e\u73b0\u6240\u89c1\u5373\u6240\u5f97 1 2 3 s3 = \"\"\" abc \"\"\" \u5c06\u5bf9\u8c61\u5f3a\u5236\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff1a \u2460 str() : \u9002\u5408\u4eba\u8bfb\u53d6 \u2461 repr() : \u9002\u5408\u89e3\u91ca\u5668\u8bfb\u53d6","title":"1. \u5b57\u7b26\u4e32\u8868\u793a"},{"location":"1-Fundm/1.2/#2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 a = \"hello\" b = \"world\" # Concatenation print ( a + \" \" + b ) # Concat the same string for times print ( a * 3 ) # Get specified character print ( a [ 1 ]) # Cut a part print ( a [ 1 : 4 ]) print ( a [: 2 ]) # the first two charaters print ( a [ 2 :]) # in addition to first two characters print ( a [: 2 ] + a [ 2 :]) # 'hello' print ( a [ 1 : 1000 ]) # invalid index is changed to the length: 'ello' print ( a [ - 1 ]) # negative: count from right to left # Determine if the character is in the string print ( 'h' in a ) print ( '0' not in a ) # Format print ( 'a has %d charaters' % ( 5 ))","title":"2. \u5b57\u7b26\u4e32\u8fd0\u7b97\u7b26"},{"location":"1-Fundm/1.2/#3","text":"ASCII : \u65e9\u671f\u8ba1\u7b97\u673a\u88ab\u53d1\u660e\u65f6\u7684\u5b57\u7b26\u7f16\u7801\uff0c\u5305\u542b\u82f1\u6587\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u7b26\u53f7\u7b49 127 \u4e2a\u5b57\u7b26\uff0c\u6bcf\u4e2a\u5360 1 \u5b57\u8282 Unicode : \u7edf\u4e00\u4e86\u5404\u79cd\u8bed\u8a00 ( GBK ...) \u548c\u7b26\u53f7\u7684\u7f16\u7801\uff0c\u89e3\u51b3\u4e86\u4e71\u7801\u95ee\u9898\u3002\u4e00\u822c\u6bcf\u4e2a\u5b57\u7b26\u5360 2 \u4e2a\u5b57\u8282\uff0c\u90e8\u5206\u751f\u50fb\u5b57\u7b26\u5360 4 \u4e2a\u5b57\u8282\u4ee5\u4e0a\u3002 UTF-8 : \u5982\u679c\u6587\u672c\u4e2d\u82f1\u6587\u5b57\u7b26\u5360\u591a\u6570\uff0c Unicode \u6bd4\u8f83\u6d6a\u8d39\u5b58\u50a8\u7a7a\u95f4\uff0c\u56e0\u6b64\u5b9e\u73b0\u4e86\u53ef\u53d8\u957f\u7684 UTF-8 \u7f16\u7801\u3002\u5b83\u6839\u636e Unicode \u7684\u957f\u5ea6\u8fdb\u884c\u7f16\u7801\uff1a\u82f1\u6587\u5b57\u7b26\u88ab\u7f16\u7801\u4e3a 1 \u4e2a\u5b57\u8282\uff0c\u6c49\u5b57\u901a\u5e38\u662f 3 \u4e2a\u5b57\u8282\u3002\u4e00\u4e2a Unicode \u7801\u53ef\u80fd\u88ab\u8f6c\u6362\u6210 1$\\sim$6 \u4e2a Byte \u7684 UTF-8 \u7801\uff0c\u53d6\u51b3\u4e8e Unicode \u7801\u7684\u957f\u5ea6\u3002\u7531\u4e8e UTF-8 \u7684\u7f16\u7801\u89c4\u5219\uff0c\u5b83\u4e5f\u662f ASCII \u7801\u7684\u4e00\u4e2a\u8d85\u96c6\u3002\u901a\u5e38\uff0c\u5b58\u50a8\u6216\u901a\u4fe1\u9009\u62e9\u5bf9\u76f8\u5e94\u5b57\u7b26\u96c6\u8282\u7701\u7a7a\u95f4\u7684\u7f16\u7801\uff1a \u5185\u5b58\u4e2d\u4f7f\u7528 Unicode \u7f16\u7801\uff0c\u78c1\u76d8\u4e2d\u4f7f\u7528 UTF-8 \u7f16\u7801 \u7f51\u7edc\u901a\u4fe1\u4f7f\u7528 UTF-8 \u7f16\u7801","title":"3. \u5b57\u7b26\u7f16\u7801"},{"location":"1-Fundm/1.2/#4-python","text":"Python 3 \u7684\u5b57\u7b26\u4e32\u662f Unicode \u7f16\u7801\u3002 1 2 s1 = \"abc\" s_equiv = u \"abc\" \u53ef\u4ee5\u901a\u8fc7 ord() \u548c chr() \u83b7\u53d6\u5b57\u7b26\u7684 Unicode \u503c\u548c Unicode \u5b57\u7b26 1 2 print ( ord ( \"\u597d\" )) print ( chr ( ord ( \"\u597d\" )))","title":"4. Python \u5b57\u7b26\u4e32\u7f16\u7801"},{"location":"1-Fundm/1.2/#1-bytes","text":"bytes \u662f Python 3 \u65b0\u589e\u7684\u201c\u5b57\u8282\u4e32\u201d\u7c7b\u578b\uff0c\u9002\u7528\u4e8e str \u7684\u64cd\u4f5c\u4e5f\u9002\u7528\u4e8e\u5b83\uff0c\u548c str \u4e0d\u540c\u7684\u662f\uff0c\u4e0d\u7ba1\u5b83\u5b58\u50a8\u7684\u5b57\u7b26\u4e32\u4ee5\u4f55\u79cd\u65b9\u5f0f\u7f16\u7801\uff0c bytes[] \u64cd\u4f5c\u7684\u5355\u4f4d\u90fd\u662f 1 \u4e2a\u5b57\u8282\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 # create by Constructor s1 = bytes () s2 = bytes ( 'hello' , encoding = 'ascii' ) # create by declaration # note: if the character can't be denoted by ASCII, we denote # it by format '/x##' s3 = b 'a' # default chars: ascii s4 = b ' \\xe4 ' s5 = b ' \\u54c8 ' # '\\u##': unicode # create by tranforming directly s6 = 'hello' . encode ( 'utf-8' ) \u2003\u5728\u5199\u5165\u6587\u4ef6\u6216\u8fdb\u884c\u7f51\u7edc\u4f20\u8f93\u65f6\uff0c\u9700\u8981\u628a\u5b57\u7b26\u4e32\u901a\u8fc7 encode() \u5b58\u50a8\u5728 bytes \u4e2d\uff0c\u5f53\u8bfb\u53d6\u7684\u65f6\u5019\u518d\u901a\u8fc7 decode() \u89e3\u7801\u3002 \u2003\u4e3a\u907f\u514d\u4e71\u7801\u95ee\u9898\uff0c encode() \u7684\u53c2\u6570\u5e94\u5c3d\u53ef\u80fd\u4f7f\u7528 \"utf-8\" \u3002 1 2 3 s = b ' \\xe5\\x93\\x88 ' print ( s1 . decode ( 'unicode-escape' )) # s is equivalent to '\\u54c8' (\"\u54c8\"), but the result is gibberish","title":"(1). bytes"},{"location":"1-Fundm/1.2/#2-py","text":"py \u6587\u4ef6\u7684\u5f00\u5934\u901a\u5e38\u8fd9\u6837\u5f00\u5934\uff1a 1 2 #!/usr/bin/env python3 # -*- coding: utf-8 -*- \u2003\u7b2c\u4e00\u884c\u7684\u76ee\u7684\u662f\u544a\u8bc9 Linux \u7cfb\u7edf\uff0c\u8fd9\u662f\u4e00\u4e2a Python \u53ef\u6267\u884c\u7a0b\u5e8f\uff0c Windows \u4f1a\u9ed8\u8ba4\u5ffd\u7565\u8fd9\u4e00\u6761\u3002 \u2003\u7b2c\u4e8c\u884c\u7684\u76ee\u7684\u662f\u544a\u8bc9 Python \u89e3\u91ca\u5668\uff0c\u6309\u7167 utf-8 \u7f16\u7801\u8bfb\u53d6\u6e90\u4ee3\u7801\u3002\u53ea\u6709\u6587\u672c\u7f16\u8f91\u5668\u8bbe\u4e3a utf-8 \u5e76\u4e14\u52a0\u4e0a\u8fd9\u4e2a\u5f00\u5934\uff0c\u547d\u4ee4\u884c\u6d4b\u8bd5\u7684\u65f6\u5019\u624d\u4e00\u5b9a\u4f1a\u6b63\u5e38\u663e\u793a\u4e2d\u6587\u3002","title":"(2). py \u6587\u4ef6\u7684\u7f16\u7801"},{"location":"1-Fundm/1.3/","text":"#basic1 { font-family:Consolas, \"\u601d\u6e90\u9ed1\u4f53 CN\"; /* \u82f1\u6587\u5b57\u4f53\u5199\u5728\u524d, \u4e2d\u82f1\u6587\u5206\u79bb */ border-collapse:collapse; /* \u662f\u5426\u5c06\u8868\u683c\u4e24\u8fb9\u6298\u53e0\u4e3a\u4e00\u6761\u7ebf */ margin-left: 0px; /* \u8868\u683c\u6574\u4f53\u4e0e\u5de6\u4fa7\u7684\u8ddd\u79bb */ } /* tr: \u884c\u6807\u7b7e; td: \u884c\u4e2d\u7684\u5217\u6807\u7b7e; th: \u884c\u4e2d\u7684\u6807\u9898\u6807\u7b7e; */ #basic1 td, #basic1 th /* \u516c\u5171\u5c5e\u6027\u533a */ { font-size: 16px; border: 2px solid #FFFFFF; /* \u8fb9\u6846\u5bbd \u8fb9\u6846\u5b9e\u7ebf \u8fb9\u6846\u989c\u8272 */ padding: 8px 12px 8px 12px; /* \u5185\u8fb9\u8ddd: \u4e0a \u53f3 \u4e0b \u5de6 */ } #basic1 td { background-color: #e5efeb; /* height: 2.4em; */ /* \u8868\u683c\u9ad8\u5ea6 */ /* font-weight: 500; */ /* \u5b57\u4f53\u52a0\u7c97 */ } #basic1 th { text-align: center; font-size: 16px; padding-top:5px; padding-bottom:4px; background-color:#50aca2; color:#ffffff; /* \u5b57\u4f53\u989c\u8272: \u767d */ } /* \u7528\u4e8e\u5b9e\u73b0\u989c\u8272\u4ea4\u9519, <tr class=\"alt\"> */ #basic1 tr.alt td { /* background-color:#e5efeb; */ } #basic1 tr.smallalign td { padding: 8px 29px 8px 29px; } #basic1 td:hover { /* border: 1px solid red; */ } 1. \u521d\u59cb\u5316\u4e0e\u8bbf\u95ee \u2003 List \u662f Python \u4e2d\u6700\u57fa\u672c\u7684\u5bb9\u5668\u3002\u7c7b\u4f3c\u4e8e\u4e00\u4e9b\u5176\u4ed6\u8bed\u8a00\uff0c\u5b83\u53ef\u4ee5\u52a8\u6001\u8fb9\u957f\uff0c\u5176\u4e2d\u53ef\u4ee5\u5b58\u50a8\u5404\u79cd\u5bf9\u8c61\u3002 1 2 empty_list = [] list1 = [ 1 , 'beginner' ] \u2003\u5176\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0b\u6807\u76f4\u63a5\u8bbf\u95ee\uff0c\u7c7b\u4f3c\u4e8e\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 : \u622a\u53d6\u3001\u901a\u8fc7\u8d1f\u7684\u7d22\u5f15\u4ece\u540e\u5411\u524d\u8bbf\u95ee\u3002 \u2003 Tuple \u662f\u4e0d\u53ef\u53d8\u7684 List \uff1a\u4e00\u65e6\u521b\u5efa\uff0c\u5176\u5b58\u50a8\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e0d\u53ef\u6539\u53d8\u3002 1 2 tuple1 = ( 'dayup' ) tuple2 = ( 2 ,) \u2003\u5f53\u5143\u7ec4\u4e2d\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u7684\u65f6\u5019\uff0c\u4e3a\u907f\u514d\u6b67\u4e49\uff0c\u5e94\u8be5\u5728\u7b2c\u4e00\u4e2a\u5143\u7d20\u540e\u52a0\u9017\u53f7\u3002 2. List/Tuple \u51fd\u6570 \u51fd\u6570\u540d \u4f5c\u7528 len( seq ) \u8fd4\u56de\u5143\u7d20\u4e2a\u6570 max( seq ) \u8fd4\u56de\u5143\u7d20\u6700\u5927\u503c (\u5143\u7d20\u7c7b\u578b\u76f8\u540c) min( seq ) \u8fd4\u56de\u5143\u7d20\u6700\u5c0f\u503c (\u5143\u7d20\u7c7b\u578b\u76f8\u540c) list( seq ) \u8f6c\u6362\u4e3a list tuple( seq ) \u8f6c\u6362\u4e3a tuple type( var ) \u8fd4\u56de\u8f93\u5165\u7684\u53d8\u91cf\u6240\u5c5e\u7684\u7c7b\u578b sorted( iter_obj , cmp =None, key =None, reverse =false) \u8fd4\u56de\u4e00\u4e2a\u6392\u5e8f\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61 3. List \u65b9\u6cd5 \u65b9\u6cd5\u540d \u4f5c\u7528 append( obj ) \u5728\u5217\u8868\u672b\u5c3e\u6dfb\u52a0\u5bf9\u8c61 insert( index , obj ) \u5c06\u5bf9\u8c61\u63d2\u5165\u5230\u6307\u5b9a\u4f4d\u7f6e pop([ index = -1]) \u5220\u9664\u5217\u8868\u4e2d\u5143\u7d20\u3002\u5f53\u4e0d\u6307\u660e\u7d22\u5f15\u65f6\u9ed8\u8ba4\u4e3a-1 remove( obj ) \u79fb\u9664\u7b2c\u4e00\u4e2a obj \u7684\u5339\u914d\u9879 index( obj , [ start , [ end ]]) \u8fd4\u56de\u67d0\u4e2a\u5143\u7d20\u5728\u5217\u8868\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u7d22\u5f15\uff0c\u4e5f\u53ef\u4ee5\u6307\u660e\u67e5\u627e\u7684\u8303\u56f4 count( obj ) \u8fd4\u56de\u67d0\u4e2a\u5143\u7d20\u5728\u5217\u8868\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 reverse() \u53cd\u8f6c\u5217\u8868 extend( seq ) \u5728\u5217\u8868\u672b\u5c3e\u8ffd\u52a0\u53e6\u4e00\u4e2a\u5e8f\u5217 sort( cmp =None, key =None, reverse =false) \u628a\u5217\u8868\u6392\u5e8f Tuple \u5219\u53ea\u652f\u6301\u5176\u4e2d\u7684\u4e24\u4e2a Observer : index() \u3001 count() \u3002 4. List \u64cd\u4f5c\u7b26 \u64cd\u4f5c\u7b26 \u4f5c\u7528 [1, 2] + [3, 4] \u62fc\u63a5 ['hello'] * 6 \u91cd\u590d\u62fc\u63a5 1 in [1, 2, 3] \u5b58\u5728\u4e8e for x in [1, 2] \u8fed\u4ee3 \u4ee5\u4e0a\u6240\u6709\u8fd0\u7b97\u7b26\u4e5f\u9002\u7528\u4e8e Tuple \u3002","title":"3.List and Tuple"},{"location":"1-Fundm/1.3/#1","text":"List \u662f Python \u4e2d\u6700\u57fa\u672c\u7684\u5bb9\u5668\u3002\u7c7b\u4f3c\u4e8e\u4e00\u4e9b\u5176\u4ed6\u8bed\u8a00\uff0c\u5b83\u53ef\u4ee5\u52a8\u6001\u8fb9\u957f\uff0c\u5176\u4e2d\u53ef\u4ee5\u5b58\u50a8\u5404\u79cd\u5bf9\u8c61\u3002 1 2 empty_list = [] list1 = [ 1 , 'beginner' ] \u2003\u5176\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0b\u6807\u76f4\u63a5\u8bbf\u95ee\uff0c\u7c7b\u4f3c\u4e8e\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 : \u622a\u53d6\u3001\u901a\u8fc7\u8d1f\u7684\u7d22\u5f15\u4ece\u540e\u5411\u524d\u8bbf\u95ee\u3002 \u2003 Tuple \u662f\u4e0d\u53ef\u53d8\u7684 List \uff1a\u4e00\u65e6\u521b\u5efa\uff0c\u5176\u5b58\u50a8\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e0d\u53ef\u6539\u53d8\u3002 1 2 tuple1 = ( 'dayup' ) tuple2 = ( 2 ,) \u2003\u5f53\u5143\u7ec4\u4e2d\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u7684\u65f6\u5019\uff0c\u4e3a\u907f\u514d\u6b67\u4e49\uff0c\u5e94\u8be5\u5728\u7b2c\u4e00\u4e2a\u5143\u7d20\u540e\u52a0\u9017\u53f7\u3002","title":"1. \u521d\u59cb\u5316\u4e0e\u8bbf\u95ee"},{"location":"1-Fundm/1.3/#2-listtuple","text":"\u51fd\u6570\u540d \u4f5c\u7528 len( seq ) \u8fd4\u56de\u5143\u7d20\u4e2a\u6570 max( seq ) \u8fd4\u56de\u5143\u7d20\u6700\u5927\u503c (\u5143\u7d20\u7c7b\u578b\u76f8\u540c) min( seq ) \u8fd4\u56de\u5143\u7d20\u6700\u5c0f\u503c (\u5143\u7d20\u7c7b\u578b\u76f8\u540c) list( seq ) \u8f6c\u6362\u4e3a list tuple( seq ) \u8f6c\u6362\u4e3a tuple type( var ) \u8fd4\u56de\u8f93\u5165\u7684\u53d8\u91cf\u6240\u5c5e\u7684\u7c7b\u578b sorted( iter_obj , cmp =None, key =None, reverse =false) \u8fd4\u56de\u4e00\u4e2a\u6392\u5e8f\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61","title":"2. List/Tuple \u51fd\u6570"},{"location":"1-Fundm/1.3/#3-list","text":"\u65b9\u6cd5\u540d \u4f5c\u7528 append( obj ) \u5728\u5217\u8868\u672b\u5c3e\u6dfb\u52a0\u5bf9\u8c61 insert( index , obj ) \u5c06\u5bf9\u8c61\u63d2\u5165\u5230\u6307\u5b9a\u4f4d\u7f6e pop([ index = -1]) \u5220\u9664\u5217\u8868\u4e2d\u5143\u7d20\u3002\u5f53\u4e0d\u6307\u660e\u7d22\u5f15\u65f6\u9ed8\u8ba4\u4e3a-1 remove( obj ) \u79fb\u9664\u7b2c\u4e00\u4e2a obj \u7684\u5339\u914d\u9879 index( obj , [ start , [ end ]]) \u8fd4\u56de\u67d0\u4e2a\u5143\u7d20\u5728\u5217\u8868\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u7d22\u5f15\uff0c\u4e5f\u53ef\u4ee5\u6307\u660e\u67e5\u627e\u7684\u8303\u56f4 count( obj ) \u8fd4\u56de\u67d0\u4e2a\u5143\u7d20\u5728\u5217\u8868\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 reverse() \u53cd\u8f6c\u5217\u8868 extend( seq ) \u5728\u5217\u8868\u672b\u5c3e\u8ffd\u52a0\u53e6\u4e00\u4e2a\u5e8f\u5217 sort( cmp =None, key =None, reverse =false) \u628a\u5217\u8868\u6392\u5e8f Tuple \u5219\u53ea\u652f\u6301\u5176\u4e2d\u7684\u4e24\u4e2a Observer : index() \u3001 count() \u3002","title":"3. List \u65b9\u6cd5"},{"location":"1-Fundm/1.3/#4-list","text":"\u64cd\u4f5c\u7b26 \u4f5c\u7528 [1, 2] + [3, 4] \u62fc\u63a5 ['hello'] * 6 \u91cd\u590d\u62fc\u63a5 1 in [1, 2, 3] \u5b58\u5728\u4e8e for x in [1, 2] \u8fed\u4ee3 \u4ee5\u4e0a\u6240\u6709\u8fd0\u7b97\u7b26\u4e5f\u9002\u7528\u4e8e Tuple \u3002","title":"4. List \u64cd\u4f5c\u7b26"},{"location":"1-Fundm/1.4/","text":"#basic1 { font-family:Consolas, \"\u601d\u6e90\u9ed1\u4f53 CN\"; /* \u82f1\u6587\u5b57\u4f53\u5199\u5728\u524d, \u4e2d\u82f1\u6587\u5206\u79bb */ border-collapse:collapse; /* \u662f\u5426\u5c06\u8868\u683c\u4e24\u8fb9\u6298\u53e0\u4e3a\u4e00\u6761\u7ebf */ margin-left: 0px; /* \u8868\u683c\u6574\u4f53\u4e0e\u5de6\u4fa7\u7684\u8ddd\u79bb */ } /* tr: \u884c\u6807\u7b7e; td: \u884c\u4e2d\u7684\u5217\u6807\u7b7e; th: \u884c\u4e2d\u7684\u6807\u9898\u6807\u7b7e; */ #basic1 td, #basic1 th /* \u516c\u5171\u5c5e\u6027\u533a */ { font-size: 16px; border: 2px solid #FFFFFF; /* \u8fb9\u6846\u5bbd \u8fb9\u6846\u5b9e\u7ebf \u8fb9\u6846\u989c\u8272 */ padding: 8px 12px 8px 12px; /* \u5185\u8fb9\u8ddd: \u4e0a \u53f3 \u4e0b \u5de6 */ } #basic1 td { background-color: #e5efeb; /* height: 2.4em; */ /* \u8868\u683c\u9ad8\u5ea6 */ /* font-weight: 500; */ /* \u5b57\u4f53\u52a0\u7c97 */ } #basic1 th { text-align: center; font-size: 16px; padding-top:5px; padding-bottom:4px; background-color:#50aca2; color:#ffffff; /* \u5b57\u4f53\u989c\u8272: \u767d */ } /* \u7528\u4e8e\u5b9e\u73b0\u989c\u8272\u4ea4\u9519, <tr class=\"alt\"> */ #basic1 tr.alt td { /* background-color:#e5efeb; */ } #basic1 tr.smallalign td { padding: 8px 29px 8px 29px; } #basic1 td:hover { /* border: 1px solid red; */ } 1. \u521d\u59cb\u5316\u4e0e\u8bbf\u95ee \u2003\u5b57\u5178\u4e5f\u662f\u4e00\u79cd\u53ef\u53d8\u5bb9\u5668\uff0c\u7b49\u540c\u4e8e\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684 map \u3002 key \u4e0e key \u4ee5\u53ca value \u4e0e value \u4e4b\u95f4\u7684\u7c7b\u578b\u53ef\u4ee5\u4e0d\u540c\u3002 1 2 3 dict1 = { 'a' : 1 , 2 : 'b' } print ( dict1 [ 'a' ]) print ( dict1 [ 2 ]) \u2003\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee\u76f4\u63a5\u4fee\u6539 value \u6216\u6dfb\u52a0 key-value \u3002 1 2 dict1 [ 2 ] = 3 dict1 [ 'ff' ] = 'surr' \u2003\u5982\u679c\u8bbf\u95ee\u7684 key \u4e0d\u5b58\u5728\uff0c\u4f1a\u629b\u51fa\u4e00\u4e2a KeyError \u3002\u56e0\u6b64\u8bbf\u95ee\u524d\uff0c\u53ef\u4ee5\u901a\u8fc7\u64cd\u4f5c\u7b26 in \u6216 get() \u65b9\u6cd5\u4e8b\u5148\u5224\u65ad\u3002 \u2003\u5728 Python \u4e2d\uff0c dict \u7684 key \u5fc5\u987b\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff0c\u56e0\u6b64\u53ef\u4ee5\u662f\u6570\u3001\u5b57\u7b26\u4e32\u3001\u5143\u7ec4\uff0c\u800c\u4e0d\u80fd\u662f\u5217\u8868\u3002 dict \u7684\u6784\u9020\u51fd\u6570\uff1a dict() dict(** kwargs ) dict( mapping ) dict( iterable ) 1 2 3 4 5 6 7 8 9 10 11 # empty dict dict1 = dict () # init by assignment expression dict2 = dict ( a = 'a' , b = '1' ) # eq: {'a': 'a', 'b': 1} # init by mapping dict3 = dict ( zip ([ 1 , 2 , 3 ], [ 'a' , 'b' , 'c' ])) # init by iterable object dict4 = dict ([( 1 , 'a' ), [ 2 , 'b' ]]) 2. Dict \u51fd\u6570 \u51fd\u6570\u540d \u4f5c\u7528 len( seq ) \u8fd4\u56de\u952e\u503c\u4e2a\u6570 list( seq )\u3001tuple( seq ) \u628a\u952e\u7684\u5e8f\u5217\u8f6c\u6362\u4e3a\u5217\u8868\u6216\u5143\u7ec4 type( var ) \u8fd4\u56de\u8f93\u5165\u7684\u53d8\u91cf\u6240\u5c5e\u7684\u7c7b\u578b 3. Dict \u65b9\u6cd5 \u65b9\u6cd5\u540d \u4f5c\u7528 get( key , default =None) \u8fd4\u56de\u5bf9\u5e94 key \u5bf9\u5e94\u7684 value\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd4\u56de default has_key( key ) \u5224\u65ad\u662f\u5426\u6709 key setdefault( key , default =None) \u7c7b\u4f3c\u4e8e get()\uff0c\u989d\u5916\u5730\uff0c\u5982\u679c key \u4e0d\u5b58\u5728\u4e8e\u5b57\u5178\u4e2d\uff0c\u5411\u5b57\u5178\u4e2d\u6dfb\u52a0 (key->default) pop( key [, default ]) \u5220\u9664\u5b57\u5178\u4e2d key \u5bf9\u5e94\u7684 value \u5e76\u8fd4\u56de\u88ab\u5220\u6389\u7684\u503c\u3002\u5982\u679c key \u4e0d\u5b58\u5728\u4e14\u8bbe\u7f6e\u4e86 default \uff0c\u8fd4\u56de default \uff1b\u5426\u5219\u629b\u51fa KeyError keys(),values(),items() \u8fd4\u56de\u53ef\u904d\u5386\u7684\u952e\u3001\u503c\u3001\u952e\u503c\u7684\u5217\u8868 fromkeys( seq [, val ]) \u521b\u5efa\u4e00\u4e2a\u65b0\u5b57\u5178\uff0c\u4ee5 seq \u4e3a\u952e\u503c\u5e8f\u5217\uff0c val \u4e3a\u8be5\u5b57\u5178\u6240\u6709\u503c\u7684\u521d\u59cb\u503c update( dict ) \u628a dict \u4e2d\u7684\u952e\u503c\u5bf9\u90fd\u66f4\u65b0\u5230\u5b57\u5178\u91cc clear() \u6e05\u7a7a\u6240\u6709\u5143\u7d20 copy() Shallow Copy","title":"4.Dict"},{"location":"1-Fundm/1.4/#1","text":"\u5b57\u5178\u4e5f\u662f\u4e00\u79cd\u53ef\u53d8\u5bb9\u5668\uff0c\u7b49\u540c\u4e8e\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684 map \u3002 key \u4e0e key \u4ee5\u53ca value \u4e0e value \u4e4b\u95f4\u7684\u7c7b\u578b\u53ef\u4ee5\u4e0d\u540c\u3002 1 2 3 dict1 = { 'a' : 1 , 2 : 'b' } print ( dict1 [ 'a' ]) print ( dict1 [ 2 ]) \u2003\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee\u76f4\u63a5\u4fee\u6539 value \u6216\u6dfb\u52a0 key-value \u3002 1 2 dict1 [ 2 ] = 3 dict1 [ 'ff' ] = 'surr' \u2003\u5982\u679c\u8bbf\u95ee\u7684 key \u4e0d\u5b58\u5728\uff0c\u4f1a\u629b\u51fa\u4e00\u4e2a KeyError \u3002\u56e0\u6b64\u8bbf\u95ee\u524d\uff0c\u53ef\u4ee5\u901a\u8fc7\u64cd\u4f5c\u7b26 in \u6216 get() \u65b9\u6cd5\u4e8b\u5148\u5224\u65ad\u3002 \u2003\u5728 Python \u4e2d\uff0c dict \u7684 key \u5fc5\u987b\u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff0c\u56e0\u6b64\u53ef\u4ee5\u662f\u6570\u3001\u5b57\u7b26\u4e32\u3001\u5143\u7ec4\uff0c\u800c\u4e0d\u80fd\u662f\u5217\u8868\u3002 dict \u7684\u6784\u9020\u51fd\u6570\uff1a dict() dict(** kwargs ) dict( mapping ) dict( iterable ) 1 2 3 4 5 6 7 8 9 10 11 # empty dict dict1 = dict () # init by assignment expression dict2 = dict ( a = 'a' , b = '1' ) # eq: {'a': 'a', 'b': 1} # init by mapping dict3 = dict ( zip ([ 1 , 2 , 3 ], [ 'a' , 'b' , 'c' ])) # init by iterable object dict4 = dict ([( 1 , 'a' ), [ 2 , 'b' ]])","title":"1. \u521d\u59cb\u5316\u4e0e\u8bbf\u95ee"},{"location":"1-Fundm/1.4/#2-dict","text":"\u51fd\u6570\u540d \u4f5c\u7528 len( seq ) \u8fd4\u56de\u952e\u503c\u4e2a\u6570 list( seq )\u3001tuple( seq ) \u628a\u952e\u7684\u5e8f\u5217\u8f6c\u6362\u4e3a\u5217\u8868\u6216\u5143\u7ec4 type( var ) \u8fd4\u56de\u8f93\u5165\u7684\u53d8\u91cf\u6240\u5c5e\u7684\u7c7b\u578b","title":"2. Dict \u51fd\u6570"},{"location":"1-Fundm/1.4/#3-dict","text":"\u65b9\u6cd5\u540d \u4f5c\u7528 get( key , default =None) \u8fd4\u56de\u5bf9\u5e94 key \u5bf9\u5e94\u7684 value\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd4\u56de default has_key( key ) \u5224\u65ad\u662f\u5426\u6709 key setdefault( key , default =None) \u7c7b\u4f3c\u4e8e get()\uff0c\u989d\u5916\u5730\uff0c\u5982\u679c key \u4e0d\u5b58\u5728\u4e8e\u5b57\u5178\u4e2d\uff0c\u5411\u5b57\u5178\u4e2d\u6dfb\u52a0 (key->default) pop( key [, default ]) \u5220\u9664\u5b57\u5178\u4e2d key \u5bf9\u5e94\u7684 value \u5e76\u8fd4\u56de\u88ab\u5220\u6389\u7684\u503c\u3002\u5982\u679c key \u4e0d\u5b58\u5728\u4e14\u8bbe\u7f6e\u4e86 default \uff0c\u8fd4\u56de default \uff1b\u5426\u5219\u629b\u51fa KeyError keys(),values(),items() \u8fd4\u56de\u53ef\u904d\u5386\u7684\u952e\u3001\u503c\u3001\u952e\u503c\u7684\u5217\u8868 fromkeys( seq [, val ]) \u521b\u5efa\u4e00\u4e2a\u65b0\u5b57\u5178\uff0c\u4ee5 seq \u4e3a\u952e\u503c\u5e8f\u5217\uff0c val \u4e3a\u8be5\u5b57\u5178\u6240\u6709\u503c\u7684\u521d\u59cb\u503c update( dict ) \u628a dict \u4e2d\u7684\u952e\u503c\u5bf9\u90fd\u66f4\u65b0\u5230\u5b57\u5178\u91cc clear() \u6e05\u7a7a\u6240\u6709\u5143\u7d20 copy() Shallow Copy","title":"3. Dict \u65b9\u6cd5"},{"location":"1-Fundm/1.5/","text":"#basic1 { font-family:Consolas, \"\u601d\u6e90\u9ed1\u4f53 CN\"; /* \u82f1\u6587\u5b57\u4f53\u5199\u5728\u524d, \u4e2d\u82f1\u6587\u5206\u79bb */ border-collapse:collapse; /* \u662f\u5426\u5c06\u8868\u683c\u4e24\u8fb9\u6298\u53e0\u4e3a\u4e00\u6761\u7ebf */ margin-left: 0px; /* \u8868\u683c\u6574\u4f53\u4e0e\u5de6\u4fa7\u7684\u8ddd\u79bb */ } /* tr: \u884c\u6807\u7b7e; td: \u884c\u4e2d\u7684\u5217\u6807\u7b7e; th: \u884c\u4e2d\u7684\u6807\u9898\u6807\u7b7e; */ #basic1 td, #basic1 th /* \u516c\u5171\u5c5e\u6027\u533a */ { font-size: 16px; border: 2px solid #FFFFFF; /* \u8fb9\u6846\u5bbd \u8fb9\u6846\u5b9e\u7ebf \u8fb9\u6846\u989c\u8272 */ padding: 8px 12px 8px 12px; /* \u5185\u8fb9\u8ddd: \u4e0a \u53f3 \u4e0b \u5de6 */ } #basic1 td { background-color: #e5efeb; /* height: 2.4em; */ /* \u8868\u683c\u9ad8\u5ea6 */ /* font-weight: 500; */ /* \u5b57\u4f53\u52a0\u7c97 */ } #basic1 th { text-align: center; font-size: 16px; padding-top:5px; padding-bottom:4px; background-color:#50aca2; color:#ffffff; /* \u5b57\u4f53\u989c\u8272: \u767d */ } /* \u7528\u4e8e\u5b9e\u73b0\u989c\u8272\u4ea4\u9519, <tr class=\"alt\"> */ #basic1 tr.alt td { /* background-color:#e5efeb; */ } #basic1 tr.smallalign td { padding: 8px 29px 8px 29px; } #basic1 td:hover { /* border: 1px solid red; */ } 1. \u521d\u59cb\u5316 \u2003\u53ef\u4ee5\u901a\u8fc7 {<elements>} \u6216 set() \u521b\u5efa\u4e00\u4e2a\u96c6\u5408\u3002\u5982\u679c\u8981\u521b\u5efa\u4e00\u4e2a\u7a7a\u96c6\uff0c\u5219\u5fc5\u987b\u7528 set() \uff0c {} \u4ee3\u8868\u521b\u5efa\u4e00\u4e2a\u7a7a\u5b57\u5178\u3002 1 2 3 4 set1 = { 'ab' , 'cd' } set2 = set ( 'abcde' ) set3 = set ([ 1 , 2 , 3 ]) print ( 'a' in set2 ) set \u7684\u6784\u9020\u51fd\u6570\uff1a set() set( iterable ) 2. Set \u8fd0\u7b97\u7b26 \u8fd0\u7b97 \u4f5c\u7528 a | b $A\\cup B$ a & b $A\\cap B$ a - b $A\\setminus B$ a ^ b $A\\bigtriangleup B$ 3. Set \u65b9\u6cd5 \u65b9\u6cd5\u540d \u4f5c\u7528 add( e ) \u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 update( S ) \u6dfb\u52a0\u65b0\u7684\u5143\u7d20\u6216\u96c6\u5408\u5230\u6b64\u96c6\u5408\u4e2d discard( e ) \u5220\u9664\u4e00\u4e2a\u5143\u7d20 remove( e ) \u5220\u9664\u4e00\u4e2a\u5143\u7d20\u3002\u82e5 e \u4e0d\u5b58\u5728\u4f1a\u62a5\u9519\u3002 pop() \u968f\u673a\u79fb\u9664\u4e00\u4e2a\u5143\u7d20 issubset( S ),issuperset( S ) \u662f\u5426\u4e3a\u6307\u5b9a\u96c6\u5408\u7684\u5b50/\u8d85\u96c6 isdisjoint( S ) \u5224\u65ad\u4e24\u4e2a\u96c6\u5408\u662f\u5426\u4e0d\u76f8\u4ea4 union( set1 , ...) \u5408\u5e76\u4e24\u4e2a\u6216\u591a\u4e2a\u96c6\u5408 intersection( set1 , ...) \u8fd4\u56de\u4e24\u4e2a\u6216\u591a\u4e2a\u96c6\u5408\u7684\u4ea4(\u65b0\u96c6\u5408) intersection_update( set1 , ...) \u8fd4\u56de\u4e24\u4e2a\u6216\u591a\u4e2a\u96c6\u5408\u7684\u4ea4(\u5728\u539f\u96c6\u5408\u4e0a\u5220\u9664\u975e\u516c\u5171\u5143\u7d20) difference( S ) \u8fd4\u56de\u96c6\u5408\u4e0e S \u7684\u5dee\u96c6 difference_update( S ) \u5728\u539f\u96c6\u5408\u4e0a\u79fb\u9664 symmetric_difference( S ) \u8fd4\u56de\u96c6\u5408\u4e0e S \u7684\u5bf9\u79f0\u5dee\u96c6 symmetric_difference_update( S ) \u8fd4\u56de\u96c6\u5408\u4e0e S \u7684\u5bf9\u79f0\u5dee\u96c6\uff0c\u5728\u539f\u96c6\u5408\u4e0a\u64cd\u4f5c","title":"5.Set"},{"location":"1-Fundm/1.5/#1","text":"\u53ef\u4ee5\u901a\u8fc7 {<elements>} \u6216 set() \u521b\u5efa\u4e00\u4e2a\u96c6\u5408\u3002\u5982\u679c\u8981\u521b\u5efa\u4e00\u4e2a\u7a7a\u96c6\uff0c\u5219\u5fc5\u987b\u7528 set() \uff0c {} \u4ee3\u8868\u521b\u5efa\u4e00\u4e2a\u7a7a\u5b57\u5178\u3002 1 2 3 4 set1 = { 'ab' , 'cd' } set2 = set ( 'abcde' ) set3 = set ([ 1 , 2 , 3 ]) print ( 'a' in set2 ) set \u7684\u6784\u9020\u51fd\u6570\uff1a set() set( iterable )","title":"1. \u521d\u59cb\u5316"},{"location":"1-Fundm/1.5/#2-set","text":"\u8fd0\u7b97 \u4f5c\u7528 a | b $A\\cup B$ a & b $A\\cap B$ a - b $A\\setminus B$ a ^ b $A\\bigtriangleup B$","title":"2. Set \u8fd0\u7b97\u7b26"},{"location":"1-Fundm/1.5/#3-set","text":"\u65b9\u6cd5\u540d \u4f5c\u7528 add( e ) \u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 update( S ) \u6dfb\u52a0\u65b0\u7684\u5143\u7d20\u6216\u96c6\u5408\u5230\u6b64\u96c6\u5408\u4e2d discard( e ) \u5220\u9664\u4e00\u4e2a\u5143\u7d20 remove( e ) \u5220\u9664\u4e00\u4e2a\u5143\u7d20\u3002\u82e5 e \u4e0d\u5b58\u5728\u4f1a\u62a5\u9519\u3002 pop() \u968f\u673a\u79fb\u9664\u4e00\u4e2a\u5143\u7d20 issubset( S ),issuperset( S ) \u662f\u5426\u4e3a\u6307\u5b9a\u96c6\u5408\u7684\u5b50/\u8d85\u96c6 isdisjoint( S ) \u5224\u65ad\u4e24\u4e2a\u96c6\u5408\u662f\u5426\u4e0d\u76f8\u4ea4 union( set1 , ...) \u5408\u5e76\u4e24\u4e2a\u6216\u591a\u4e2a\u96c6\u5408 intersection( set1 , ...) \u8fd4\u56de\u4e24\u4e2a\u6216\u591a\u4e2a\u96c6\u5408\u7684\u4ea4(\u65b0\u96c6\u5408) intersection_update( set1 , ...) \u8fd4\u56de\u4e24\u4e2a\u6216\u591a\u4e2a\u96c6\u5408\u7684\u4ea4(\u5728\u539f\u96c6\u5408\u4e0a\u5220\u9664\u975e\u516c\u5171\u5143\u7d20) difference( S ) \u8fd4\u56de\u96c6\u5408\u4e0e S \u7684\u5dee\u96c6 difference_update( S ) \u5728\u539f\u96c6\u5408\u4e0a\u79fb\u9664 symmetric_difference( S ) \u8fd4\u56de\u96c6\u5408\u4e0e S \u7684\u5bf9\u79f0\u5dee\u96c6 symmetric_difference_update( S ) \u8fd4\u56de\u96c6\u5408\u4e0e S \u7684\u5bf9\u79f0\u5dee\u96c6\uff0c\u5728\u539f\u96c6\u5408\u4e0a\u64cd\u4f5c","title":"3. Set \u65b9\u6cd5"},{"location":"1-Fundm/1.6/","text":"#basic1 { font-family:Consolas, \"\u601d\u6e90\u9ed1\u4f53 CN\"; /* \u82f1\u6587\u5b57\u4f53\u5199\u5728\u524d, \u4e2d\u82f1\u6587\u5206\u79bb */ border-collapse:collapse; /* \u662f\u5426\u5c06\u8868\u683c\u4e24\u8fb9\u6298\u53e0\u4e3a\u4e00\u6761\u7ebf */ margin-left: 0px; /* \u8868\u683c\u6574\u4f53\u4e0e\u5de6\u4fa7\u7684\u8ddd\u79bb */ } /* tr: \u884c\u6807\u7b7e; td: \u884c\u4e2d\u7684\u5217\u6807\u7b7e; th: \u884c\u4e2d\u7684\u6807\u9898\u6807\u7b7e; */ #basic1 td, #basic1 th /* \u516c\u5171\u5c5e\u6027\u533a */ { font-size: 12px; border: 2px solid #FFFFFF; /* \u8fb9\u6846\u5bbd \u8fb9\u6846\u5b9e\u7ebf \u8fb9\u6846\u989c\u8272 */ padding: 8px 12px 8px 12px; /* \u5185\u8fb9\u8ddd: \u4e0a \u53f3 \u4e0b \u5de6 */ } #basic1 td { background-color: #e5efeb; /* height: 2.4em; */ /* \u8868\u683c\u9ad8\u5ea6 */ /* font-weight: 500; */ /* \u5b57\u4f53\u52a0\u7c97 */ } #basic1 th { text-align: center; padding-top:5px; padding-bottom:4px; background-color:#50aca2; color:#ffffff; /* \u5b57\u4f53\u989c\u8272: \u767d */ } /* \u7528\u4e8e\u5b9e\u73b0\u989c\u8272\u4ea4\u9519, <tr class=\"alt\"> */ #basic1 tr.alt td { /* background-color:#e5efeb; */ } #basic1 tr.smallalign td { padding: 8px 29px 8px 29px; } #basic1 td:hover { /* border: 1px solid red; */ } 1. \u6761\u4ef6\u7ed3\u6784 Python \u7684\u6761\u4ef6\u8fd0\u7b97\u7b26\uff1a and, or, not \u3002\u57fa\u672c\u7684\u6761\u4ef6\u7ed3\u6784\u4e3a\uff1a 1 2 3 4 5 6 if ( < cond1 > ): < statement1 > elif ( < cond2 > ): < statement2 > else : < statement3 > 2. \u5faa\u73af\u7ed3\u6784 (1). \u57fa\u672c\u5faa\u73af\u7ed3\u6784 Python \u4e2d\u6709 while \u548c for-in \u4e24\u79cd\u5faa\u73af\u7ed3\u6784\u3002 for \u5faa\u73af\u7684\u7ed3\u6784\u4e3a: 1 2 for < var > in < iterable > : < statement > \u5982\u679c\u9700\u8981\u6309\u7167\u7d22\u5f15\u904d\u5386\uff0c\u53ef\u4ee5\u4f7f\u7528 range() \u51fd\u6570\uff1a range( start =0, stop , step =1) \u521b\u5efa\u4e00\u4e2a\u6574\u6570 List\uff0c\u6b65\u957f\u4e3a step \uff0c\u8303\u56f4\u4e3a [ start , stop ) (2). else \u8bed\u53e5 Python3 \u652f\u6301 while-else \u548c for-else \uff1a while-else: \u5f53\u4e14\u4ec5\u5f53\u5faa\u73af\u56e0\u4e3a\u6761\u4ef6\u9000\u51fa\uff0c\u800c\u6ca1\u6709\u88ab break \uff0c\u9000\u51fa\u65f6\u6267\u884c\u4e00\u6b21 else \u5757 for-else: \u5f53\u4e14\u4ec5\u5f53\u5faa\u73af\u56e0\u4e3a\u904d\u5386\u7ed3\u675f\u9000\u51fa\uff0c\u800c\u6ca1\u6709\u88ab break \uff0c\u9000\u51fa\u65f6\u6267\u884c\u4e00\u6b21 else \u5757 3. \u7f29\u8fdb\u89c4\u5219 \u2003 Python \u901a\u8fc7\u7f29\u8fdb\u5212\u5206\u4f5c\u7528\u57df\u3002\u6bcf\u884c\u4ee3\u7801\u90fd\u4f9d\u5b83\u7684\u7f29\u8fdb\u683c\u6570\u6709\u4e00\u4e2a\u7f29\u8fdb\u7ea7\u522b\uff0c Python \u89e3\u91ca\u5668\u7ef4\u62a4\u4e00\u4e2a\u7f29\u8fdb\u6808\uff0c\u5728\u8bfb\u53d6 py \u6587\u4ef6\u524d\uff0c\u9996\u5148\u628a\u7f29\u8fdb\u7ea7\u522b 0 \u538b\u5165\u6808\u4e2d\u3002\u7136\u540e\u4ece\u5934\u5230\u5c3e\uff0c\u8bfb\u53d6\u6bcf\u884c\u4ee3\u7801\uff0c\u5f53\u8bfb\u53d6\u5230\u4e00\u884c\u6709\u6548\u4ee3\u7801\u7684\u7f29\u8fdb\u7ea7\u522b\u65f6\uff0c\u4e0e\u6808\u9876\u503c\u6bd4\u8f83\uff1a \u5982\u679c\u76f8\u7b49\uff0c\u4ec0\u4e48\u4e5f\u4e0d\u4f1a\u53d1\u751f\uff1b \u5982\u679c\u5927\u4e8e\u6808\u9876\u503c\uff0c\u8be5\u884c\u4ee3\u7801\u7684\u7f29\u8fdb\u7ea7\u522b\u5165\u6808\uff0c\u540c\u65f6\u751f\u6210\u4e00\u4e2a\u7f29\u8fdb\u6807\u8bb0\uff1b \u5982\u679c\u5c0f\u4e8e\u6808\u9876\u503c\uff0c\u90a3\u4e48\u6808\u4e2d\u6240\u6709\u6bd4\u8be5\u884c\u4ee3\u7801\u7684\u7f29\u8fdb\u7ea7\u522b\u5927\u7684\u503c\u90fd\u4f1a\u88ab\u79fb\u9664\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u4e0e\u81ea\u5df1\u7684\u7ea7\u522b\u76f8\u7b49\u7684\u503c\uff0c\u540c\u65f6\u751f\u6210\u4e00\u4e2a\u6269\u5c55\u6807\u8bb0\u3002","title":"6.Basic Structure"},{"location":"1-Fundm/1.6/#1","text":"Python \u7684\u6761\u4ef6\u8fd0\u7b97\u7b26\uff1a and, or, not \u3002\u57fa\u672c\u7684\u6761\u4ef6\u7ed3\u6784\u4e3a\uff1a 1 2 3 4 5 6 if ( < cond1 > ): < statement1 > elif ( < cond2 > ): < statement2 > else : < statement3 >","title":"1. \u6761\u4ef6\u7ed3\u6784"},{"location":"1-Fundm/1.6/#2","text":"","title":"2. \u5faa\u73af\u7ed3\u6784"},{"location":"1-Fundm/1.6/#1_1","text":"Python \u4e2d\u6709 while \u548c for-in \u4e24\u79cd\u5faa\u73af\u7ed3\u6784\u3002 for \u5faa\u73af\u7684\u7ed3\u6784\u4e3a: 1 2 for < var > in < iterable > : < statement > \u5982\u679c\u9700\u8981\u6309\u7167\u7d22\u5f15\u904d\u5386\uff0c\u53ef\u4ee5\u4f7f\u7528 range() \u51fd\u6570\uff1a range( start =0, stop , step =1) \u521b\u5efa\u4e00\u4e2a\u6574\u6570 List\uff0c\u6b65\u957f\u4e3a step \uff0c\u8303\u56f4\u4e3a [ start , stop )","title":"(1). \u57fa\u672c\u5faa\u73af\u7ed3\u6784"},{"location":"1-Fundm/1.6/#2-else","text":"Python3 \u652f\u6301 while-else \u548c for-else \uff1a while-else: \u5f53\u4e14\u4ec5\u5f53\u5faa\u73af\u56e0\u4e3a\u6761\u4ef6\u9000\u51fa\uff0c\u800c\u6ca1\u6709\u88ab break \uff0c\u9000\u51fa\u65f6\u6267\u884c\u4e00\u6b21 else \u5757 for-else: \u5f53\u4e14\u4ec5\u5f53\u5faa\u73af\u56e0\u4e3a\u904d\u5386\u7ed3\u675f\u9000\u51fa\uff0c\u800c\u6ca1\u6709\u88ab break \uff0c\u9000\u51fa\u65f6\u6267\u884c\u4e00\u6b21 else \u5757","title":"(2). else \u8bed\u53e5"},{"location":"1-Fundm/1.6/#3","text":"Python \u901a\u8fc7\u7f29\u8fdb\u5212\u5206\u4f5c\u7528\u57df\u3002\u6bcf\u884c\u4ee3\u7801\u90fd\u4f9d\u5b83\u7684\u7f29\u8fdb\u683c\u6570\u6709\u4e00\u4e2a\u7f29\u8fdb\u7ea7\u522b\uff0c Python \u89e3\u91ca\u5668\u7ef4\u62a4\u4e00\u4e2a\u7f29\u8fdb\u6808\uff0c\u5728\u8bfb\u53d6 py \u6587\u4ef6\u524d\uff0c\u9996\u5148\u628a\u7f29\u8fdb\u7ea7\u522b 0 \u538b\u5165\u6808\u4e2d\u3002\u7136\u540e\u4ece\u5934\u5230\u5c3e\uff0c\u8bfb\u53d6\u6bcf\u884c\u4ee3\u7801\uff0c\u5f53\u8bfb\u53d6\u5230\u4e00\u884c\u6709\u6548\u4ee3\u7801\u7684\u7f29\u8fdb\u7ea7\u522b\u65f6\uff0c\u4e0e\u6808\u9876\u503c\u6bd4\u8f83\uff1a \u5982\u679c\u76f8\u7b49\uff0c\u4ec0\u4e48\u4e5f\u4e0d\u4f1a\u53d1\u751f\uff1b \u5982\u679c\u5927\u4e8e\u6808\u9876\u503c\uff0c\u8be5\u884c\u4ee3\u7801\u7684\u7f29\u8fdb\u7ea7\u522b\u5165\u6808\uff0c\u540c\u65f6\u751f\u6210\u4e00\u4e2a\u7f29\u8fdb\u6807\u8bb0\uff1b \u5982\u679c\u5c0f\u4e8e\u6808\u9876\u503c\uff0c\u90a3\u4e48\u6808\u4e2d\u6240\u6709\u6bd4\u8be5\u884c\u4ee3\u7801\u7684\u7f29\u8fdb\u7ea7\u522b\u5927\u7684\u503c\u90fd\u4f1a\u88ab\u79fb\u9664\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u4e0e\u81ea\u5df1\u7684\u7ea7\u522b\u76f8\u7b49\u7684\u503c\uff0c\u540c\u65f6\u751f\u6210\u4e00\u4e2a\u6269\u5c55\u6807\u8bb0\u3002","title":"3. \u7f29\u8fdb\u89c4\u5219"}]}